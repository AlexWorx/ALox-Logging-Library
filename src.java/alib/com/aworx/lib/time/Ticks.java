// #################################################################################################
//  ALib - A-Worx Utility Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################


/**
 *  This namespace of the A-Worx Library holds classes that are providing methods for
 *  measuring time spans and conversion of dates and time values.
 */
package com.aworx.lib.time;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;


/** *************************************************************************************************
 *  This class provides an interface into system dependent timer values (usually 64 bit
 *  tick counters) that we call *ticks*. Ticks and this class allow to store and calculate time
 *  values in an efficient and highly accurate way.
 *
 *  Ticks generated by this class can be added and subtracted:
 *
 *  - Subtraction generates a *span value in ticks*
 *  - *Span value in ticks* can be added to themselves safely
 *  - *Span value in ticks* can be added to ticks safely
 *
 *  Conversion functions to milliseconds, microseconds and nanoseconds accept ticks and span
 *  values in ticks in the same manner.
 *
 *  As Ticks are system dependent, they should not be stored in system independent data files or
 *  otherwise shared between systems. In general such values should only be used by methods of
 *  this class and classes
 *  \ref com::aworx::lib::time::TickWatch "TickWatch" and
 *  \ref com::aworx::lib::time::TickSpan  "TickSpan".
 *
 *  The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 *  deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 **************************************************************************************************/
 public class Ticks
{
    // #############################################################################################
    // static fields and methods
    // #############################################################################################

        /** The system clock milliseconds at process creation time. */
        private static long                creationTimeDateMillis;

        /** The internal frequency of our timer. */
        private static long                internalFrequency;

        /** Ticks at process initialization. */
        private static Ticks               creationTimeTicks;

        /** ****************************************************************************************
         * This static constructor is called once at the beginning of the lifecycle of this library. We
         * use it to get
         *
         * a) the milliseconds in the epoch in the moment this class was statically initialized
         * b) the system nanoseconds in the moment this class was statically initialized
         *
         * These values are used later to avoid creating a new Date() object (speed optimization).
         ******************************************************************************************/
        static
        {
            creationTimeDateMillis=   ( new Date() ).getTime();
            creationTimeTicks=        new Ticks();

            internalFrequency=        1000000000L;
        }

        /** ****************************************************************************************
         * @return The Frequency of the internal tick timer. The Frequency gives you an indication of the
         * accuracy of the time (At least if the underlying system library is reasonably well working in
         * this respect). And this is the reason why it is published with this field. This value does
         * not necessarily correspond to the number of ticks per second that you get from this classes
         * raw() method. (Well, in the Java implementation of ALIB it currently does.)
         ******************************************************************************************/
        public static long         internalFrequency()        {    return internalFrequency; }


        /** ****************************************************************************************
         *  @return The point in time when the ticker library (ALIB) was initialized. This might be
         *  useful to measure the time since the process was started.
         ******************************************************************************************/
        public static Ticks        creationTime()            {    return creationTimeTicks; }




    // #############################################################################################
    // Private fields
    // #############################################################################################

        /** The value  */
        protected  long            ticks                        = 0L;

        /** A temporary ticks object. used for as a return value */
        protected        Ticks     tempTicks;


    // #############################################################################################
    // Constructors
    // #############################################################################################

        /** ****************************************************************************************
         * Creates a Ticks instance representing the point in time when this constructor was invoked.
         ******************************************************************************************/
        public              Ticks    ( )                   {    set();                }

        /** ****************************************************************************************
         * Creates a Ticks instance representing a given time point or time span in ticks.
         *
         * @param ticks    The value to copy into this.
         ******************************************************************************************/
        public              Ticks    ( long ticks )        {    this.ticks=        ticks;    }

        /** ****************************************************************************************
         * Creates a Ticks instance representing the same point in time or time span as the instance provided.
         *
         * @param copy  The instance to copy the ticks value from.
         ******************************************************************************************/
        public              Ticks    ( Ticks copy )        {    ticks=            copy.ticks;    }

    // #############################################################################################
    // Interface
    // #############################################################################################

        /** ****************************************************************************************
         * Sets the actual point in time as the value of this instance.
         ******************************************************************************************/
        public void         set()                   {    ticks=     System.nanoTime();            }

        /** ****************************************************************************************
         * Sets the point in time or time span represented by this instance to the value represented by
         * the given Ticks instance.
         * @param other  The instance to copy the ticks value from.
         ******************************************************************************************/
        public void         set( Ticks other )      {    this.ticks=            other.ticks;    }

        /** ****************************************************************************************
         * Sets this objects' value to the value specified in ticks.
         * @param value  The number of ticks this object should represent.
         ******************************************************************************************/
        public void         setRaw( long value )    {    this.ticks=            value;            }

        /** ****************************************************************************************
         * Gets the internally stored system dependent time in ticks.
         * @return  The internal value
         ******************************************************************************************/
        public long         raw()                   {    return         ticks;                    }

        /** ****************************************************************************************
         * Adds the point in time or time span represented by the given Ticks instance to this instance.
         * @param other  The instance to add the ticks value from.
         ******************************************************************************************/
        public void         add( Ticks other )      {    this.ticks+=        other.ticks;    }

        /** ****************************************************************************************
         * Adds the point in time or time span represented by the given Ticks instance to this instance.
         * @param value  The ticks to add.
         ******************************************************************************************/
        public void         add( long  value )      {    this.ticks+=        value;    }

        /** ****************************************************************************************
         * Subtracts the point in time or time span represented by the given Ticks instance from this instance.
         * @param other  The instance to subtract the ticks value from.
         ******************************************************************************************/
        public void         sub( Ticks other )      {    this.ticks-=        other.ticks;    }

        /** ****************************************************************************************
         * Subtracts the point in time or time span represented by the given Ticks instance from this instance.
         * @param value  The ticks to subtract.
         ******************************************************************************************/
        public void         sub( long value )       {    this.ticks-=        value;    }

    // #############################################################################################
    // Interface age, since
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * Note: Attention: The object returned is a temporary object, deemed to be reused by other
         * interface methods of this instance. Therefore, it must be used only until subsequent
         * method invocations on this instance are performed (hence, also not thread safe!)
         * Use #age(Ticks result) to provide a dedicated external result instance.
         *
         * @return  The age of this instance, stored in a temporary object, not thread safe object.
         ******************************************************************************************/
        public  Ticks    age( )
        {
            if (tempTicks == null )
                tempTicks= new Ticks( 0L );
            return age( tempTicks );
        }

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current system time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * @param result   The Ticks object to store the result in. If null, this is created.
         * @return The age of this instance, stored in the given or created object.
         ******************************************************************************************/
        public  Ticks    age( Ticks result )
        {
            if ( result == null )
                result= new Ticks();
            else
                result.set();
            result.sub( this );
            return result;
        }


        /** ****************************************************************************************
         * Returns the time span between the value represented by this instance and the given one.
         * If the given Ticks represents an earlier point in time, the result is positive.
         *
         * Note: Attention: The object returned is a temporary object, deemed to be reused by other
         * interface methods of this instance. Therefore, it must be used only until subsequent
         * method invocations on this instance are performed (hence, also not thread safe!)
         * Use #since(Ticks olderTime, Ticks result) to provide a dedicated external result instance.
         *
         * @param olderTime The value to compare this instance with.
         *
         * @return The calculated time span, stored in a temporary object, not tread safe object.
         ******************************************************************************************/
        public  Ticks    since( Ticks olderTime )
        {
            if (tempTicks == null )
                tempTicks= new Ticks( 0L );
            return since( olderTime, tempTicks );
        }

        /** ****************************************************************************************
         * Returns the time span between the value represented by this instance and the given one.
         * If the given Ticks represents an earlier point in time, the result is positive.
         *
         * @param olderTime The value to compare this instance with.
         * @param result    The Ticks object to store the result in. If null, this is created.
         *
         * @return The calculated time span, stored in the given or created object.
         ******************************************************************************************/
        public  Ticks    since ( Ticks olderTime, Ticks result )
        {
            if ( result == null )
                result= new Ticks( this );
            else
                result.set( this );

            result.sub( olderTime );
            return    result;
        }

        /** ****************************************************************************************
         * Determines if this objects' age is higher than a given time span.
         *
         * @param waitTime  A \b %Ticks object representing a time span.
         * @return  \c true if the given \b %Ticks object representing a time span is smaller
         *          or equal than our age. \c false otherwise.
         ******************************************************************************************/
        public boolean   hasElapsed( Ticks waitTime )
        {
            return age().raw()  >=  waitTime.raw();
        }

    // #############################################################################################
    // Conversion to/from time values (nanoseconds, milliseconds, microseconds, seconds)
    // #############################################################################################

        /** ****************************************************************************************
         * Converts the internal value to days.
         * @return  The internal value converted to days.
         ******************************************************************************************/
        public    long        inDays()              { return    ticks / 86400000000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to hours.
         * @return  The internal value converted to hours.
         ******************************************************************************************/
        public    long        inHours()             { return    ticks /  3600000000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to minutes.
         * @return  The internal value converted to minutes.
         ******************************************************************************************/
        public    long        inMinutes()           { return    ticks /    60000000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to seconds.
         * @return  The internal value converted to seconds.
         ******************************************************************************************/
        public    long        inSeconds()           { return    ticks /     1000000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to milliseconds.
         * @return  The internal value converted to milliseconds.
         ******************************************************************************************/
        public    long        inMillis()            { return    ticks /        1000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to microseconds.
         * @return  The internal value converted to microseconds.
         ******************************************************************************************/
        public    long        inMicros()            { return    ticks /           1000L;    }

        /** ****************************************************************************************
         * Converts the internal value to nanoseconds.
         * @return  The internal value converted to nanoseconds.
         ******************************************************************************************/
        public    long        inNanos     ()        { return    ticks;    }


        /** ****************************************************************************************
         *  Returns 1 divided by internal value in seconds, hence the number of Hertz that this Ticks
         *  object represents when interpreted as a time span.
         *
         * @param nDigitsPrec  Number of digits that the return value will be rounded to.
         *                     Defaults to -1 which means no rounding.
         *
         * @return A double value representing the frequency in hertz.
         ******************************************************************************************/
        public    double        inHertz    ( int nDigitsPrec )
        {
            // check
            if ( ticks == 0 )
                return 0.0;

            // to hertz
            double hz= ((double) 1000000000d) / ticks;

            // no rounding? that's it
            if ( nDigitsPrec < 0 )
                return hz;

            // round
            double mag= Math.pow( 10, nDigitsPrec );
            return ( (int) ( hz * mag + ( hz < 0 ? -0.5 : 0.5 )) ) / mag;
        }

        /** ****************************************************************************************
         *  Returns 1 divided by internal value in seconds, hence the number of Hertz that this Ticks
         *  object represents when interpreted as a time span.
         *
         * @return A double value representing the frequency in hertz.
         ******************************************************************************************/
        public    double    inHertz    ()               { return inHertz( -1 );                }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param days  The time span to set in days.
         ******************************************************************************************/
        public    void      fromDays   ( long days )    { ticks=    days *  86400000000000L;   }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in hours.
         * @param hours The time span to set in hours.
         ******************************************************************************************/
        public    void      fromHours  ( long hours )   { ticks=    hours *  3600000000000L;   }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in minutes.
         * @param mins  The time span to set in minutes.
         ******************************************************************************************/
        public    void      fromMinutes( long mins )    { ticks=    mins *     60000000000L;   }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param secs  The time span to set in seconds.
         ******************************************************************************************/
        public    void      fromSeconds( long secs )    { ticks=    secs *      1000000000L;   }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in milliseconds.
         * @param millis  The time span to set in milliseconds.
         ******************************************************************************************/
        public    void      fromMillis ( long millis )  { ticks=    millis *       1000000L;   }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in microseconds.
         * @param micros  The time span to set in microseconds.
         ******************************************************************************************/
        public    void      fromMicros ( long micros )  { ticks=    micros *          1000L;   }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in nanoseconds.
         * @param nanos  The time span to set in nanoseconds.
         ******************************************************************************************/
        public    void      fromNanos  ( long nanos )   { ticks=    nanos;   }


    // #############################################################################################
    // Conversion to platform/language specific time objects
    // #############################################################################################

        /** ****************************************************************************************
         * Converts the internal value into milliseconds since January 1, 1970, 00:00:00 GMT.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @return  Milliseconds in the epoch.
         ******************************************************************************************/
        public    long    inEpochMillis     ()
        {
            return   creationTimeDateMillis  + ( ( ticks - creationTimeTicks.raw()) / 1000000L  );
        }

        /** ****************************************************************************************
         * Sets the internal value by converting the given milliseconds since
         * January 1, 1970, 00:00:00 GMT. The conversion is dependent on time zone and system
         * clock setting of the host.
         * @param epochMillis   The milliseconds in the epoch to convert.
         ******************************************************************************************/
        public    void    setFromEpochMillis ( long epochMillis )
        {
            ticks= creationTimeTicks.raw() + ( ( epochMillis - creationTimeDateMillis  ) * 1000000L );
        }

        /** ****************************************************************************************
         * Converts the internal value to java.util.Calendar.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @param result   The java.util.Calendar object to set. If null, this is created.
         * @return  The date object given or created.
         ******************************************************************************************/
        public    Calendar    inJavaCalendar     ( Calendar result )
        {
            // set in given result date?
            if ( result == null )
                result= new GregorianCalendar( );

            // to millis since 1970
            long millisSince1970=  inEpochMillis();

            // set in calendar object
            result.setTimeInMillis( millisSince1970 );

            // that's it
            return result;
        }

        /** ****************************************************************************************
         * Sets the internal value by converting the given java.util.Calendar.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @param javaCalendar  The java.util.Date object to convert.
         ******************************************************************************************/
        public    void    setFromJavaCalendar     ( Calendar javaCalendar )
        {
            ticks= javaCalendar.getTimeInMillis() * 1000000L;
        }

        /** ****************************************************************************************
         * Converts the internal value to java.util.Date.
         * The conversion is dependent on time zone and system clock setting of the host.
         * @param result    The java.util.Date object to set. If null, this is created.
         *
         * @return  The date object given or created.
         ******************************************************************************************/
        public    Date    inJavaDate     ( Date result )
        {
            // to millis since 1970
            long millisSince1970=  inEpochMillis();

            // set in given result date?
            if ( result != null )
            {
                result.setTime( millisSince1970 );
                return result;
            }

            // return new date
            return new Date( millisSince1970 );
        }

        /** ****************************************************************************************
         * Sets the internal value by converting the given java.util.Date.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @param javaDate  The java.util.Date object to convert.
         ******************************************************************************************/
        public    void    setFromJavaDate     ( Date javaDate )
        {
            setFromEpochMillis( javaDate.getTime() );
        }

}


