// #################################################################################################
//  ALox - Logging in Bauhaus Style!
//
//  (c) 2013 A-Worx GmbH, Published under the The MIT License (Open Source License, see LICENSE.txt)
//  
//  File:	02.2.Man.Features and Limitations.dox                                 ALox Documentation
// #################################################################################################

/**
\page man_features_and_limitations      Features and Limitations


- Very simple to use.

- Very fast implementation to minimize runtime overhead of logging. 

- Automatic removal (pruning) of log statements (even complex stuff) from release code
  without the need of preprocessor if/endif code cluttering. 

- Automatic collection and logging of information about the entity that invoked a log statements. 
  Each log line is "clickable" in your IDE. Such clicks jump to the corresponding 
  source code and line number that performed the log. 

- API design follows concept of "tolerance", using default values, auto-creation of missing
  objects, etc. to minimize intrusiveness of ALox in respect to cluttering your code and what you 
  need to make it really work.

- Release logging for all or selected parts (optional filtered pruning of release code)

- Multiple parallel log streams, e.g. for logging to the console and in parallel into a file.

- Plug in customized log targets, which enables custom output targets (e.g. databases or 
  an internet service) and custom output formatting.
  
- Predefined TextLogger with automatically adjusted column widths for the various attributes of a log
  line. This allows to get interesting parts of a log output at a glimpse.

- *Log domains* allow the classification of different log statements into user defined 
  topics. Such domains can be controlled at runtime to allow the programmer to 
  concentrate on the area of current interest.

  Log domains are hierarchically organized what allows to control a whole "tree" of domains
  with only one line of code. 

- Conditional logging, similar to assertions.

- Logging of objects using reflection with variable recursion depth and detection of cyclic
  references with one line of code.

- Logging Exceptions, XML documents, etc, also with one line of code.

- Code markers to allow back tracing of conditions that happened previous to a log statement
  (This is useful for example within exception handler code).

- Log output easily configurable in respect to detail and format



### Future work (and therefore today's limitations) ###

- Today, ALox Logging is available for C# only. JAVA, C++ and Objective-C are planned.
  Java is next!

- File loggers (easy, will come very soon)

- HTTP/SOAP/REST loggers (send us your proposals for the right standards to support first!)

- *Log domain* substitution to modify domains in foreign code to suit your needs needs

- More on performance logging

*/