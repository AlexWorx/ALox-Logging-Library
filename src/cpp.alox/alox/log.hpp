// #################################################################################################
//  aworx::lox - ALox Logging Library
//
//  (c) 2013-2015 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

// include ALox main header first...
#if !defined (HPP_AWORX_ALOX_ALOX)
    #error "lox.hpp must not be included manually. Include alox.hpp instead."
#endif

// then, set include guard
#ifndef HPP_AWORX_ALOX_LOG
#define HPP_AWORX_ALOX_LOG 1



namespace aworx {
namespace       lox {


// forwards
class Lox;


/** ************************************************************************************************
 *  While in other implementations of ALox this is a 100% static wrapper of class Lox, in C++,
 *  due to the preprocessor macro system, we are not in the need to wrap Lox for the sake of
 *  pruning the code from debug logging statements.
 *
 *  What remains in this class are the definitions of important public Enums. As described in the
 *  ALox manual, the decision was taken to break the object oriented paradigm and also the namespace
 *  paradigm and place these enums here. This leads to a much cleaner code when using ALox.
 **************************************************************************************************/
class Log
{
    // #############################################################################################
    // static functionality
    // #############################################################################################
    protected:
        /**  flag indicating that ALox has been initialized */
        static bool                     isInitialized;

    // #############################################################################################
    // Public Enums for ALox
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *     These are the levels of log verbosity assignable to a log domain.
         ******************************************************************************************/
        enum class DomainLevel
        {
            /** Do not log anything */
            OFF,

            /** %Log only level Error*/
            ERRORS,

            /** %Log only levels Warning or Error.*/
            WARNINGS_AND_ERRORS,

            /** %Log all  levels but Verbose.*/
            INFO_WARNINGS_AND_ERRORS,

            /** %Log all.*/
            ALL,

            /** Inherit level from parent domain*/
            INHERIT,
        };

        /** ****************************************************************************************
         *     These are the levels of log verbosity used in a log call.
         ******************************************************************************************/
        enum class Level
        {
            /** The most verbose log level to be used for debug output statements. Logged only if
                * the domains log level is set to DomainLevel.All*/
            VERBOSE,

            /** The standard log level for normal log output statements. Logged if the domains
                * level is either DomainLevel.All or DomainLevel.InfoWarningsAndErrors*/
            INFO,

            /** A log level for warning messages, hence things that might lead to errors or are not
                * welcome for other reasons, but maybe are not errors.
                * It is not logged only if the domains log level is DomainLevel.Errors orLogDomain.Level. Off*/
            WARNING,

            /** A log level for (severe) error messages
                * It is suppressed only if the domains log level is set to DomainLevel.Off*/
            ERROR,
        };

        /** ****************************************************************************************
         *  These are definitions which are used as a parameter to certain ALox methods to determine
         *  the breadth of the scope of a setting. The definitions are platform dependent. E.g. in
         *  C# the scope can be "Method" or "SourceFile" file while in Java it can be "Package",
         *  "Class" or "Method". The difference is due to different mechanisms to automatically
         *  collect caller information.<p>
         *
         *  \note The C++ version of ALox implements scope mechanisms using caller information
         *  generated by the preprocessor. By default, debug logging supports such caller
         *  information, release logging does not.<br>
         *  If scope information is not supported, all uses of scopes in C++ will just default
         *  to an empty scope and therefore reflect the same, shared scope, which is not very
         *  helpful. Therefore, for standard release logging, the use of the scope mechanisms
         *  should be be avoided, unless caller information is explicitly enabled. <br>
         *  For more information on how to change the defaults, see \ref ALOX_DBG_LOG_CI and
         *  \ref ALOX_REL_LOG_CI in section \ref GrpALoxCodeSelectorSymbols.
         ******************************************************************************************/
        enum class Scope
        {
            /** No scope should be applied/affected*/
            NONE,

            /** Defines the actual source file as the scope*/
            SOURCE_FILE,

            /** Defines the actual method as the scope*/
            METHOD,
        };


    // #############################################################################################
    // Static Interface
    // #############################################################################################

        /** ****************************************************************************************
         * This method must be called prior to using the ALox library, e.g. at the beginning of
         * the main() method of an application. It is OK, to call this method more than once, which
         * allows independent code blocks (e.g. libraries) to bootstrap ALox without interfering.
         * Nevertheless, the very first invocation should not be interrupted by a parallel invocation
         * of a second thread. So, it has to be assured that this method is invoked once on the
         * real bootstrap an app before other threads are active.
         *
         * Several ALox classes call this method implicitly on construction, e.g. Lox and Logger.
         * Therefore, when using ALox, there is no need to to call this method, unless very special
         * use of ALox (e.g. when ALox is used exclusively within new threads) is made.
         *
         * \note ALox must not be used before all global/static variables are created. Hence, it
         * is not allowed to initialize ALox within static variable initialization code. This
         * restriction is wanted by design, because different platforms and compilers implement the
         * bootstrap of static and global data differently and it is not considered a good
         * programming style to rely on C++ bootstrap. Using ALox/AWXU within C++ bootstrap is
         * undefined behavior.
         *
         *  @param classSizes Please provide the c++ precompiler symbol
         *                    \ref ALOX_COMPILED_CLASS_SIZE_VERIFYER here.<br>
         *                    <b>Note:</b> This is a special parameter that checks the sizes of
         *                    classes as they are found in the header files. The InitALox method
         *                    compares the provided size with the one it evaluated at compile time
         *                    of the ALox library used.
         *                    This way, differences in the library compilation in comparison to
         *                    the code unit that uses ALox can be detected. Such differences could
         *                    lead to strange behavior and application crashes. Therefore, if a
         *                    difference is detected, a message is print to the standard output and
         *                    exit(-1) is performed!
         *
         * @returns Returns true if ALox was initialized before, false if not.
         ******************************************************************************************/
        ALOX_API static bool      InitALox( int classSizes );

        /** ****************************************************************************************
         *  Cleans up static/global ALox memory on termination. This method is useful if using
         *  memory analysis tools (such as valgrind) to remove any internal allocations before a
         *  program terminates.
         ******************************************************************************************/
        ALOX_API static void      TerminationCleanUp();

    // #############################################################################################
    // The lox singleton for debug logging
    // #############################################################################################
    #if defined(ALOX_DBG_LOG)
    public:
        /** ****************************************************************************************
         *  This is a singleton static object of type aworx::lox::Lox which provided for standard
         *  debug logging statements.
         ******************************************************************************************/
        ALOX_API static Lox*      lox;
    #endif



    // #############################################################################################
    // ToString() methods for ALox public enums
    // #############################################################################################
    public:
        /** ****************************************************************************************
         *  Provides a string representation of the Log::DomainLevel enums.
         *  @param level The enum value to retrieve a string representation for.
         *  @returns A string representation of the provided Log::DomainLevel value.
         ******************************************************************************************/
        static const char* ToString( DomainLevel level );

        /** ****************************************************************************************
         *  Provides a string representation of the Log::Level enums.
         *  @param level The enum value to retrieve a string representation for.
         *  @returns A string representation of the provided Log::Level value.
         ******************************************************************************************/
        static const char* ToString( Level level );

        /** ****************************************************************************************
         *  Provides a string representation of the Log::Scope enums.
         *  @param scope The enum value to retrieve a string representation for.
         *  @returns A string representation of the provided Log::Scope value.
         ******************************************************************************************/
        static const char* ToString( Scope scope );

}; // LOG


}} // namespace

#endif // HPP_AWORX_ALOX_LOG
