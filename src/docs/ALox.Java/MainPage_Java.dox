// #################################################################################################
//  ALox - Logging in Bauhaus Style!
//
//  (c) 2013 A-Worx GmbH, Published under the The MIT License (Open Source License, see LICENSE.txt)
//  
//  File:	MainPage.dox 	    										          ALox Documentation
// #################################################################################################

/**
\mainpage	Java Reference


# Welcome to ALox for Java! #

This is a sub site of the ALox documentation specific to Java programming. The following 
information is found here:

## Tutorial ##
If you are new to ALox, the easiest way to get familiar with it, is to walk yourself
through the \ref tutorial_java.

## Project Setup ##
The steps to configure Eclipse or any other JAVA IDE to support ALox is described
here: \ref setup_projects_java".

## ALox for Android ##

The Java Version is compatible with Android development and supports logging into LogCat.
To stream ALox into LogCat create a logger of type [AndroidLogCatLogger](com.aworx.lox.android.AndroidLogCatLogger)
instead of type [ConsoleLogger](com.aworx.lox.loggers.ConsoleLogger)

    Log.addLogger( new AndroidLogCatLogger("LogCat") );

Attention: The normal [ConsoleLogger](com.aworx.lox.loggers.ConsoleLogger) would not produce any visible output using
the Android Emulator or a debugging device.

## Pruning ALox from your release code ##
Unlike C# (beginning in Version 5.0), JAVA does not provide a built-in mechanism to "prune" the debug log messages
from the code. There are a range of tools available on the java tools market, that provide such feature (most
commonly along with so called "obfuscation"). Samples of such tools will be given here in the future. (We are
very thankful to receive your experience and tool description to incorporate into this documentation).

## Class Reference ##

To browse the Java class reference, please use the page menu above.

## Organization of code ##

In the class lists of this documentation, besides ALox you will find a bunch of classes that we call the "A-Worx Util" classes. 
They reside in the namespace **com.aworx.util**.
Next to the provision of basic functionality, the motivation for creating util classes is to provide a 
similar interface to basic functionality of ALox across languages and platforms. In other word, the utility
functions help ALox code to be very much alike across different languages and platforms.

ALox itself consist of three namespaces. While the main classes that the user of ALox interfaces with reside in **com.aworx.lox**. 
Some specific loggers are found in **com.aworx.lox.loggers**. 
Internal classes are located in **com.aworx.lox.core**.



*/
