// #################################################################################################
//  ALox - Logging in Bauhaus Style!
//
//  (c) 2013 A-Worx GmbH, Published under the The MIT License (Open Source License, see LICENSE.txt)
//  
//  File:	03.1.Man.Setup Projects CS.dox                                        ALox Documentation
// #################################################################################################

/**
\page setup_projects_vs_cs         Setup Visual Studio for C# Projects

\tableofcontents
       

# 1. Setting Up Visual Studio # {#setup_projects_vs_cs_intro}

To use ALox logging in your C# project using Visual Studio, some few preparatory steps have to be
taken.

Currently, there is no binary distribution of ALox for C# available. Therefore, the way to incorporate
ALox into your project is to include the sources. There are two options:
                                                                        
- add one of the existing ALox class library Visual Studio projects to your solution or to 
- add ALox sources directly to your project. 

\note
If you do not actually have a C# project (or do not want to touch it now) and you just want to
have a first look into ALox, then create a new project using the Visual Studio Project Wizard. 
Be sure to create an executable and that the typical "hello world" sample prints to the Visual Studio console.

\note
Microsoft claims that Visual Studio enables "round trip engineering" between Visual Studio versions 2010, 2012 and 2013.
We have not tested ALox with VS 2010, however, 2012 and 2013 both work well within our installation.

<br>
## 1.1. Download ##      {#setup_projects_vs_cs_download}
Unpack the ALox distribution (e.g. as zip) from [Alox at GitHub](https://github.com/AlexWorx/ALox-Logging-Library)
and move all its contents to a place where you safely store 3rd party libraries.  

We call this folder the *ALOX_LIB_PATH*.

<br>
## 1.2. Add one of the following projects into your solution ##    {#setup_projects_vs_cs_addprojects}

To incorporate ALox into your Visual Studio solution, you have to follow three steps:

__Step 1:__ Choose the right class library project that fits well to your own project target and platform. 
The projects are found in

        ALOX_LIB_PATH\ide\vstudio\ALox-CS.xxx-DLL-xxx
   
Your, choices are:
      

<table border="1" >
    <tr><th><center>Project Name</center>           </th>   <th><center>Description</center></th>  </tr>

    <tr><td>ALox-CS-.Net45-DLL               </td>   <td>For .Net 4.5 projects that do *not* use ALox release logging</tr>
    <tr><td>ALox-CS-.Net45-DLL-Release-Log   </td>   <td>For .Net 4.5 projects that do use ALox release logging</tr>

    <tr><td>ALox-CS-.WP71-DLL                </td>   <td>For windows Phone 7.1 projects that do *not* use ALox release logging</tr>
    <tr><td>ALox-CS-.WP71-DLL-Release-Log    </td>   <td>For windows Phone 7.1 projects that do use ALox release logging</tr>

    <tr><td>ALox-CS-.WP80-DLL                </td>   <td>For windows Phone 8 projects that do *not* use ALox release logging</tr>
    <tr><td>ALox-CS-.WP80-DLL-Release-Log    </td>   <td>For windows Phone 8 projects that do  use ALox release logging</tr>
</table>

                                                                              
\note
If you do not know the difference between debug and release logging, [see the FAQ](../faq.html#faq_debug_vs_release_logging)
\par

\note
The difference between the project versions with or without the release logging options are:

\note 
- Those projects named *ALox-CS-???-DLL-Release-Log* have the conditional compile symbol *ALOX_REL_LOG* set in their
  release configuration. (You will read more on conditional compile symbols in the next section).
- Due to this, ALox features are still included in the release version of these projects' assemblies. 
  (Only, class [Log](@ref #com::aworx::lox::Log) gets its  interface replaced by thin stub methods in release mode.). 
- The size of the release assembly increases if you use the release log enabled projects.
- Temporary or long-term pruning of the release log statements in your code is still enabled when you use the release log
  versions of the library. Only, if you never want to use release logging, choose the smaller library that just enables debug logging.
<br>
Sounds complicated, but isn't! Just go with the release-log enabled version for now!
Because the size of the release assembly is very small anyhow (as of ALox V.1.1.0 it is 25kb without release
logging vs. 49kb including release logging) you can easily choose the "Release-Log" version of your platform.

\par
\note
If there is no appropriate predefined project available for you, skip steps 2 and 3 and continue reading
below at \ref setup_projects_vs_cs_adding_source!

Go ahead and add the Visual Studio project that suit you to your solution.

<br>
__Step 2:__  Set a build dependency from your project to the just added *ALox-CS-DLL* project. Steps are:

   - right click your project in solution explorer
   - choose context menu **Project dependencies...**
   - tick the checkbox for the *ALox-CS-DLL* project.

<br>
__Step 3:__  Add the ALox-CS-DLL project as a reference to your project. Steps are:

   - right click your project in solution explorer
   - choose context menu **Add reference...**
   - on the left side choose "Solution" and "Projects"
   - tick the checkbox for the *ALox-CS-DLL* project.

<br>
## 1.3 Alternatively: Adding source code to your project ## {#setup_projects_vs_cs_adding_source}
If there is no appropriate predefined project for your target and 
platform, you might want to add the ALox source code directly to your project. This can be
done as follows:

 - Within your Visual Studios solution explorer, right-click on your project and use **Add/New Folder...** to create a new source
   folder called "ALox" or similar.
 - Right-click the new folder in solution explorer and use **Add/Existing Item...** repeatedly to add all *.cs files that you find
   in the ALox source folder's subfolders: 

   - \c ALOX_LIB_PATH\src\cs.aworx.util
   - \c ALOX_LIB_PATH\src\cs.alox

\note
You can just add all *.cs files to your new src folder "ALox". However, if you want, you can keep the source tree 
intact by adding the right sub folders (unfortunately Visual Studio does not do this for you automatically).

\par
\note
You do not need to include the *.cs files from folders **tests.src** and  **tests.src.util**.

<br>
## 1.4 Configure your project properties ## {#setup_projects_vs_cs_configure}

Now, as ALox is a part of your Visual Studio solution, go ahead as follows:

- Open your projects' properties and:
 - choose "Debug" as the **Configuration** you want to modify.
 - In the 'Build' section add  **ALOX_DEBUG** to the list of *conditional compilation symbols* (separated from existing symbols by a semicolon).
 - Make sure that the checkbox "Define DEBUG constant" is checked (this is the default).
 - For windows phone projects, also add either **ALOX_WP71** or **ALOX_WP8** to that list depending on what platform
   you are targeting. <br>
   _Note:_ Besides other minor changes, this disables a feature to recursively log an object using reflection, because
   reflection operations are not supported (allowed) on the Windows Phone platform. 
 - If you want to use ALox for release logging (see [FAQ](../faq.html#faq_debug_vs_release_logging)) then you do 
   the same for the "Release" configuration. But, instead of **ALOX_DEBUG** please specify **ALOX_REL_LOG**.
 \par
- Now close the project properties and continue with adjusting the references of your project:
 - In Solution Explorer, right-click the "References" folder in your project
 - choose "Add Reference..."
 - In the now open dialog navigate to section "Assemblies" and here choose "Framework".

   Make sure that you have ticked the checkboxes for:

   - System.Xml.Linq library (you can avoid this by setting the *conditional compilation symbol*  **ALOX_NO_XML**, see above)
   - For Windows Phone 7.1 projects: "Microsoft.Phone" (not needed for Windows Phone 8)

 \par
- For Windows Phone 7.1 projects (not needed for Windows Phone 8) you need to download and install the 
  <a href="http://nuget.org/packages/Microsoft.Bcl/">Microsoft BCL Portability Pack</a>
  Using the NuGet package manager as described on the libraries' page. This should be a matter of just a minute.

## 1.5 Test your setup ##  {#setup_projects_vs_cs_testnow}

To test your setup, add minimum ALox functionality to your project as described in the first chapter
of \ref tutorial_cs into your main method or anywhere you think it is appropriate:

\snippet cs.unittests.alox/Tests_Tutorial.cs        Tut_Hello_ALox


__You are set and your solution should compile without an error!__

<br>
# 2. Conditional Compilation Symbols #  {#setup_projects_vs_cs_conditional_compile_symbols}

In section \ref setup_projects_vs_cs_configure we have learned about some conditional 
compilation symbols already. The following gives the complete list of such symbols
introduced by ALox for C#:

- **ALOX_DEBUG**<br>
  Enable debug logging. This should be set in the *Debug configuration* of your projects. Otherwise,
  not log output is generated if using the static interface of class [Log](@ref #com::aworx::lox::Log).  
 
- **ALOX_REL_LOG**<br>
  To enable release logging. This should only be set in the *Release configuration* of your projects
  if you are using release logging with class [Lox](@ref #com::aworx::lox::Log).  If you do not
  use release logging features of ALox, this symbol should not be set to minimize the code that
  the ALox classes add to your executables.
  And, even if you do use release logging, but you want to (temporarily) disable and prune it, then unset this
  symbol. On recompile, also your release logging code will disappear.

- **ALOX_WP71**<br>
  To compile ALox for Windows Phone 7.1 projects. This should be set in the Debug and Release 
  configuration of your projects Windows Phone 7.1 projects.
  In addition to some compatibility changes in the code, this symbol also activates **ALOX_NO_REFLECTION**,
  hence the LogTools.Instance method is not available in Windows Phone projects. (This is due to security
  restrictions in the Windows Phone system architecture).

- **ALOX_WP8**<br>
  To compile ALox for Windows Phone 8 projects. This should be set in the Debug and Release 
  configuration of your projects Windows Phone 8.x projects.
  In addition to some compatibility changes in the code, this symbol also activates **ALOX_NO_REFLECTION**,
  hence the LogTools.Instance method is not available in Windows Phone projects. (This is due to security
  restrictions in the Windows Phone system architecture).

- **ALOX_NO_REFLECTION**<br>
  This symbol deactivates the use of reflection in class [LogTools](@ref #com::aworx::lox::tools::LogTools). 
  This is useful for target platforms that do not allow instance inspection using reflection techniques.
  The method [LogTools.Instance](@ref #com::aworx::lox::tools::LogTools::Instance) will be available 
  but just convert your object into readable text using *ToString()*.

- **ALOX_NO_XML**<br>
  This symbol deactivates the use of *System.Xml.Linq* library in class [LogTools](@ref #com::aworx::lox::tools::LogTools). 
  This is useful for target platforms that do not support this library. 
  The method [LogTools.XML](@ref #com::aworx::lox::tools::LogTools::XML) will not be available however.

- **ALOX_NO_CONSOLE**<br>
  This symbol deactivates the use of *Console.WriteLine()* calls in class [ConsoleLogger](@ref #com::aworx::lox::loggers::ConsoleLogger). 
  If this is set, the flag [ConsoleLogger.EnableAppConsole](@ref #com::aworx::lox::loggers::ConsoleLogger::EnableAppConsole)
  becomes unavailable. The output of [ConsoleLogger](@ref #com::aworx::lox::loggers::ConsoleLogger) 
  will go exclusively to System.Diagnostics.Debug.WriteLine().

- **ALOX_NO_THREADS**<br>
  This symbol deactivates any mechanisms to protect ALox logging in multi-threaded environments. Use this 
  symbol only if you are sure to operate single threaded. (Even if your application does not create a new thread
  directly, e.g. UI driven applications are generally multi threaded. The advantage of using this 
  compile symbol is to increase ALox performance by around 8% (when logging in-memory). For console logging the
  performance gain is much less. So, only in very critical situations this symbol should be used.

<br>
# 3. Pruning ALox #  {#setup_projects_vs_cs_pruning}

## 3.1 What is Pruning? ##  {#setup_projects_vs_cs_pruning_what_is_pruning}

What we mean with the term "pruning" is the automatic removal of the (debug) logging code from
your release executable (or library) that is ready for deployment. The goals that motivate
for auto pruning are:

- Maximize execution speed of your code, because all log statements are pruned.
- Minimize the footprint of your code.
- Keep the console clean in the release version of your console application.
- Hide your software secrets, by removing all textual strings from your executable or library
  that includes debug messages.
   
Furthermore, if you are using ALox as well for release log outputs, then the above
stays true for all of your debug log statements, while all release log statements remain.

## 3.1 How Pruning in ALox for C# works ##  {#setup_projects_vs_cs_pruning_how}

Since Version 5, the Microsoft C# compiler supports methods to be annotated with class "ConditionalAttribute".
This attribute uses a conditional compilation symbol which causes the compiler to ignore the invocation of methods
when the symbol is not set. Again: the *invocation* of the methods is disabled, not the compilation of the methods 
itself!

Consider the following line of code:

\code{.cs}
    Log.AddLogger( new ConsoleLogger() );
\endcode

Method Log.AddLogger() is annotated as conditional using the symbol *ALOX_DEBUG*. Now the compiler does not
include this line into the executable when *ALOX_DEBUG* is not set.

However, the compiler still checks the integrity of the parameter. Therefore, ALox provides empty method stubs
for the most common classes and a few of their methods, even in the release configuration. To be able to compile the sample 
above in release mode, we need

- a class ConsoleLogger
- a constructor of class ConsoleLogger taking a String object

In the release version, both are empty "stubs" of their original classes. The reason why ALox creates stubs is to 
minimize the footprint of ALox in the moment it is not used (in the deployed applications that do not do release logging). 
Members of classes that are not too frequently used are not available in the release. 

Consider the following code to setup the format of a log line:

\code{.cs}
    ConsoleLogger cl= new ConsoleLogger();
    cl.LineFormatter.Format= new MString( "%CF(%CL):%CM()%A3[%DD][%TD][%TE +%TI] %L [%O] <%#>: ");
    Log.AddLogger( cl ) );
\endcode

This would lead to a compilation error in the release configuration of your project (if you do not use
release logging). The reason is, that the field *LineFormatter* is not included in the release version of 
ALox. In fact, the whole class *TextLoggerLineFormatter* is not existing!

To resolve this, use conditional compilation:

\code{.cs}
    ConsoleLogger cl= new ConsoleLogger();
    #if ALOX_DEBUG
        cl.LineFormatter.Format= new MString( "%CF(%CL):%CM()%A3[%DD][%TD][%TE +%TI] %L [%O] <%#>: ");
    #endif
    Log.AddLogger( cl ) );
\endcode

While this is sufficient, in the last sample, when compiled in release configuration, 
there is an almost empty version of ConsoleLogger still created and never used. Therefore, you
might want to do it like this:

\code{.cs}
    #if ALOX_DEBUG
        ConsoleLogger cl= new ConsoleLogger();
        cl.LineFormatter.Format= new MString( "%CF(%CL):%CM()%A3[%DD][%TD][%TE +%TI] %L [%O] <%#>: ");
        Log.AddLogger( cl ) );
    #endif
\endcode

This sample shows, that only for the configuration/bootstrap part your code gets "cluttered" with 
\c \#if \c ... \c \#endif statements. And: As long as you do not get compiler errors in 
the release version, you can trust ALox that the impact of remaining configuration code
is minimal. Again: standard logging code is removed 100%!

## 3.1 Mission accomplished: Perfect Auto Pruning with ALox! ##  {#setup_projects_vs_cs_pruning_result}

The result of the things said above incorporate **six great news** for you:

1. You can safely use most methods of class *Log* without enclosing them by \c \#if \c ... \c \#endif statements!
2. The impact of using ALox debug log statements in respect to execution speed in the release version of your application 
   is exactly ZERO, because the methods do not make it into your release executable!
3. The impact of using ALox in respect to the footprint of your executable extremely small (all that remains are
   some empty classes with a few stubs). This remains true, even if thousands of new features would come in future
   versions of ALox!
4. All debug log statements, including all textual messages you are adding to your log calls, are completely
   pruned from the release executable! Your "debug secrets" can not be reverse engineered, they are just gone!
5. You do not need to clutter your code with \c \#if \c ... \c \#endif statements if using ALox!
6. Even if you mix debug and release logging features of ALox the above stays true, except that the footprint
   of the ALox library is a little higher (e.g. it is 50kb in V1.1.0) !

\note 
This is all true for C#. For other platforms check out platform specific sections of ALox pruning techniques.

*/