// #################################################################################################
//  ALox - Logging in Bauhaus Style!
//
//  (c) 2013 A-Worx GmbH, Published under the The MIT License (Open Source License, see LICENSE.txt)
//  
//  File:	03.1.Man.Setup Projects CS.dox                                        ALox Documentation
// #################################################################################################

/**
\page setup_projects_vs_cs         Setup Visual Studio for C# Projects


To use ALox logging in your C# project using Visual Studio, some few preparational steps have to be
taken.

Currently, there is no other way to *install* the library, than to either 

- add one of the existing ALox class library projects to your solution or to 
- add ALox sources directly to your project. 

*Note: If you do not actually have a C# project (or do not want to touch it now) and you just want to
have a first look into ALox, then create a new project using the Visual Studio Project Wizard. 
Be sure to create an executable and that the typical "hello world" sample prints to the Visual Studio console.*

Unpack the ALox distribution zip and move all its contents to a place where you safely store 3rd party libraries.  
We call this the *ALox Library folder*.

## Link one of the following projects into your solution ##

To incorporate ALox into your Visual Studio solution, you have to follow three steps:


a) Choose the right class library project that fits well to your own project target and platform. 
   Currently, choices are:

   - *ALox-CS-DLL*: For .Net 4.5 projects
   - *ALox-CS-WP71-DLL*: For windows Phone 7.1 projects 
   - *ALox-CS-WP80-DLL*: For windows Phone 8 projects 

*Note: If there is no appropriate predefined project available for you, skip b) and c) and continue reading
below at **adding source**!*

   Add the Visual Studio project that you find in the corresponding sub folder of the *ALox Library folder*
   to your solution.

b) Set a build dependency from your project to the just added *ALox-CS-DLL* project. Steps are:

   - right click your project in solution explorer
   - choose context menu **Project dependencies...**
   - tick the checkbox for the *ALox-CS-DLL* project.

c) Add the ALox-CS-DL project as a reference to your project. Steps are:

   - right click your project in solution explorer
   - choose context menu **Add reference...**
   - on the left side choose "Solution" and "Projects"
   - tick the checkbox for the *ALox-CS-DLL* project.

**Adding source**: Alternatively, if there is no appropriate predefined project for your target and 
platform, you might want to add the ALox source code directly to your project. This can be
done as follows:

 - Within your Visual Studios solution explorer, right-click on your project and use **Add/New Folder...** to create a new source
   folder called "ALox" or similar.
 - Right-click the new folder in solution explorer and use **Add/Existing Item...** repeatedly to add all *.cs files that you find
   in the ALox source folder's subfolders 

   - **src**,  
   - **src/core** and 
   - **src.util**.

 - Note: You can just add all *.cs files to your new src folder "ALox". However, if you want, you can keep the source tree 
   intact by adding the right sub folders (unfortunately Visual Studio does not do this for you automatically).
 - Note: You do not need to include the *.cs files from folders **tests.src** and  **tests.src.util**.


## Adjust your project properties ##

Now, as ALox is a part of your Visual Studio solution, go ahead as follows:

- Open your projects' properties and:
 - choose "Debug" as the **Configuration** you want to modify.
 - In the 'Build' section add  **ALOX_DEBUG** to the list of *conditional compilation symbols* (separated from existing symbols by a semicolon).
 - Make sure that the checkbox "Define DEBUG constant" is checked (this is the default).
 - For windows phone projects, also add either **ALOX_WP71** or **ALOX_WP8** to that list depending on what platform
   you are targeting. <p>
   *Note:* Besides other minor changes, this disables a feature to recursively log an object using reflection, because
   reflection operations are not supported (allowed) on the Windows Phone platform. 
- Now close the project properties and continue with adjusting the references of your project:
 - In Solution Explorer, right-click the "References" folder in your project
 - choose "Add Reference..."
 - In the now open dialog navigate to section "Assemblies" and here choose "Framework".<p>
   Make sure that you have ticked the checkboxes for:

   - System.Xml.Linq library (you can avoid this by setting the *conditional compilation symbol*  **ALOX_NO_XML**, see above)
   - For Windows Phone 7.1 projects: "Microsoft.Phone" (not needed for Windows Phone 8)

- For Windows Phone 7.1 projects (not needed for Windows Phone 8) you need to download and install the 
  <a href="http://nuget.org/packages/Microsoft.Bcl/">Mircosoft BCL Portability Pack</a>
  Using the NuGet package manager as described on the libraries page, this is a matter of just a minute.


You are set and your solution should compile without an error.
*/