// #################################################################################################
//  aworx::util - Classes we need
//
//  (c) 2013-2015 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

// include AWXU main header first...
#if !defined (HPP_AWORX_UTIL_AWXU)
    #include "awxu.hpp"
#endif

// then, set include guard
#ifndef HPP_AWORX_UTIL_TICKS
#define HPP_AWORX_UTIL_TICKS 1



// -------------------------------------------------------------------------------------------------
// --- includes
// -------------------------------------------------------------------------------------------------
#if !defined (HPP_AWORX_UTIL_ASTRING)
    #include "astring.hpp"
#endif

#if !defined (_GLIBCXX_CSTDINT) && !defined(_CSTDINT_)
    #include <cstdint>
#endif
#if !defined (_GLIBCXX_CTIME) && !defined(_CTIME_)
    #include <ctime>
#endif

namespace aworx {
namespace       util {



/** ************************************************************************************************
 *
 *  This class provides an interface into system dependent timer values (usually 64 bit
 *  tick counters) that we call *ticks*. Ticks and this class allow to store and calculate time
 *  values in an efficient and highly accurate way.
 *
 *  Ticks generated by this class can be added and subtracted:
 *
 *  - Subtraction generates a *span value in ticks*
 *  - *Span value in ticks* can be added to themselves safely
 *  - *Span value in ticks* can be added to ticks safely
 *
 *  Conversion functions to milliseconds, microseconds and nanoseconds accept ticks and span
 *  values in ticks in the same manner.
 *
 *  As Ticks are system dependent, they should not be stored in system independent data files or
 *  otherwise shared between systems. In general such values should only be used by methods of
 *  this class and class StopWatch.
 *  The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 *  deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 **************************************************************************************************/
class Ticks
{
    // #############################################################################################
    // AWXU library initialization
    // #############################################################################################
    private:
        friend class AWXU;

        /**  Initializes AWXU thread logic.   */
        static void _awxu_init_lib_ticks();

        /**  Frees resources and shuts down the AWXU thread logic.  */
        static void _awxu_destruct_lib_ticks();


    // #############################################################################################
    // Type and preprocessor definitions
    // #############################################################################################
    public:
        #define    AWXU_NANOS_PER_DAY              86400000000000L
        #define    AWXU_NANOS_PER_HOUR              3600000000000L
        #define    AWXU_NANOS_PER_MINUTE              60000000000L
        #define    AWXU_NANOS_PER_SECOND               1000000000L
        #define    AWXU_NANOS_PER_MILLISECOND             1000000L
        #define    AWXU_NANOS_PER_MICROSECOND                1000L
        #define    AWXU_NANOS_PER_NANOSECOND                    1L

    // #############################################################################################
    // static fields and friend methods
    // #############################################################################################
    protected:

        /**  The ticks when static constructor is invoked. */
        AWXU_API  static          Ticks*                          creationTime;

        /**  The frequency of the system timer*/
        AWXU_API  static          int_fast64_t                    frequency;

        #if defined( _MSC_VER )
            /**  This factor is applied to ticks received from the system, to virtually increase the
                 resolution into the single digit nanosecond magnitude (e.g. from 100 ns resolution)
                 We are minimizing rounding errors that way in the nano/microsecond area */
            AWXU_API  static      int_fast64_t                    mscResFactor;

            /**  The number of ticks per day */
            AWXU_API  static      double                          mscTicksPerDay;

            /**  The number of ticks per hour */
            AWXU_API  static      double                          mscTicksPerHour;

            /**  The number of ticks per minute */
            AWXU_API  static      double                          mscTicksPerMinute;

            /**  The number of ticks per second */
            AWXU_API  static      double                          mscTicksPerSecond;

            /**  The number of ticks per millisecond */
            AWXU_API  static      double                          mscTicksPerMillisecond;

            /**  The number of ticks per microsecond */
            AWXU_API  static      double                          mscTicksPerMicrosecond;

            /**  The number of ticks per nanosecond */
            AWXU_API  static      double                          mscTicksPerNanosecond;

            /**  The number of ticks per 100ns */
            AWXU_API  static      double                          mscTicksPerFileTimeTick;

        #endif

        /**  Global method that initializes AWXU ticks logic.  */
        friend    Ticks*  static_lib_init_ticks();

        /**  Global method that shuts down the AWXU ticks logic.  */
        friend    void    static_awxu_lib_ticks_destroy();

    // #############################################################################################
    // protected fields
    // #############################################################################################
    protected:
        /// The value
                        int_fast64_t                ticks                                       =0L;

    // #############################################################################################
    // static interface
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *
         *  The time (in ticks) when the ticker library containing the ticker (AWXU) was initialized.
         *  This might be useful to measure the time since the process was started.
         *
         * @return  Initialization time of the library or process
         ******************************************************************************************/
        AWXU_API  static const Ticks&               CreationTime();

        /** ****************************************************************************************
         * The Frequency of the internal tick timer. The Frequency gives you an indication of the
         * accuracy of the time (At least if the underlying system library is reasonably well
         * working in this respect). And this is the reason why it is published with this field.
         * This value does not necessarily correspond to the number of ticks per second that you
         * get from this classesRaw() method. In the current implementation you rather get a tick
         * per nanosecond.
         *
         * @return  A int value representing the frequency of the internal tick timer.
         ******************************************************************************************/
        AWXU_API  static int_fast64_t               InternalFrequency();

    // #############################################################################################
    // Constructors
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Creates a Ticks instance representing the point in time when this constructor was invoked.
         ******************************************************************************************/
        Ticks()                         { Set();    }

        /** ****************************************************************************************
         * Creates a Ticks instance representing a given point in time or time span in ticks.
         * @param ticks The value to copy into this.
         ******************************************************************************************/
        Ticks( int_fast64_t ticks )     { this->ticks=    ticks;    }

        /** ****************************************************************************************
         * Creates a Ticks instance representing the same point in time or time span as the instance
         * provided.
         * @param copy The instance to copy the ticks value from.
         ******************************************************************************************/
        Ticks( const Ticks& copy )      { this->ticks=    copy.ticks; }

    // #############################################################################################
    // Interface
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *     Sets the actual point in time as the value of this instance.
         ******************************************************************************************/
        void  Set()
        {
            #if defined( __GLIBCXX__ )
                struct timespec t;
                AWXU_ASSERT_RESULT_EQUALS( clock_gettime(CLOCK_MONOTONIC, &t),  0 );

                ticks= ( t.tv_sec * AWXU_NANOS_PER_SECOND  ) + t.tv_nsec ;
            #else
                #if defined( _MSC_VER )
                    LARGE_INTEGER v;
                    AWXU_ASSERT_RESULT_NOT_EQUALS( QueryPerformanceCounter( &v ) , 0 );
                    ticks= v.QuadPart * mscResFactor;
                #else
                    #error
                #endif
            #endif
        }


        /** ****************************************************************************************
         *  Sets the point in time or time span represented by this instance to the value
         *  represented by the given Ticks instance.
         *  @param other The Ticks object to copy.
         ******************************************************************************************/
        void         Set( const Ticks& other )         { this->ticks=    other.ticks;    }

        /** ****************************************************************************************
         *  Sets this objects' value to the value specified in raw ticks.
         *  @param value The number of ticks this object should represent.
         ******************************************************************************************/
        void         SetRaw( int_fast64_t value )      { this->ticks=    value;           }

        /** ****************************************************************************************
         *  Gets the internally stored system dependent time in raw ticks.
         *  @return  The internal value
         ******************************************************************************************/
        int_fast64_t Raw()    const                    { return ticks;                    }

        /** ****************************************************************************************
         *  Adds time (span) represented by the given Ticks instance to this instance.
         *  @param other The Ticks object to add.
         ******************************************************************************************/
        void         Add( const Ticks& other )         { this->ticks+=    other.ticks;   }

        /** ****************************************************************************************
         *  Adds time (span) represented by the given Ticks instance to this instance.
         *  @param ticks The ticks to add.
         ******************************************************************************************/
        void         Add( int_fast64_t ticks )         { this->ticks+=    ticks;         }

        /** ****************************************************************************************
         *  Subtracts the point in time or time span represented by the given Ticks instance from
         *  this instance.
         *  @param other The Ticks object to subtract.
         ******************************************************************************************/
        void         Sub( const Ticks& other )         { this->ticks-=    other.ticks;   }

        /** ****************************************************************************************
         *  Subtracts the point in time or time span represented by the given Ticks instance from
         *  this instance.
         *  @param ticks The ticks to subtract.
         ******************************************************************************************/
        void         Sub( int_fast64_t ticks )         { this->ticks-=    ticks;         }

    // #############################################################################################
    // Interface Age, Since
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current system
         * time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * @return  The age of this instance stored in a new Ticks.
         ******************************************************************************************/
        Ticks    Age()
        {
            Ticks result;
            result.Sub( ticks );
            return result;
        }

        /** ****************************************************************************************
         *  Returns the time span between the value represented by this instance and the given
         *  StopWatch.If the given StopWatch represents an earlier point in time, the result is
         *  positive.
         *
         * @param olderTime The value to compare this instance with
         *
         * @return  The age of this instance stored in the given or created object.
         ******************************************************************************************/
        Ticks    Since( const Ticks& olderTime )
        {
            Ticks result(ticks);
            result.Sub( olderTime );
            return result;
        }

    // #############################################################################################
    // Conversion to/from time values (nanoseconds, milliseconds, microseconds, seconds)
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *  Converts the internal value to days.
         * @return  The internal value converted to days.
         ******************************************************************************************/
        int           InDays()       const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    AWXU_NANOS_PER_DAY;
            #endif
            #if defined( _MSC_VER )
                return    (int) std::round( ticks /    mscTicksPerDay );
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to hours.
         * @return  The internal value converted to hours.
         ******************************************************************************************/
        int           InHours()      const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    AWXU_NANOS_PER_HOUR;
            #endif
            #if defined( _MSC_VER )
                return    (int) std::round( ticks /    mscTicksPerHour );
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to minutes.
         * @return  The internal value converted to minutes.
         ******************************************************************************************/
        int           InMinutes()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    AWXU_NANOS_PER_MINUTE;
            #endif
            #if defined( _MSC_VER )
                return    (int) std::round( ticks /    mscTicksPerMinute );
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to seconds.
         * @return  The internal value converted to seconds.
         ******************************************************************************************/
        int           InSeconds()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    AWXU_NANOS_PER_SECOND;
            #endif
            #if defined( _MSC_VER )
                return    (int) std::round( ticks /    mscTicksPerSecond      );
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to milliseconds.
         * @return  The internal value converted to milliseconds.
         ******************************************************************************************/
        int_fast64_t  InMillis()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    AWXU_NANOS_PER_MILLISECOND;
            #endif
            #if defined( _MSC_VER )
                return    (int_fast64_t) std::round( ticks /    mscTicksPerMillisecond );
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to microseconds.
         * @return  The internal value converted to microseconds.
         ******************************************************************************************/
        int_fast64_t  InMicros()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    AWXU_NANOS_PER_MICROSECOND;
            #endif
            #if defined( _MSC_VER )
                return    (int_fast64_t) std::round( ticks /    mscTicksPerMicrosecond );
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to nanoseconds.
         * @return  The internal value converted to nanoseconds.
         ******************************************************************************************/
        int_fast64_t  InNanos ()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks;
            #endif
            #if defined( _MSC_VER )
                return    (int_fast64_t) std::round( ticks /    mscTicksPerNanosecond );
            #endif

        }

        /** ****************************************************************************************
         *  Returns 1 divided by internal value in seconds, hence the number of Hertz that this
         *  object represents when interpreted as a time span.
         *
         * @param nDigitsPrecision    Number of digits that the return value will be rounded to.
         *                            Defaults to -1 which means no rounding.
         * @return     double value representing the frequency in hertz.
         ******************************************************************************************/
        AWXU_API
        double       InHertz( int nDigitsPrecision= -1 ) const;

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param days  The time span to set in days.
         ******************************************************************************************/
        void         FromDays   ( int           days )
        {
            #if defined (__GLIBCXX__)
                ticks=                   days *    AWXU_NANOS_PER_DAY   ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  days *    mscTicksPerDay         );
            #endif
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param hours  The time span to set in hours.
         ******************************************************************************************/
        void         FromHours  ( int           hours )
        {
            #if defined (__GLIBCXX__)
                ticks=                   hours *    AWXU_NANOS_PER_HOUR   ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  hours *    mscTicksPerHour         );
            #endif
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param mins  The time span to set in minutes.
         ******************************************************************************************/
        void         FromMinutes( int           mins )
        {
            #if defined (__GLIBCXX__)
                ticks=                   mins *    AWXU_NANOS_PER_MINUTE   ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  mins *    mscTicksPerMinute         );
            #endif
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param secs  The time span to set in seconds.
         ******************************************************************************************/
        void         FromSeconds( int           secs )
        {
            #if defined (__GLIBCXX__)
                ticks=                   secs *    AWXU_NANOS_PER_SECOND   ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  secs *    mscTicksPerSecond            );
            #endif
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in milliseconds.
         * @param millis    The time span to set in milliseconds.
         ******************************************************************************************/
        void         FromMillis ( int_fast64_t  millis )
        {
            #if defined (__GLIBCXX__)
                ticks=                   millis *    AWXU_NANOS_PER_MILLISECOND   ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  millis *    mscTicksPerMillisecond         );
            #endif
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in microseconds.
         * @param micros  The time span to set in microseconds.
         ******************************************************************************************/
        void         FromMicros ( int_fast64_t  micros )
        {
            #if defined (__GLIBCXX__)
                ticks=                   micros *    AWXU_NANOS_PER_MICROSECOND ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  micros *    mscTicksPerMicrosecond       );
            #endif
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in nanoseconds.
         * @param nanos  The time span to set in nanoseconds.
         ******************************************************************************************/
        void         FromNanos  ( int_fast64_t  nanos )
        {
            #if defined (__GLIBCXX__)
                ticks=                   nanos *    AWXU_NANOS_PER_NANOSECOND   ;
            #endif
            #if defined( _MSC_VER )
                ticks= (int_fast64_t) (  nanos *    mscTicksPerNanosecond         );
            #endif
        }

        /** ****************************************************************************************
         * Formats the point in time represented by this instance into an AString using the given
         * pattern. The token definitions of the format string is equal to those found in
         * \ref TicksCalendarTime.
         *
         *  @param format The format pattern string.
         *  @returns An AString with the formatted date.
         ******************************************************************************************/
        AWXU_API AString    Format( const char* format );


    // #############################################################################################
    // Conversion to time platform/language specific values
    // #############################################################################################
        #if defined (__GLIBCXX__)
            /** ************************************************************************************
             *  Converts the internal value into seconds since January 1, 1970, 00:00:00 GMT.
             *  The conversion is dependent on time zone and system clock setting of the host.
             *  \note  GLib specific.
             * @return Seconds in the epoch.
             **************************************************************************************/
            AWXU_API  time_t  InEpochSeconds()    const;

            /** ************************************************************************************
             *  Sets the internal value by converting the given seconds since January 1,
             *  1970, 00:00:00 GMT. The conversion is dependent on time zone and system clock
             *  setting of the host.
             *  \note  GLib specific.
             * @param epochSeconds The milliseconds in the epoch to convert.
             **************************************************************************************/
            AWXU_API  void    SetFromEpochSeconds ( time_t epochSeconds );
        #endif // no else here (doxygen)!

        #if defined (_MSC_VER)
            /** ************************************************************************************
             *  Converts the internal value into windows specific file time, a 64-bit value that
             *  represents the number of 100 nanosecond intervals that have elapsed since
             *  12:00 A.M. January 1, 1601 UTC. The conversion is dependent on time zone and system
             *  clock setting of the host.
             *  \note  Microsoft Windows specific.
             * @param result Pointer to a FILETIME struct to store the result in.
             **************************************************************************************/
            AWXU_API  void    InFileTime( LPFILETIME result ) const;

            /** ************************************************************************************
             *  Converts the internal value into windows specific file time, a 64-bit value that
             *  represents the number of 100 nanosecond intervals that have elapsed since
             *  12:00 A.M. January 1, 1601 UTC. The conversion is dependent on time zone and system
             *  clock setting of the host.
             *  \note  Microsoft Windows specific.
             * @param result A reference to a LARGE_INTEGER struct to store the result in.
             **************************************************************************************/
            AWXU_API  void    InFileTime( ULARGE_INTEGER& result ) const;

            /** ************************************************************************************
             *  Sets the internal value to represent the point in time provided as "file time".
             *  File time is a 64-bit value that represents the number of 100 nanosecond intervals
             *  that have elapsed since 12:00 A.M. January 1, 1601 UTC.
             *  The conversion is dependent on time zone and system clock setting of the host.
             *  \note  Microsoft Windows specific.
             * @param fileTime The file time to set.
             **************************************************************************************/
            AWXU_API  void    SetFromFileTime( const LPFILETIME fileTime );

            /** ************************************************************************************
             *  Sets the internal value to represent the point in time provided as "file time".
             *  File time is a 64-bit value that represents the number of 100 nanosecond intervals
             *  that have elapsed since 12:00 A.M. January 1, 1601 UTC.
             *  The conversion is dependent on time zone and system clock setting of the host.
             *  \note  Microsoft Windows specific.
             * @param fileTime The file time to set.
             **************************************************************************************/
            AWXU_API  void    SetFromFileTime( const ULARGE_INTEGER& fileTime );

            /** ************************************************************************************
             *  Converts the internal value into windows specific system time struct.
             *  The conversion is dependent on time zone and system clock setting of the host.
             *  \note  Microsoft Windows specific.
             * @param result Pointer to a SYSTEMTIME struct to store the result in.
             * @param toUTC  If true, the time returned will be UTC time, local time otherwise.
             * @return Seconds in the epoch.
             **************************************************************************************/
            AWXU_API  void    InSystemTime( LPSYSTEMTIME result, bool toUTC= false ) const;

            /** ************************************************************************************
             *  Sets the internal value to represent the point in time provided as windows system
             *  time. The conversion is dependent on time zone and system clock setting of the host.
             *  \note  Microsoft Windows specific.
             * @param systemTime Pointer to a SYSTEMTIME struct that holds the system time to set.
             * @param fromUTC   If true, the time provided is interpreted as UTC time, local time
             *                  otherwise.
             **************************************************************************************/
            AWXU_API  void    SetFromSystemTime( const SYSTEMTIME& systemTime, bool fromUTC= false );
        #endif


};


/** ************************************************************************************************
 *  This class encapsulates a system dependent time value (Ticks) and provides some basic
 *  interface for measuring time spans, including multiple samples and their average.
 **************************************************************************************************/
class TickWatch
{
    // #############################################################################################
    // Internal fields
    // #############################################################################################
    protected:

        ///  The current start time.
        Ticks        startTime;

        ///  The number of samples performed.
        int          cntSamples                                                                 =0;

        ///  The sum of the samples times.
        Ticks        sum;


    // #############################################################################################
    // Constructors
    // #############################################################################################
    public:
        /** ****************************************************************************************
         *  Creates a started StopWatch.
         ******************************************************************************************/
        TickWatch    ()
        : startTime(),     sum(0)        {}

        /** ****************************************************************************************
         * Creates a StopWatch as a copy of another StopWatch.
         * @param copy  The instance to copy value from.
         ******************************************************************************************/
        TickWatch    ( const TickWatch& copy )
        : startTime(0), sum(0)
        {
            startTime    .Set( copy.startTime );
            sum          .Set( copy.sum );
            cntSamples=  copy.cntSamples;
        }

    // #############################################################################################
    // Interface Get/Set/Reset
    // #############################################################################################
    public:
        /** ****************************************************************************************
         * Returns the internally stored start time
         * @return    The start time
         ******************************************************************************************/
        const Ticks&    GetStartTime()    const               { return startTime;                  }

        /** ****************************************************************************************
         * Sets the start time to now.
         * This affects both, the reference value for the calculation of this StopWatch's age in
         * subsequent calls, as well as subsequent sample time spans.
         ******************************************************************************************/
        void            Start()                               { startTime.Set();                   }

        /** ****************************************************************************************
         * Sets the start time to the given value.
         * @param startTime  A new start time for the stopwatch
         ******************************************************************************************/
        void            SetStartTime( const Ticks startTime ) { this->startTime.Set( startTime );  }


        /** ****************************************************************************************
         *  Sets the internal value to current system time and clears existing sum and quantity of
         *  samples.
         ******************************************************************************************/
        void            Reset()                          { sum.Set( 0L ); cntSamples= 0;  Start(); }


    // #############################################################################################
    // Interface to Measurement
    // #############################################################################################

        /** ****************************************************************************************
         *  Returns the time span between the current system time and the internal start value.
         *  In addition this value is added to the sum of sample times and the sample counter is
         *  increased by one. Lastly the internal reference value is set to now. Therefore, a
         *  subsequent call to this function would measure the time span from this call to this
         *  subsequent call (if the internal start time value was not set differently meanwhile).
         *
         * @return The time difference between the current system time and the internal
         *         reference value.
         ******************************************************************************************/
        const Ticks    Sample    ()
        {
            cntSamples++;
            int_fast64_t st=    startTime.Raw();
            startTime.Set();
            int_fast64_t diff=  startTime.Raw() - st;

            Ticks sample( diff );
            sum.Add( diff );

            return sample;
        }

        /** ****************************************************************************************
         *  Returns the number of calls to #Sample since this instance was created or #Reset was invoked.
         * @return    The number of samples.
         ******************************************************************************************/
        int      GetSampleCnt()             { return cntSamples; }

        /** ****************************************************************************************
         *  Returns the cumulated time of all samples taken since this instance was created or cleared.
         *  Note: the object returned will be reused in subsequent calls to this method. Hence, previously
         *  returned values will be overwritten!
         *
         * @return  The cumulated measured time.
         ******************************************************************************************/
        Ticks    GetCumulated()            { return sum; }

        /** ****************************************************************************************
         *  Returns the average time of all samples since this instance was created or reset.
         *  If no measurement was performed, the result value will be set to 0 ticks.
         *
         * @return  The cumulated measured time.
         ******************************************************************************************/
        Ticks    GetAverage()
        {
            return Ticks ( cntSamples== 0 ? 0L     :    ( sum.Raw() / cntSamples) );
        }
};


/** ************************************************************************************************
 *  This class splits a given Ticks object (representing a time span) into the amount of days,
 *  hours, minutes, seconds and so on. Consequently, it takes a Ticks object as a parameter.
 *  This class can be seen as an extension to the Ticks class which provides methods to get
 *  the total number of these values. In addition, the reverse calculation can be performed,
 *  which means, the field values can be set and the corresponding time span in ticks
 *  received.
 **************************************************************************************************/
class TicksSpan
{
    public:
        /// The number of days within the time span
        int                     Days;

        /// The number of hours (not the total, hence 0-23) within the time span
        int                     Hours;

        /// The number of minutes (not the total, hence 0-59) within the time span
        int                     Minutes;

        /// The number of seconds (not the total, hence 0-59) within the time span
        int                     Seconds;

        /// The number of milliseconds (not the total, hence 0-999) within the time span
        int                     Milliseconds;

        /// The number of microseconds (not the total, hence 0-999) within the time span
        int                     Microseconds;

        /// The number of nanoseconds (not the total, hence 0-999) within the time span
        int                     Nanoseconds;

    /** ********************************************************************************************
     *  Constructs the object to represent a time span of 0. (Sets all public fields to 0.)
     **********************************************************************************************/
    TicksSpan()                                             { Clear(); }

    /** ********************************************************************************************
     *  Constructs the object using the given Tick objects ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks The Ticks object to use for setting the public fields
     **********************************************************************************************/
    TicksSpan( const Ticks& ticks )                         { Set( ticks.Raw() ); }

    /** ********************************************************************************************
     *  Constructs the object using the given ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks The value in ticks to use for setting the public fields
     **********************************************************************************************/
    TicksSpan( int_fast64_t ticks )                         { Set(ticks); }

    /** ********************************************************************************************
     *  Constructs the object using the two Tick objects that mark the start and end points in time
     *  of the span.
     *  @param first   The Ticks object that marks the beginning of the time span
     *  @param second  The Ticks object that marks the end of the time span
     **********************************************************************************************/
    TicksSpan( const Ticks& first,  const Ticks& second )   { Set( first.Raw() - second.Raw() ); }

    /** ********************************************************************************************
     *  Sets the public fields to represent the given Tick objects ticks value.
     *  The state of the object will hereafter be the same as it was when constructed with the same
     *  parameter.
     *  @param ticks The Ticks object to use for setting the public fields
     **********************************************************************************************/
    void                        Set( const Ticks& ticks )   { Set( ticks.Raw() ); }

    /** ********************************************************************************************
     *  Sets the public fields to represent the given ticks value.
     *  The state of the object will hereafter be the same as it was when constructed with the same
     *  parameter.
     *  @param ticks The value in ticks to use for setting the public fields
     **********************************************************************************************/
    AWXU_API void         Set( int_fast64_t ticks );

    /** ********************************************************************************************
     *  Takes the current values of the public fields and calculates a time span value in ticks.
     *  Such value can be used with class Ticks, e.g. to add or subtract time spans.
     *  @returns The time span represented by the public fields of this class.
     **********************************************************************************************/
    AWXU_API int_fast64_t Get();

    /** ********************************************************************************************
     *  Sets all public values to 0.
     **********************************************************************************************/
    AWXU_API void         Clear();
};


/** ************************************************************************************************
 *  This class evaluates the calendar date and time from given Ticks object (representing a point
 *  in time). Consequently, it takes a Ticks object as a parameter.
 *  This class can be seen as an extension to the Ticks class which provides methods to get
 *  the total number of these values. In addition, the reverse calculation can be performed,
 *  which means, the field values can be set and the corresponding point in time as ticks
 *  received.<br>
 *  Finally, a method to format the date and time into string is available.
 *  This class is using system specific calendar methods and relies on the locale and time zone
 *  settings of the machine.
 **************************************************************************************************/
class TicksCalendarTime
{
    protected:

    public:
        /// The calendar year
        int                     Year;

        /// The calendar month
        int                     Month;

        /// The calendar day
        int                     Day;

        /// The calendar day of week (this is ignored, when converted back to a time value)
        int                     DayOfWeek;

        /// The calendar hour
        int                     Hour;

        /// The calendar minute
        int                     Minute;

        /// The calendar second
        int                     Second;

        /// The calendar millisecond
        int                     Millisecond;

    /** ********************************************************************************************
     * Constructs the object to represent a time span of 0. (Sets all public fields to 0.)
     **********************************************************************************************/
     TicksCalendarTime()                                            { Clear(); }

    /** ********************************************************************************************
     *  Constructs the object using the given Tick objects ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks The Ticks object to use for setting the public fields
     *  @param toUTC If true, UTC time is set, local time otherwise.
     **********************************************************************************************/
     TicksCalendarTime( const Ticks& ticks, bool toUTC= false )     { Set( ticks.Raw(), toUTC ); }

    /** ********************************************************************************************
     *     Constructs the object using the given ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks The value in ticks to use for setting the public fields
     *  @param toUTC If true, UTC time is set, local time otherwise.
     **********************************************************************************************/
     TicksCalendarTime( int_fast64_t ticks, bool toUTC= false )     { Set(ticks, toUTC); }


    /** ********************************************************************************************
     *  Sets the public fields to represent the given Tick objects time value.
     *  @param ticks The Ticks object to use for setting the public fields
     *  @param toUTC If true, UTC time is set, local time otherwise.
     **********************************************************************************************/
    void                  Set( const Ticks& ticks, bool toUTC= false ) { Set( ticks.Raw(), toUTC );}

    /** ********************************************************************************************
     *  Sets the public fields to represent the given ticks value.
     *  @param ticks The value in ticks to use for setting the public fields
     *  @param toUTC If true, UTC time is set, local time otherwise.
     **********************************************************************************************/
    AWXU_API void         Set( int_fast64_t ticks, bool toUTC= false  );

    /** ********************************************************************************************
     *  Takes the current values of the public fields and calculates a time span value in ticks.
     *  Such value can be used with class Ticks, e.g. to add or subtract time spans.
     *  @param isUTC Has to be set to true, if values stored in this object represent a UTC time. False
     *               if they represent a local time.
     *  @returns The time span represented by the public fields of this class.
     **********************************************************************************************/
    AWXU_API int_fast64_t Get( bool isUTC= false );

    /** ********************************************************************************************
     *     Sets all public values to 0.
     **********************************************************************************************/
    AWXU_API void         Clear();

    /** ********************************************************************************************
     * Formats the date using a given pattern string. Within the pattern string, different symbols
     * are interpreted as tokens. The format is compatible with C# time format strings, as well as
     * with class SimpleDateFormat of the Java APIs.<br>
     * Strings within the format text that should not be interpreted as tokens may be surrounded
     * by single quotes. Two single quotes in a row, will be replaced by one single quote.<br>
     * The following tokens are supported:<br>
     * <TABLE>
     *   <TR> <TD>y       </TD>      <TD>The year with as many digits as it has (for current dates this is 4).</TD> </TR>
     *   <TR> <TD>yy      </TD>      <TD>The year, truncated to 2 digits (modulo 100).</TD> </TR>
     *   <TR> <TD>yyy...y </TD>      <TD>The year with a minimum amount of digits as amount of y-characters given.</TD> </TR>
     *   <TR> <TD>M       </TD>      <TD>The month as numbers from 1..12.</TD> </TR>
     *   <TR> <TD>MM      </TD>      <TD>The month as numbers from 01..12.</TD> </TR>
     *   <TR> <TD>MMM     </TD>      <TD>The month as abbreviated, 3-digit word in English language.</TD> </TR>
     *   <TR> <TD>MMMM    </TD>      <TD>The month as word in English language.</TD> </TR>
     *   <TR> <TD>d       </TD>      <TD>The day as numbers from 1..31.</TD> </TR>
     *   <TR> <TD>dd      </TD>      <TD>The day as numbers from 01..31.</TD> </TR>
     *   <TR> <TD>ddd     </TD>      <TD>The day as abbreviated, 3-digit word in English language.</TD> </TR>
     *   <TR> <TD>dddd    </TD>      <TD>The day as word in English language.</TD> </TR>
     *   <TR> <TD>H       </TD>      <TD>The hour as numbers from 0..23.</TD> </TR>
     *   <TR> <TD>HH      </TD>      <TD>The hour as numbers from 01..23.</TD> </TR>
     *   <TR> <TD>K       </TD>      <TD>The hour as numbers from 0..11 am/pm.</TD> </TR>
     *   <TR> <TD>KK      </TD>      <TD>The hour as numbers from 01..11 am/pm.</TD> </TR>
     *   <TR> <TD>m       </TD>      <TD>The minute as numbers from 0..59.</TD> </TR>
     *   <TR> <TD>mm      </TD>      <TD>The minute as numbers from 01..59.</TD> </TR>
     *   <TR> <TD>s       </TD>      <TD>The second as numbers from 0..59.</TD> </TR>
     *   <TR> <TD>ss      </TD>      <TD>The second as numbers from 00..59.</TD> </TR>
     * </TABLE>
     *  @param format The format pattern string.
     *  @param dest   A reference to an AString that gets the result of the format processing
     *                appended.
     **********************************************************************************************/
    AWXU_API void         Format(const char* format, AString& dest);
};


}} // namespace aworx::util

#endif // HPP_AWORX_UTIL_StopWatch
