// #################################################################################################
//  AWorx Util - Classes we need
//
//  (c) 2013 A-Worx GmbH,  Published under the The MIT License (Open Source License, see LICENSE.txt)
//  
//  Classes:	Ticker, TickTime
//  File:		Ticker.cs												Namespace:  com.aworx.util
// #################################################################################################

using System;
using System.Diagnostics;
using System.Globalization;

namespace com.aworx.util  {

/** ***********************************************************************************************
 * <summary>
 *  This class provides a pure static interface into system dependent time values (usually 64 bit
 *  tick counters) that we call *ticks*. Ticks and this class allow to store and calculate time
 *  values in an efficient and highly accurate way.
 *  
 *  Ticks generated by this class can be added and subtracted:
 *  
 *  - Subtraction generates a *span value in ticks*
 *  - *Span value in ticks* can be added to themselves safely
 *  - *Span value in ticks* can be added to ticks safely  
 *  
 *  Conversion functions to milliseconds, microseconds and nanoseconds accept ticks and span
 *  values in ticks in the same manner.
 *  
 *  As Ticks are system dependent, they should not be stored in system independent data files or
 *  otherwise shared between systems. In general such values should only be used by methods of
 *  this class and class *TickTime* (See class #com.aworx.util.TickTime for a non-static
 *  implementation of this interface plus some extra candy).
 *  
 *  The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 *  deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 * </summary>
 **************************************************************************************************/
public static class Ticker
{
	/** ***********************************************************************************************
	 * <summary>
	 *  The Frequency of the internal tick timer. The Frequency gives you an indication of the
	 *  accuracy of the time (At least if the underlying system library is reasonably well working in
	 *  this respect). And this is the reason why it is published with this field. This value does
	 *  not necessarily correspond to the number of ticks per second that you get from this classes
	 *  Now method.
	 * </summary>
	 **************************************************************************************************/
	public	static readonly		long	InternalFrequency;

	// #################################################################################################
	// Private fields and static constructor
	// #################################################################################################
	private static readonly long		creationTimeTicks;
	private static readonly long		dateTimeTicks19700101;

	private static readonly Stopwatch	creationTimeStopWatch;
	private static readonly double		convSWToDT;

	static Ticker()
	{
		// This static constructor is called once at the beginning of the lifecycle of this library.
		// We use it to create 
		//  a) a reference counter in DateTime ticks initialized to now and
		//  b) a Stopwatch object that we are starting.
		// Within the Now() function of this class, we are then converting the Stopwatch measurement
		// and add it to the initial timer. 
		// So, why are we doing this instead of just using DateTime.Now in method Now()?
		// The answer is: DateTime.Now is very inefficient, because it creates a heap object that is
		// then disposed right away. This version of Now() is around 15 times faster on the compiling platform.

		creationTimeTicks=		DateTime.Now.Ticks;

		// for the conversion in "millis since the epoch" we need the reference DayTime ticks
		dateTimeTicks19700101= (new DateTime( 1970, 1, 1, 0, 0, 0 )).Ticks;

		creationTimeStopWatch=	new Stopwatch();
		creationTimeStopWatch.Start();

		InternalFrequency=		Stopwatch.Frequency;

		// conversion factor StopWatch to DateTime is:
		//    10 million nanoseconds (the DateTime ticks per second) / by frequency of stopwatch
		convSWToDT=	10000000d / (double) InternalFrequency;
	}

	// #################################################################################################
	// Creation and modification of ticker values
 	// #################################################################################################
 	
	/** ***********************************************************************************************
	 * <summary>
	 * 	Gets the actual system dependent time in ticks. 
	 * 	</summary>
	 * <returns> The time now in ticks. </returns>
	 **************************************************************************************************/
	public static	long	Now()							
	{ 
		// same as DateTime.Now.Ticks, but much faster
		#if !ALOX_WP71
			return	 creationTimeTicks +  (long)  ( ((double) creationTimeStopWatch.ElapsedTicks) * convSWToDT ) ; 
		#else
			return DateTime.Now.Ticks;
		#endif
	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Adds the given time interval to the given ticker time (or span value in ticks) and returns
	 *  the result. Parameters are allowed to be negative to subtract such time intervals.
	 *  
	 *  For adding milliseconds or microseconds, use "yourTicks+= Ticker.FromMills()" respectively "
	 *  yourTicks+= Ticker.FromMicros()".
	 * </summary>
	 * <param name="ticks">  	Ticker time (or time spans in ticks) to add to. </param>
	 * <param name="days">   	The days to add (subtract if negative). </param>
	 * <param name="hours">  	The hours to add (subtract if negative). </param>
	 * <param name="minutes">	The minutes to add (subtract if negative). </param>
	 * <param name="seconds">	The seconds to add (subtract if negative). </param>
	 * <returns>	The modified ticker time. </returns>
	 **************************************************************************************************/
	public static	long	Add( long ticks, int days, int hours, int minutes, int seconds )							
	{ 
		long secsToAdd= seconds;
		long mul= 60; secsToAdd+= ( minutes	* mul );
		mul*=	  60; secsToAdd+= ( hours	* mul );
		mul*=     24; secsToAdd+= ( days	* mul );

		return		ticks + FromMillis(	1000L * secsToAdd );
	}
		

	// #################################################################################################
	// Conversion to/from time values (milliseconds, microseconds, seconds)
	// #################################################################################################
	
	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given system dependent ticks (or time spans in ticks) to milliseconds.
	 * </summary>
	 * <param name="ticks">	Ticker time (or time spans in ticks) to convert. </param>
	 * <returns>	Given ticks (span) value in milliseconds. </returns>
	 **************************************************************************************************/
	public static	long		ToMillis	( long ticks )	{ return	ticks / 10000L;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given system dependent ticks (or time spans in ticks) to microseconds.
	 * </summary>
	 * <param name="ticks">	Ticker time (or time spans in ticks) to convert. </param>
	 * <returns>	Given ticks (span) value in microseconds. </returns>
	 **************************************************************************************************/
	public static	long		ToMicros	( long ticks )	{ return	ticks /    10L;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given system dependent ticks (or time spans in ticks) to nanoseconds.
	 * </summary>
	 * <param name="ticks">	Ticker time (or time spans in ticks) to convert. </param>
	 * <returns>	Given ticks (span) value in nanoseconds. </returns>
	 **************************************************************************************************/
	public static	long		ToNanos		 ( long ticks )	{ return	ticks *   100L;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given millisecond value to a system dependent time span in ticks.
	 * </summary>
	 * <param name="millis">	Milliseconds to convert. </param>
	 * <returns>	Given ticks (span) value in milliseconds. </returns>
	 **************************************************************************************************/
	public static	long		FromMillis	( long millis )	{ return	millis * 10000L;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given microsecond value to a system dependent time span in ticks.
	 * </summary>
	 * <param name="micros">	Microseconds to convert. </param>
	 * <returns>	Given ticks (span) value in microseconds. </returns>
	 **************************************************************************************************/
	public static	long		FromMicros	( long micros )	{ return	micros *    10L;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given nanosecond value to a system dependent time span in ticks.
	 * </summary>
	 * <param name="nanos">	Nanoseconds to convert. </param>
	 * <returns>	Given ticks (span) value in nanoseconds. </returns>
	 **************************************************************************************************/
	public static	long		FromNanos	( long nanos )	{ return	nanos /   100L;	}

	// #################################################################################################
	// Conversion to time platform/language specific objects
	// #################################################################################################

	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given given system dependent ticker time into milliseconds since 
	 *  January 1, 1970, 00:00:00 GMT
	 * </summary>
	 * <param name="ticks">		Ticker time to convert. </param>
	 * <returns> Milliseconds in the epoch. </returns>
	 **************************************************************************************************/
	public static 	long	ToEpochMillis	 ( long ticks )	
	{
		return		ToMillis (ticks - dateTimeTicks19700101 );
	}
	
	/** ***********************************************************************************************
	 * <summary>
	 *  Converts the given milliseconds since January 1, 1970, 00:00:00 GMT into ticker time.
	 * </summary>
	 * <param name="epochMillis">The milliseconds in the epoch to convert. </param>
	 * <returns> Ticker time. </returns>
	 **************************************************************************************************/
	public static 	long	FromEpochMillis ( long epochMillis )	
	{
		return	dateTimeTicks19700101 + FromMillis( epochMillis)  ;
	}
	

	/** ***********************************************************************************************
	 * <summary>
	 *  Return the given ticker time in DateTime ticks .
	 * </summary>
	 * <param name="ticks">	The system dependent ticks reference value. </param>
	 * <returns> A corresponding date object. </returns>
	 **************************************************************************************************/
	public static	long	ToDotNetDateTimeTicks( long ticks )	{ return	 ticks;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Return the given DateTime ticks in ticker time ticks.
	 * </summary>
	 * <param name="dateTime">A .Net DateTime instance to read and convert the ticks from. </param>
	 * <returns> The ticks in ticker time. </returns>
	 **************************************************************************************************/
	public static	long	FromDotNetDateTime( DateTime dateTime )	{ return	 dateTime.Ticks;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Create a DateTime object from the given ticks.
	 * </summary>
	 * <param name="ticks">	The system dependent ticks reference value. </param>
	 * <returns> A corresponding date object. </returns>
	 **************************************************************************************************/
	public static	DateTime ToDotNetDateTime( long ticks )		{ return	 new DateTime (ticks);	}

}


/** ***********************************************************************************************
 * <summary>	
 * 	This class encapsulates a system dependent time value (ticks) and uses the static class Ticker to
 * 	get and manipulate it.  See class Ticker to learn about system dependent time values (ticks)
 * 	and their usage.
 * 	
 *  The interface does not provide explicit nanosecond versions the methods. However, you can work with
 *  nanoseconds, by using the system dependent ticks versions of the interface functions use class 
 *  Ticker to convert to nanoseconds.
 * 	
 *  In addition this class provides an interface to do a series of time measurements, getting the sum 
 *  and average values (similar to stopwatch or time keeper).
 * </summary>
 **************************************************************************************************/
public struct TickTime
{
	// #################################################################################################
	// Internal fields
	// #################################################################################################

	/// <summary>	The value. </summary>
	private			long				ticks;
		
	/// <summary> The sum of the measurements. </summary>
	private			long				sum;

	/// <summary> The number of measurements performed. </summary>
	private			int					cntMeasures; 
		

	// #################################################################################################
	// Constructors
	// #################################################################################################

	/** ***********************************************************************************************
	 * <summary> 	Creates a TickTime from a given time value in ticks. </summary>
	 * <param name="otherTicks">	The value to copy into this. </param>
	 **************************************************************************************************/
	public 		 	TickTime	( long otherTicks )			
	{
		ticks=			otherTicks;			
		sum=			0L; 
		cntMeasures=	0;	
	}

	/** ***********************************************************************************************
	 * <summary> 	Creates a TickTime as a copy of another TickTime. </summary>
	 * <param name="copy">	The instance to copy value from. </param>
	 **************************************************************************************************/
	public 		 	TickTime	( TickTime copy )		
	{
		ticks=			copy.ticks; 
		sum=			copy.sum; 
		cntMeasures=	copy.cntMeasures;	
	}

	// #################################################################################################
	// Conversion to platform specific objects
	// #################################################################################################
	public override String		ToString()
	{
		return ( new DateTime( Ticker.ToDotNetDateTimeTicks( ticks ) ) ).ToString( CultureInfo.InvariantCulture );
	}

	// #################################################################################################
	// Interface Get/Set/Clear
	// #################################################################################################

	/** ***********************************************************************************************
	 * <summary> Returns the internally stored value (in ticks). </summary>
	 **************************************************************************************************/
	public	long	Get()						{ return ticks;					}

	/** ***********************************************************************************************
	 * <summary> Sets the internal value to the given value in ticks. </summary>
	 **************************************************************************************************/
	public	void	SetTo( long value )			{ this.ticks= value;			}

	/** ***********************************************************************************************
	 * <summary>
	 *  Sets the internal value to current system time. This affects reference value for the subsequent
	 *  measurements.
	 * </summary>
	 **************************************************************************************************/
	public	void	SetToNow()					{ ticks= Ticker.Now();		}

	/** ***********************************************************************************************
	 * <summary>
	 *  Sets the internal value to current system time and clears existing sum and quantity of
	 *  measurements.
	 * </summary>
	 **************************************************************************************************/
	public	 void	Clear()						{ SetToNow(); sum= 0L; cntMeasures= 0;  }
		

	// #################################################################################################
	// Interface Since
	// #################################################################################################

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the time difference between the current system time and the time value represented
	 *  by this instance in (system dependent) ticks.
	 *  If internal value represents a historic point in time, the result is positive.
	 * </summary>
	 **************************************************************************************************/
	public 	long	Age()						{ return Ticker.Now() - ticks;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the time difference between the current system time and the time value represented
	 *  by this instance in milliseconds.
	 *  If internal value represents a historic point in time, the result is positive.
	 * </summary>
	 **************************************************************************************************/
	public 	long	AgeInMillis()				{ return Ticker.ToMillis  ( Ticker.Now() - ticks );	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the time difference between the current system time and the time value represented
	 *  by this instance in microseconds.
	 *  If internal value represents a historic point in time, the result is positive.
	 * </summary>
	 **************************************************************************************************/
	public 	long	AgeInMicros()				{ return Ticker.ToMicros( Ticker.Now() - ticks );	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the time span between the given TickTime and this instances value in (system
	 *  dependent) ticks. If the given TickTime represents a later point in time than the point in
	 *  time this instance represents, the result is positive.
	 * </summary>
	 * <param name="newerTime">	The value to compare this instance with. </param>
	 * <returns> The time difference in ticks.</returns>
	 **************************************************************************************************/
	public 	long	Span( TickTime newerTime )			{ return				 newerTime.ticks - ticks;	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the time span between the given TickTime and this instances value in milliseconds.
	 *  If the given TickTime represents a later point in time than the point in
	 *  time this instance represents, the result is positive.
	 * </summary>
	 * <param name="newerTime">	The value to compare this instance with. </param>
	 * <returns> The time difference in milliseconds.</returns>
	 **************************************************************************************************/
	public 	long	SpanInMillis ( TickTime newerTime )	{ return Ticker.ToMillis( newerTime.ticks - ticks );	}

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the time span between the given TickTime and this instances value in microseconds.
	 *  If the given TickTime represents a later point in time than the point in
	 *  time this instance represents, the result is positive.
	 * </summary>
	 * <param name="newerTime">	The value to compare this instance with. </param>
	 * <returns> The time difference in microseconds.</returns>
	 **************************************************************************************************/
	public 	long	SpanInMicros ( TickTime newerTime )	{ return  Ticker.ToMicros( newerTime.ticks - ticks );	}


	// #################################################################################################
	// Interface to Measurement
	// #################################################################################################

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns a (system dependent) time difference between the current system time and the internal
	 *  reference value. In addition this value is added to the sum of measurement time and the
	 *  measurement counter is increased by one. Lastly the internal reference value is set to
	 *  now. Therefore, a subsequent call to this function would measure the time span from this
	 *  call to this subsequent call (if the internal reference value was not set differently meanwhile). 
	 * </summary>
	 * <returns>
	 *  Returns the time difference between the current system time and the the internal reference value
	 *  in ticks.
	 * </returns>
	 **************************************************************************************************/
	public		 long	Measure	()
	{
		cntMeasures++; 
		long diff= ( Ticker.Now() - ticks ); 
		sum+= diff; 
		return diff;
	}

	/** ***********************************************************************************************
	 * <summary>Returns the number of calls to Measure since object was created or Clear() was invoked. </summary>
	 * <returns>The number of calls to Measure since object was created or or Clear() was invoked.</returns>
	 **************************************************************************************************/
	public		 int	GetMeasureCnt()			{ return cntMeasures; }

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the cumulated time of all measurements since object was created or cleared in
	 *  (system dependent) ticks. 
	 * </summary>
	 * <returns>  The cumulated measured ticks. </returns>
	 **************************************************************************************************/
	public		long	GetCumulatedTicks()		{ return sum; }

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the average time of all measurements since object was created or cleared in
	 *  (system dependent) ticks. If no measurement was performed, this method returns 0.
	 * </summary>
	 * <returns>	The average measured ticks. </returns>
	 **************************************************************************************************/
	public		long	GetAverageTicks()		{ return  cntMeasures== 0 ? 0L	 :	(sum / cntMeasures); }

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns the average time of all measurements since object was created or cleared in
	 *  milliseconds. If no measurement was performed, this method returns 0.
	 * </summary>
	 * <returns>	The average measured milliseconds. </returns>
	 **************************************************************************************************/
	public		long	GetAverageMillis()		{ return  Ticker.ToMillis( GetAverageTicks() ); }

	/** ***********************************************************************************************
	 * <summary>
	 *  Returns  one divided by the average time, hence the number of Hertz that correspond to
	 *  the average measured time.
	 * </summary>
	 * <returns>	The Hertz value corresponding to the average measured time. </returns>
	 **************************************************************************************************/
	public		double	GetAverageHertz()		{ return  cntMeasures== 0 ? 0d	 :	(1000000000d * cntMeasures / sum); }
	

	// #################################################################################################
	// Conversion to time platform/language specific objects
	// #################################################################################################
	/** ***********************************************************************************************
	 * <summary>
	 *  Creates a .Net DateTime instance from this.
	 * </summary>
	 * <returns> The DateTime object given created. </returns>
	 **************************************************************************************************/
	public 	DateTime	ToDotNetDateTime( )	
	{ 
		return Ticker.ToDotNetDateTime( ticks ); 
	}	
	
	/** ***********************************************************************************************
	 * <summary>
	 *  Sets this instance to the time represented by the given .Net DateTime instance
	 * </summary>
	 * <param name="dotNetDateTime"> The .Net DateTime object object to read the time from.</param>
	 **************************************************************************************************/
	public void			FromDotNetDateTimee	 ( DateTime dotNetDateTime )	
	{
		ticks=	Ticker.FromDotNetDateTime( dotNetDateTime );
	}
	

}


	

} // namespace / EOF
