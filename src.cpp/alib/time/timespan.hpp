// #################################################################################################
//  ALib - A-Worx Utility Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################
/** @file */ // Hello Doxygen

// check for alib.hpp already there but not us
#if !defined (HPP_ALIB)
    #error "include \"alib/alib.hpp\" before including this header"
#endif
#if defined(HPP_COM_ALIB_TEST_INCLUDES) && defined(HPP_ALIB_TIME_TIMESPAN)
    #error "Header already included"
#endif

// then, set include guard
#ifndef HPP_ALIB_TIME_TIMESPAN
//! @cond NO_DOX
#define HPP_ALIB_TIME_TIMESPAN 1
//! @endcond

#if !defined (HPP_ALIB_TIME_LIB)
    #include "alib/time/timelib.hpp"
#endif


namespace aworx { namespace lib { namespace time {
class TimeStamp;

/** ************************************************************************************************
 * This class provides an interface into system dependent timer values (usually 64 bit
 * tick counters) that are called \e "ticks" with \alib.
 * Sibling class \alib{time,TimeStamp} and this class allow to store and calculate time
 * values in an efficient and highly accurate way.
 *
 * Often, objects of this class are generated by the subtraction of \b %TimeStamp values or
 * by using methods \alib{time,TimeStamp::Age} and \alib{time,TimeStamp::Since}.
 *
 * As ticks are system dependent, they should not be stored and loaded in data files or
 * otherwise shared between systems. Even on the same machine, the values may become
 * incompatible (e.g. after a reboot).
 * Also, in general such values should only be used by methods of
 * this class and classes
 * \alib{time,StopWatch},
 * \alib{time,TimeStamp} and
 * \alib{time,CalendarTime}.
 *
 * The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 * deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 **************************************************************************************************/
class TimeSpan
{
    friend class TimeStamp;

    // #############################################################################################
    // protected fields
    // #############################################################################################
    protected:
        /** The internal time value. */
        TimeLib::TRaw                ticks;

    // #############################################################################################
    // Constructors
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Creates a zero time span.
         ******************************************************************************************/
        inline constexpr
        TimeSpan()
        : ticks(0)
        {
        }

        /** ****************************************************************************************
         * Creates a time span of the given raw value.
         * @param initialTicks The value to copy into this.
         ******************************************************************************************/
        inline constexpr
        TimeSpan( TimeLib::TRaw initialTicks )
        : ticks( initialTicks )
        {}

    // #############################################################################################
    // Interface
    // #############################################################################################
    public:
        /** ****************************************************************************************
         * Sets this object's value to the value specified in raw ticks.
         * @param value The number of ticks this object should represent.
         ******************************************************************************************/
        inline
        void         Set( TimeLib::TRaw value )         { this->ticks=    value;           }

        /** ****************************************************************************************
         * Gets the internally stored system dependent time span in raw ticks.
         * @return  The internal value
         ******************************************************************************************/
        inline
        TimeLib::TRaw Raw()                       const { return ticks;                    }

        /** ****************************************************************************************
         * Equal to operator.
         * @param other The time stamp to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator==( const TimeSpan& other )const { return this->ticks == other.ticks;  }


        /** ****************************************************************************************
         * Not equal to operator.
         * @param other The time stamp to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator!=( const TimeSpan& other )const { return this->ticks != other.ticks;  }

        /** ****************************************************************************************
         * Less than operator.
         * @param other The time stamp to compare.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        bool   operator<( const TimeSpan& other ) const { return this->ticks <  other.ticks;  }

        /** ****************************************************************************************
         * Less than or equal to operator.
         * @param other The time stamp to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator<=( const TimeSpan& other ) const{ return this->ticks <=  other.ticks;  }

        /** ****************************************************************************************
         * Greater than operator.
         * @param other The time stamp to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator>( const TimeSpan& other ) const { return this->ticks >  other.ticks;  }

        /** ****************************************************************************************
         * Greater than or equal to operator.
         * @param other The time stamp to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator>=( const TimeSpan& other ) const{ return this->ticks >=  other.ticks;  }

        /** ****************************************************************************************
         * Addition operator.
         * @param rhs The right-hand side time span to add.
         * @return A time span object containing the sum.
         ******************************************************************************************/
        inline
        TimeSpan operator+( const TimeSpan& rhs ) const { return TimeSpan(this->ticks + rhs.ticks);}

        /** ****************************************************************************************
         * Assignment by sum operator.
         * @param other The time span object subtract.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        TimeSpan& operator+=( const TimeSpan& other )   { this->ticks+= other.ticks; return *this; }

        /** ****************************************************************************************
         * Subtraction operator.
         * @param rhs The right-hand side time span object to subtract.
         * @return A time span object containing the sum.
         ******************************************************************************************/
        inline
        TimeSpan operator-( const TimeSpan& rhs )const  { return TimeSpan(this->ticks - rhs.ticks);}

        /** ****************************************************************************************
         * Assignment by difference operator.
         * @param other The time span object subtract.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        TimeSpan& operator-=( const TimeSpan& other )   { this->ticks-= other.ticks; return *this; }

        /** ****************************************************************************************
         * Multiply operator.
         * @param multiplier The multiplier.
         * @return A time span object containing the sum.
         ******************************************************************************************/
        inline
        TimeSpan operator*( double multiplier ) const  { return TimeSpan(static_cast<TimeLib::TRaw>(this->ticks * multiplier));}

        /** ****************************************************************************************
         * Assignment by product operator.
         * @param multiplier The multiplier.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        TimeSpan& operator*=( double multiplier )      { ticks= static_cast<TimeLib::TRaw>( ticks * multiplier); return *this; }

        /** ****************************************************************************************
         * Divide operator.
         * @param divisor The divisor.
         * @return A time span object containing the sum.
         ******************************************************************************************/
        inline
        TimeSpan operator/( double divisor ) const     { return TimeSpan( static_cast<TimeLib::TRaw>(this->ticks / divisor));}

        /** ****************************************************************************************
         * Assignment by quotient operator.
         * @param divisor The divisor.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        TimeSpan& operator/=( double divisor )         { ticks= static_cast<TimeLib::TRaw>(ticks/divisor); return *this; }


    // #############################################################################################
    // Conversion to/from time values (nanoseconds, milliseconds, microseconds, seconds)
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Converts the internal value to days.
         * @return  The internal value converted to days.
         ******************************************************************************************/
        inline
        double         InDays()       const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<double >( ticks ) /    TimeLib::NanosPerDay;
            #elif defined( _WIN32 )
                return    ( (double) ticks ) /    (TIME.ticksPerSecond * 60.0 * 60.0 * 24.0);
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif

        }

        /** ****************************************************************************************
         * Converts the internal value to absolute days.
         * @return  The internal value converted to days.
         ******************************************************************************************/
        inline
        integer        InAbsoluteDays()       const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<integer>( ticks /    TimeLib::NanosPerDay );
            #elif defined( _WIN32 )
                return    (integer) ( ticks /    (TIME.ticksPerSecond * 60 * 60 * 24) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif

        }

        /** ****************************************************************************************
         * Converts the internal value to hours.
         * @return  The internal value converted to hours.
         ******************************************************************************************/
        inline
        double        InHours()      const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<double >( ticks ) /    TimeLib::NanosPerHour;
            #elif defined( _WIN32 )
                return    ((double) ticks ) /    (TIME.ticksPerSecond * (60.0 * 60.0) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to absolute hours.
         * @return  The internal value converted to hours.
         ******************************************************************************************/
        inline
        integer       InAbsoluteHours()      const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<integer>( ticks /    TimeLib::NanosPerHour );
            #elif defined( _WIN32 )
                return    (integer) ( ticks /    (TIME.ticksPerSecond * 60 * 60 ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to minutes.
         * @return  The internal value converted to minutes.
         ******************************************************************************************/
        inline
        double        InMinutes()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<double >( ticks ) /    TimeLib::NanosPerMinute;
            #elif defined( _WIN32 )
                return    ((double ) ticks ) /    (TIME.ticksPerSecond * 60.0);
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to absolute minutes.
         * @return  The internal value converted to minutes.
         ******************************************************************************************/
        inline
        integer       InAbsoluteMinutes()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<integer>( ticks /    TimeLib::NanosPerMinute );
            #elif defined( _WIN32 )
                return    (integer) ( ticks /    (TIME.ticksPerSecond * 60) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to seconds.
         * @return  The internal value converted to seconds.
         ******************************************************************************************/
        inline
        double        InSeconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    static_cast<double >(ticks) /    TimeLib::NanosPerSecond;
            #elif defined( _WIN32 )
                return   ( (double ) ticks ) /    TIME.ticksPerSecond;
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to absolute seconds.
         * @return  The internal value converted to seconds.
         ******************************************************************************************/
        inline
        integer       InAbsoluteSeconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    static_cast<integer>(ticks /    TimeLib::NanosPerSecond);
            #elif defined( _WIN32 )
                return    (integer) ( ticks /    TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to milliseconds.
         * @return  The internal value converted to milliseconds.
         ******************************************************************************************/
        inline
        double      InMilliseconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    static_cast<double >(ticks) /    TimeLib::NanosPerMillisecond;
            #elif defined( _WIN32 )
                return    ( ticks * 1000.0 /   TIME.ticksPerSecond );

            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to absolute milliseconds.
         * @return  The internal value converted to milliseconds.
         ******************************************************************************************/
        inline
        integer     InAbsoluteMilliseconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    ticks /    TimeLib::NanosPerMillisecond;
            #elif defined( _WIN32 )
                return    static_cast<integer>( ticks * 1000 /   TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to microseconds.
         * @return  The internal value converted to microseconds.
         ******************************************************************************************/
        inline
        double      InMicroseconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    static_cast<double >(ticks) /    TimeLib::NanosPerMicrosecond;
            #elif defined( _WIN32 )
                return    ( ticks * 1000000.0 /   TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to absolute microseconds.
         * @return  The internal value converted to microseconds.
         ******************************************************************************************/
        inline
        integer     InAbsoluteMicroseconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    ticks /    TimeLib::NanosPerMicrosecond;
            #elif defined( _WIN32 )
                return    static_cast<integer>( ticks * 1000000 /   TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to nanoseconds.
         * @return  The internal value converted to nanoseconds.
         ******************************************************************************************/
        inline
        integer     InNanoseconds ()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    ticks;
            #elif defined( _WIN32 )
                return    static_cast<integer>( ticks * 1000000000 /  TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Returns 1 divided by internal value in seconds, hence the number of Hertz that this
         * object represents when interpreted as a time span.
         *
         * @param nDigitsPrecision    Number of digits that the return value will be rounded to.
         *                            Defaults to -1 which means no rounding.
         * @return     double value representing the frequency in hertz.
         ******************************************************************************************/
        ALIB_API
        double      InHertz( int nDigitsPrecision= -1 ) const;

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in days.
         * @param days  The time span to set in days.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromDays   ( double        days )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( days *    TimeLib::NanosPerDay ) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) (   days * (24 * 60 * 60 *  TIME.ticksPerSecond) ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in days.
         * @param days  The time span to set in days.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromAbsoluteDays   ( integer      days )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( days *    TimeLib::NanosPerDay ) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) (   days * (24 * 60 * 60 *  TIME.ticksPerSecond) ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in hours.
         * @param hours  The time span to set in hours.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromHours  ( double           hours )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( hours *    TimeLib::NanosPerHour ));
            #elif defined( _WIN32 )
                return TimeSpan(  (TimeLib::TRaw) (  hours * (60 * 60 *  TIME.ticksPerSecond ) ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in hours.
         * @param hours  The time span to set in hours.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromAbsoluteHours  ( integer       hours )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( hours *    TimeLib::NanosPerHour ));
            #elif defined( _WIN32 )
                return TimeSpan(  (TimeLib::TRaw) (  hours * (60 * 60 *  TIME.ticksPerSecond ) ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in hours.
         * @param minutes  The time span to set in minutes.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan     FromMinutes(double           minutes )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( minutes *    TimeLib::NanosPerMinute) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) ( minutes * (60 *  TIME.ticksPerSecond)  ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in hours.
         * @param minutes  The time span to set in minutes.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan     FromAbsoluteMinutes(integer         minutes )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( minutes *    TimeLib::NanosPerMinute) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) ( minutes * (60 *  TIME.ticksPerSecond)  ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param seconds  The time span to set in seconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromSeconds( double           seconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>(  seconds *    TimeLib::NanosPerSecond ) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) (  seconds *  TIME.ticksPerSecond  ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param seconds  The time span to set in seconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromAbsoluteSeconds( integer        seconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>(  seconds *    TimeLib::NanosPerSecond ) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) (  seconds *  TIME.ticksPerSecond  ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in milliseconds.
         * @param milliseconds    The time span to set in milliseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromMilliseconds ( double  milliseconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( milliseconds *    TimeLib::NanosPerMillisecond ) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) (  milliseconds *  TIME.ticksPerSecond / 1000.0   ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in milliseconds.
         * @param milliseconds    The time span to set in milliseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromAbsoluteMilliseconds ( integer  milliseconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( milliseconds *    TimeLib::NanosPerMillisecond ) );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) (  milliseconds *  TIME.ticksPerSecond / 1000   ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in microseconds.
         * @param microseconds  The time span to set in microseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromMicroseconds ( double  microseconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( microseconds *    TimeLib::NanosPerMicrosecond ));
            #elif defined( _WIN32 )
                return TimeSpan((TimeLib::TRaw) (  microseconds *  static_cast<double>(TIME.ticksPerSecond) / 1000000.0 )   );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in microseconds.
         * @param microseconds  The time span to set in microseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan    FromAbsoluteMicroseconds ( integer  microseconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( static_cast<TimeLib::TRaw>( microseconds *    TimeLib::NanosPerMicrosecond ));
            #elif defined( _WIN32 )
                return TimeSpan((TimeLib::TRaw) (  microseconds *  TIME.ticksPerSecond / 1000000 )   );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in nanoseconds.
         * @param nanoseconds  The time span to set in nanoseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        static inline constexpr
        TimeSpan  FromNanoseconds  ( integer  nanoseconds )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return TimeSpan( nanoseconds );
            #elif defined( _WIN32 )
                return TimeSpan( (TimeLib::TRaw) ( (TIME.ticksPerSecond * nanoseconds) / 1000000000 ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
                return TimeSpan();
            #endif
        }
};

}} // namespace lib::time

/** Type alias name in namespace #aworx. */
using     TimeSpan=             aworx::lib::time::TimeSpan;

}  // namespace aworx

#if ALIB_MODULE_BOXING
//! @cond NO_DOX
namespace aworx { namespace lib { namespace boxing  {
ALIB_BOXING_SPECIALIZE_CB_CUB( aworx::lib::time::TimeSpan , aworx::lib::time::TimeSpan , false, true );
inline  void  T_Boxing<aworx::lib::time::TimeSpan>::Boxing(Box& box, const aworx::lib::time::TimeSpan& o)
{
    box.data.Value= static_cast<boxvalue>( o.Raw() );
    box.data.Length= 0;
}

inline  aworx::lib::time::TimeSpan T_Boxing<aworx::lib::time::TimeSpan>::Unboxing( const Box& box )
{
    return aworx::lib::time::TimeSpan( static_cast<time::TimeLib::TRaw>( box.data.Value ) );
}
}}}
//! @endcond


#if ALIB_MODULE_STRINGS
    ALIB_STRINGS_SPECIALIZE_T_APPLY( aworx::lib::time::TimeSpan )
#endif

#endif //ALIB_MODULE_BOXING

#endif // HPP_ALIB_TIME_TIMESPAN
