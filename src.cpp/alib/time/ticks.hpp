#// #################################################################################################
//  ALib - A-Worx Utility Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################
/** @file */ // Hello Doxygen

// check for alib.hpp already there but not us
#if !defined (HPP_ALIB)
    #error "include \"alib/alib.hpp\" before including this header"
#endif
#if defined(HPP_COM_ALIB_TEST_INCLUDES) && defined(HPP_ALIB_TIME)
    #error "Header already included"
#endif

// then, set include guard
#ifndef HPP_ALIB_TIME
#if !defined( IS_DOXYGEN_PARSER)
#define HPP_ALIB_TIME 1
#endif



// #################################################################################################
// includes
// #################################################################################################
#if !defined (HPP_ALIB_STRINGS_SUBSTRING)
    #include "alib/strings/substring.hpp"
#endif
#if !defined (_GLIBCXX_CTIME) && !defined(_CTIME_)
    #include <ctime>
#endif

namespace aworx {
namespace           lib {
/**
 *  This namespace of ALib holds classes that are providing methods for
 *  measuring time spans and conversion of dates and time values.
 */
namespace                     time {

/** ************************************************************************************************
 *  This class provides an interface into system dependent timer values (usually 64 bit
 *  tick counters) that we call *ticks*. Ticks and this class allow to store and calculate time
 *  values in an efficient and highly accurate way.
 *
 *  Ticks generated by this class can be added and subtracted:
 *
 *  - Subtraction generates a *span value in ticks*
 *  - *Span value in ticks* can be added to themselves safely
 *  - *Span value in ticks* can be added to ticks safely
 *
 *  Conversion functions to milliseconds, microseconds and nanoseconds accept ticks and span
 *  values in ticks in the same manner.
 *
 *  As Ticks are system dependent, they should not be stored and loaded in data files or
 *  otherwise shared between systems. Even on the same machine, e.g. after a reboot, the values
 *  may be incompatible.
 *  Also, in general such values should only be used by methods of
 *  this class and classes
 *  \ref aworx::lib::time::TickWatch "TickWatch",
 *  \ref aworx::lib::time::TickSpan "TickSpan" and
 *  \ref aworx::lib::time::TicksCalendarTime "TicksCalendarTime".
 *
 *  The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 *  deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 **************************************************************************************************/
class Ticks
{
    // #############################################################################################
    // ALib initialization
    // #############################################################################################
    public:
        /**
         * Initializes ALib time  logic.
         * This method should not be called directly. use
         * \ref aworx::lib::ALIB::Init "ALIB::Init" to initialize ALib
         */
        static void _Init_ALib();

        /**
         * Frees resources and shuts down ALib time logic.
         * This method should not be called directly. use
         * \ref aworx::lib::ALIB::TerminationCleanUp "ALIB::TerminationCleanUp" to de-initialize ALib
         */
        static void _Terminate_ALib();


    // #############################################################################################
    // Type and preprocessor definitions
    // #############################################################################################
    public:
        #if !defined( IS_DOXYGEN_PARSER )

        #define    ALIB_NANOS_PER_DAY              86400000000000L
        #define    ALIB_NANOS_PER_HOUR              3600000000000L
        #define    ALIB_NANOS_PER_MINUTE              60000000000L
        #define    ALIB_NANOS_PER_SECOND               1000000000L
        #define    ALIB_NANOS_PER_MILLISECOND             1000000L
        #define    ALIB_NANOS_PER_MICROSECOND                1000L
        #define    ALIB_NANOS_PER_NANOSECOND                    1L

        #endif

    // #############################################################################################
    // static fields and friend methods
    // #############################################################################################
    protected:

        /**  The ticks when static constructor is invoked. */
        ALIB_API  static          Ticks*                          creationTime;

        /**  The frequency of the system timer*/
        ALIB_API  static          int_fast64_t                    frequency;

        #if defined( _WIN32 )
            /**  This factor is applied to ticks received from the system, to virtually increase the
                 resolution into the single digit nanosecond magnitude (e.g. from 100 ns resolution)
                 We are minimizing rounding errors that way in the nano/microsecond area */
            ALIB_API  static      int_fast64_t                    mscResFactor;

            /**  The number of ticks per day */
            ALIB_API  static      double                          mscTicksPerDay;

            /**  The number of ticks per hour */
            ALIB_API  static      double                          mscTicksPerHour;

            /**  The number of ticks per minute */
            ALIB_API  static      double                          mscTicksPerMinute;

            /**  The number of ticks per second */
            ALIB_API  static      double                          mscTicksPerSecond;

            /**  The number of ticks per millisecond */
            ALIB_API  static      double                          mscTicksPerMillisecond;

            /**  The number of ticks per microsecond */
            ALIB_API  static      double                          mscTicksPerMicrosecond;

            /**  The number of ticks per nanosecond */
            ALIB_API  static      double                          mscTicksPerNanosecond;

            /**  The number of ticks per 100ns */
            ALIB_API  static      double                          mscTicksPerFileTimeTick;

        #endif

        /**  Global method that initializes ALIB ticks logic.  */
        friend    Ticks*  static_lib_init_ticks();

        /**  Global method that shuts down ALibs' ticks logic.  */
        friend    void    static_aworx_lib_ticks_destroy();

    // #############################################################################################
    // protected fields
    // #############################################################################################
    protected:
        /// The value
                        int_fast64_t                ticks                                       =0L;

    // #############################################################################################
    // static interface
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *
         *  The time (in ticks) when the ticker library containing the ticker (ALIB) was initialized.
         *  This might be useful to measure the time since the process was started.
         *
         * @return  Initialization time of the library or process
         ******************************************************************************************/
        ALIB_API  static const Ticks&               CreationTime();

        /** ****************************************************************************************
         * The Frequency of the internal tick timer. The Frequency gives you an indication of the
         * accuracy of the time (At least if the underlying system library is reasonably well
         * working in this respect). And this is the reason why it is published with this field.
         * This value does not necessarily correspond to the number of ticks per second that you
         * get from this classesRaw() method. In the current implementation you rather get a tick
         * per nanosecond.
         *
         * @return  An int value representing the frequency of the internal tick timer.
         ******************************************************************************************/
        ALIB_API  static int_fast64_t               InternalFrequency();

    // #############################################################################################
    // Constructors
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Creates a Ticks instance representing the point in time when this constructor was invoked.
         ******************************************************************************************/
        inline
        Ticks()                         { Set();    }

        /** ****************************************************************************************
         * Creates a Ticks instance representing a given point in time or time span in ticks.
         * @param ticks The value to copy into this.
         ******************************************************************************************/
        inline
        Ticks( int_fast64_t ticks )     { this->ticks=    ticks;    }

        /** ****************************************************************************************
         * Creates a Ticks instance representing the same point in time or time span as the instance
         * provided.
         * @param copy The instance to copy the ticks value from.
         ******************************************************************************************/
        inline
        Ticks( const Ticks& copy )      { this->ticks=    copy.ticks; }

    // #############################################################################################
    // Interface
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *     Sets the actual point in time as the value of this instance.
         ******************************************************************************************/
        void  Set()
        {
            #if defined( __GLIBCXX__ )
                struct timespec t;
                ALIB_ASSERT_RESULT_EQUALS( clock_gettime(CLOCK_MONOTONIC, &t),  0 );

                ticks= ( t.tv_sec * ALIB_NANOS_PER_SECOND  ) + t.tv_nsec ;
            #elif defined( _WIN32 )
                    LARGE_INTEGER v;
                    ALIB_ASSERT_RESULT_NOT_EQUALS( QueryPerformanceCounter( &v ) , 0 );
                    ticks= v.QuadPart * mscResFactor;
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }


        /** ****************************************************************************************
         *  Sets the point in time or time span represented by this instance to the value
         *  represented by the given Ticks instance.
         *  @param other The Ticks object to copy.
         ******************************************************************************************/
        inline
        void         Set( const Ticks& other )         { this->ticks=    other.ticks;    }

        /** ****************************************************************************************
         *  Sets this objects' value to the value specified in raw ticks.
         *  @param value The number of ticks this object should represent.
         ******************************************************************************************/
        inline
        void         SetRaw( int_fast64_t value )      { this->ticks=    value;           }

        /** ****************************************************************************************
         *  Gets the internally stored system dependent time in raw ticks.
         *  @return  The internal value
         ******************************************************************************************/
        inline
        int_fast64_t Raw()    const                    { return ticks;                    }

        /** ****************************************************************************************
         *  Adds time (span) represented by the given Ticks instance to this instance.
         *  @param other The Ticks object to add.
         ******************************************************************************************/
        inline
        void         Add( const Ticks& other )         { this->ticks+=    other.ticks;   }

        /** ****************************************************************************************
         *  Adds time (span) represented by the given Ticks instance to this instance.
         *  @param ticks The ticks to add.
         ******************************************************************************************/
        inline
        void         Add( int_fast64_t ticks )         { this->ticks+=    ticks;         }

        /** ****************************************************************************************
         *  Subtracts the point in time or time span represented by the given Ticks instance from
         *  this instance.
         *  @param other The Ticks object to subtract.
         ******************************************************************************************/
        inline
        void         Sub( const Ticks& other )         { this->ticks-=    other.ticks;   }

        /** ****************************************************************************************
         *  Subtracts the point in time or time span represented by the given Ticks instance from
         *  this instance.
         *  @param ticks The ticks to subtract.
         ******************************************************************************************/
        inline
        void         Sub( int_fast64_t ticks )         { this->ticks-=    ticks;         }

    // #############################################################################################
    // Interface Age, Since
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current system
         * time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * @return  The age of this instance stored in a new Ticks.
         ******************************************************************************************/
        inline
        Ticks    Age()
        {
            Ticks result;
            result.Sub( ticks );
            return result;
        }

        /** ****************************************************************************************
         * Returns the time span between the value represented by this instance and the given
         * StopWatch.If the given StopWatch represents an earlier point in time, the result is
         * positive.
         *
         * @param olderTime The value to compare this instance with
         *
         * @return  The age of this instance stored in the given or created object.
         ******************************************************************************************/
        inline
        Ticks    Since( const Ticks& olderTime )    const
        {
            Ticks result(ticks);
            result.Sub( olderTime );
            return result;
        }

        /** ****************************************************************************************
         * Determines if this objects' age is higher than a given time span.
         *
         * @param waitTime  A \b %Ticks object representing a time span.
         * @return  \c true if the given \b %Ticks object representing a time span is smaller
         *          or equal than our age. \c false otherwise.
         ******************************************************************************************/
        inline
        bool   HasElapsed( Ticks waitTime )
        {
            return Age().Raw()  >=  waitTime.Raw();
        }

    // #############################################################################################
    // Conversion to/from time values (nanoseconds, milliseconds, microseconds, seconds)
    // #############################################################################################
    public:

        /** ****************************************************************************************
         *  Converts the internal value to days.
         * @return  The internal value converted to days.
         ******************************************************************************************/
        inline
        int           InDays()       const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    ALIB_NANOS_PER_DAY;
            #elif defined( _WIN32 )
                return    (int) std::round( ticks /    mscTicksPerDay );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif

        }

        /** ****************************************************************************************
         *  Converts the internal value to hours.
         * @return  The internal value converted to hours.
         ******************************************************************************************/
        inline
        int           InHours()      const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    ALIB_NANOS_PER_HOUR;
            #elif defined( _WIN32 )
                return    (int) std::round( ticks /    mscTicksPerHour );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         *  Converts the internal value to minutes.
         * @return  The internal value converted to minutes.
         ******************************************************************************************/
        inline
        int           InMinutes()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    ALIB_NANOS_PER_MINUTE;
            #elif defined( _WIN32 )
                return    (int) std::round( ticks /    mscTicksPerMinute );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         *  Converts the internal value to seconds.
         * @return  The internal value converted to seconds.
         ******************************************************************************************/
        inline
        int           InSeconds()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    ALIB_NANOS_PER_SECOND;
            #elif defined( _WIN32 )
                return    (int) std::round( ticks /    mscTicksPerSecond      );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         *  Converts the internal value to milliseconds.
         * @return  The internal value converted to milliseconds.
         ******************************************************************************************/
        inline
        int_fast64_t  InMillis()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    ALIB_NANOS_PER_MILLISECOND;
            #elif defined( _WIN32 )
                return    (int_fast64_t) std::round( ticks /    mscTicksPerMillisecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         *  Converts the internal value to microseconds.
         * @return  The internal value converted to microseconds.
         ******************************************************************************************/
        inline
        int_fast64_t  InMicros()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks /    ALIB_NANOS_PER_MICROSECOND;
            #elif defined( _WIN32 )
                return    (int_fast64_t) std::round( ticks /    mscTicksPerMicrosecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         *  Converts the internal value to nanoseconds.
         * @return  The internal value converted to nanoseconds.
         ******************************************************************************************/
        inline
        int_fast64_t  InNanos ()    const
        {
            #if defined (__GLIBCXX__)
                return    ticks;
            #elif defined( _WIN32 )
                return    (int_fast64_t) std::round( ticks /    mscTicksPerNanosecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         *  Returns 1 divided by internal value in seconds, hence the number of Hertz that this
         *  object represents when interpreted as a time span.
         *
         * @param nDigitsPrecision    Number of digits that the return value will be rounded to.
         *                            Defaults to -1 which means no rounding.
         * @return     double value representing the frequency in hertz.
         ******************************************************************************************/
        ALIB_API
        double       InHertz( int nDigitsPrecision= -1 ) const;

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param days  The time span to set in days.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromDays   ( int           days )
        {
            #if defined (__GLIBCXX__)
                ticks=                   days *    ALIB_NANOS_PER_DAY   ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  days *    mscTicksPerDay         );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param hours  The time span to set in hours.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromHours  ( int           hours )
        {
            #if defined (__GLIBCXX__)
                ticks=                   hours *    ALIB_NANOS_PER_HOUR   ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  hours *    mscTicksPerHour         );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param mins  The time span to set in minutes.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromMinutes( int           mins )
        {
            #if defined (__GLIBCXX__)
                ticks=                   mins *    ALIB_NANOS_PER_MINUTE   ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  mins *    mscTicksPerMinute         );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in seconds.
         * @param secs  The time span to set in seconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromSeconds( int           secs )
        {
            #if defined (__GLIBCXX__)
                ticks=                   secs *    ALIB_NANOS_PER_SECOND   ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  secs *    mscTicksPerSecond            );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in milliseconds.
         * @param millis    The time span to set in milliseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromMillis ( int_fast64_t  millis )
        {
            #if defined (__GLIBCXX__)
                ticks=                   millis *    ALIB_NANOS_PER_MILLISECOND   ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  millis *    mscTicksPerMillisecond         );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in microseconds.
         * @param micros  The time span to set in microseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromMicros ( int_fast64_t  micros )
        {
            #if defined (__GLIBCXX__)
                ticks=                   micros *    ALIB_NANOS_PER_MICROSECOND ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  micros *    mscTicksPerMicrosecond       );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         *  Sets the internal value to a time span provided in nanoseconds.
         * @param nanos  The time span to set in nanoseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&     FromNanos  ( int_fast64_t  nanos )
        {
            #if defined (__GLIBCXX__)
                ticks=                   nanos *    ALIB_NANOS_PER_NANOSECOND   ;
            #elif defined( _WIN32 )
                ticks= (int_fast64_t) (  nanos *    mscTicksPerNanosecond         );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Formats the point in time represented by this instance into an AString using the given
         * pattern. The token definitions of the format string is equal to those found in
         * \ref TicksCalendarTime.
         *
         *  @param format  The format pattern string.
         *  @param target  A reference to an AString that gets the result of the format processing
         *                 appended.
         *  @returns \p target (for convenience).
         ******************************************************************************************/
        ALIB_API
        AString&  Format( const String& format, AString& target );


    // #############################################################################################
    // Conversion to time platform/language specific values
    // #############################################################################################
        #if defined (__GLIBCXX__)
            /** ************************************************************************************
             *  Converts the internal value into seconds since January 1, 1970, 00:00:00 GMT.
             *  The conversion is dependent on time zone and system clock setting of the host.
             *  \note  GLib specific.
             * @return Seconds in the epoch.
             **************************************************************************************/
            ALIB_API  time_t  InEpochSeconds()    const;

            /** ************************************************************************************
             *  Sets the internal value by converting the given seconds since January 1,
             *  1970, 00:00:00 GMT. The conversion is dependent on time zone and system clock
             *  setting of the host.
             *  \note  GLib specific.
             * @param epochSeconds The milliseconds in the epoch to convert.
             **************************************************************************************/
            ALIB_API  void    SetFromEpochSeconds ( time_t epochSeconds );
        #endif // no else here (doxygen)!

        #if defined (_WIN32)
            /** ************************************************************************************
             * Converts the internal value into windows specific file time, a 64-bit value that
             * represents the number of 100 nanosecond intervals that have elapsed since
             * 12:00 A.M. January 1, 1601 UTC. The conversion is dependent on time zone and system
             * clock setting of the host.
             * \note  Microsoft Windows specific.
             * @param result Pointer to a FILETIME struct to store the result in.
             **************************************************************************************/
            ALIB_API  void    InFileTime( LPFILETIME result ) const;

            /** ************************************************************************************
             * Converts the internal value into windows specific file time, a 64-bit value that
             * represents the number of 100 nanosecond intervals that have elapsed since
             * 12:00 A.M. January 1, 1601 UTC. The conversion is dependent on time zone and system
             * clock setting of the host.
             * \note  Microsoft Windows specific.
             * @param result A reference to a LARGE_INTEGER struct to store the result in.
             **************************************************************************************/
            ALIB_API  void    InFileTime( ULARGE_INTEGER& result ) const;

            /** ************************************************************************************
             * Sets the internal value to represent the point in time provided as "file time".
             * File time is a 64-bit value that represents the number of 100 nanosecond intervals
             * that have elapsed since 12:00 A.M. January 1, 1601 UTC.
             * The conversion is dependent on time zone and system clock setting of the host.
             * \note  Microsoft Windows specific.
             * @param fileTime The file time to set.
             **************************************************************************************/
            ALIB_API  void    SetFromFileTime( const LPFILETIME fileTime );

            /** ************************************************************************************
             * Sets the internal value to represent the point in time provided as "file time".
             * File time is a 64-bit value that represents the number of 100 nanosecond intervals
             * that have elapsed since 12:00 A.M. January 1, 1601 UTC.
             * The conversion is dependent on time zone and system clock setting of the host.
             * \note  Microsoft Windows specific.
             * @param fileTime The file time to set.
             **************************************************************************************/
            ALIB_API  void    SetFromFileTime( const ULARGE_INTEGER& fileTime );

            /** ************************************************************************************
             * Converts the internal value into windows specific system time struct.
             * The conversion is dependent on time zone and system clock setting of the host.
             * \note  Microsoft Windows specific.
             * @param result   Pointer to a SYSTEMTIME struct to store the result in.
             * @param timezone Denote if the time that is returned should be local or UTC.
             *                 Defaults to \c TimeZone::Local.
             * @return Seconds in the epoch.
             **************************************************************************************/
            ALIB_API  void    InSystemTime( LPSYSTEMTIME result, enums::Timezone timezone =enums::Timezone::Local ) const;

            /** ************************************************************************************
             * Sets the internal value to represent the point in time provided as windows system
             * time. The conversion is dependent on time zone and system clock setting of the host.
             * \note  Microsoft Windows specific.
             * @param systemTime Pointer to a SYSTEMTIME struct that holds the system time to set.
             * @param timezone Denote if the time is interpreted as local or UTC.
             *                 Defaults to \c TimeZone::Local.
             **************************************************************************************/
            ALIB_API  void    SetFromSystemTime( const SYSTEMTIME& systemTime, enums::Timezone timezone= enums::Timezone::Local );
        #endif


};


/** ************************************************************************************************
 *  This class encapsulates a system dependent time value (Ticks) and provides some basic
 *  interface for measuring time spans, including multiple samples and their average.
 **************************************************************************************************/
class TickWatch
{
    // #############################################################################################
    // Internal fields
    // #############################################################################################
    protected:

        ///  The current start time.
        Ticks        startTime;

        ///  The number of samples performed.
        int          cntSamples                                                                 =0;

        ///  The sum of the samples times.
        Ticks        sum;


    // #############################################################################################
    // Constructors
    // #############################################################################################
    public:
        /** ****************************************************************************************
         *  Creates a started StopWatch.
         ******************************************************************************************/
        inline
        TickWatch  () : startTime(),  sum(0)        {}

        /** ****************************************************************************************
         * Creates a StopWatch as a copy of another StopWatch.
         * @param copy  The instance to copy value from.
         ******************************************************************************************/
        TickWatch    ( const TickWatch& copy )
        : startTime(0), sum(0)
        {
            startTime    .Set( copy.startTime );
            sum          .Set( copy.sum );
            cntSamples=  copy.cntSamples;
        }

    // #############################################################################################
    // Interface Get/Set/Reset
    // #############################################################################################
    public:
        /** ****************************************************************************************
         * Returns the internally stored start time
         * @return    The start time
         ******************************************************************************************/
        inline
        const Ticks&    GetStartTime()    const               { return startTime;                  }

        /** ****************************************************************************************
         * Sets the start time to now.
         * This affects both, the reference value for the calculation of this StopWatch's age in
         * subsequent calls, as well as subsequent sample time spans.
         ******************************************************************************************/
        inline
        void            Start()                               { startTime.Set();                   }

        /** ****************************************************************************************
         * Sets the start time to the given value.
         * @param startTime  A new start time for the stopwatch
         ******************************************************************************************/
        inline
        void            SetStartTime( const Ticks startTime ) { this->startTime.Set( startTime );  }


        /** ****************************************************************************************
         *  Sets the internal value to current system time and clears existing sum and quantity of
         *  samples.
         ******************************************************************************************/
        inline
        void            Reset()                          { sum.Set( 0L ); cntSamples= 0;  Start(); }


    // #############################################################################################
    // Interface to Measurement
    // #############################################################################################

        /** ****************************************************************************************
         *  Returns the time span between the current system time and the internal start value.
         *  In addition this value is added to the sum of sample times and the sample counter is
         *  increased by one. Lastly the internal reference value is set to now. Therefore, a
         *  subsequent call to this function would measure the time span from this call to this
         *  subsequent call (if the internal start time value was not set differently meanwhile).
         *
         * @return The time difference between the current system time and the internal
         *         reference value.
         ******************************************************************************************/
        inline
        const Ticks    Sample    ()
        {
            cntSamples++;
            int_fast64_t st=    startTime.Raw();
            startTime.Set();
            int_fast64_t diff=  startTime.Raw() - st;

            Ticks sample( diff );
            sum.Add( diff );

            return sample;
        }

        /** ****************************************************************************************
         *  Returns the number of calls to #Sample since this instance was created or #Reset was invoked.
         * @return    The number of samples.
         ******************************************************************************************/
        inline
        int      GetSampleCnt()             { return cntSamples; }

        /** ****************************************************************************************
         *  Returns the cumulated time of all samples taken since this instance was created or cleared.
         *  Note: the object returned will be reused in subsequent calls to this method. Hence, previously
         *  returned values will be overwritten!
         *
         * @return  The cumulated measured time.
         ******************************************************************************************/
        inline
        Ticks    GetCumulated()            { return sum; }

        /** ****************************************************************************************
         *  Returns the average time of all samples since this instance was created or reset.
         *  If no measurement was performed, the result value will be set to 0 ticks.
         *
         * @return  The cumulated measured time.
         ******************************************************************************************/
        inline
        Ticks    GetAverage()
        {
            return Ticks ( cntSamples== 0 ? 0L     :    ( sum.Raw() / cntSamples) );
        }
};


/** ************************************************************************************************
 *  This class represents a time span, measured in days, hours, minutes and so on.
 *  It provides methods to import from and to an object of type
 *  \ref aworx::lib::time::Ticks "Ticks".<br>
 *  (Note: Objects of type <em>%Ticks</em> may represent a point in time or a time span, dependent
 *  on what value they have set to).
 **************************************************************************************************/
class TickSpan
{
    public:
        /// The number of days within the time span
        int                     Days;

        /// The number of hours (not the total, hence 0-23) within the time span
        int                     Hours;

        /// The number of minutes (not the total, hence 0-59) within the time span
        int                     Minutes;

        /// The number of seconds (not the total, hence 0-59) within the time span
        int                     Seconds;

        /// The number of milliseconds (not the total, hence 0-999) within the time span
        int                     Milliseconds;

        /// The number of microseconds (not the total, hence 0-999) within the time span
        int                     Microseconds;

        /// The number of nanoseconds (not the total, hence 0-999) within the time span
        int                     Nanoseconds;

    /** ********************************************************************************************
     *  Constructs the object to represent a time span of 0. (Sets all public fields to 0.)
     **********************************************************************************************/
    inline
    TickSpan()                                             { Clear(); }

    /** ********************************************************************************************
     *  Constructs the object using the given Tick objects ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks The Ticks object to use for setting the public fields
     **********************************************************************************************/
    inline
    TickSpan( const Ticks& ticks )                         { Set( ticks.Raw() ); }

    /** ********************************************************************************************
     *  Constructs the object using the given ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks The value in ticks to use for setting the public fields
     **********************************************************************************************/
    inline
    TickSpan( int_fast64_t ticks )                         { Set(ticks); }

    /** ********************************************************************************************
     *  Constructs the object using the two Tick objects that mark the start and end points in time
     *  of the span.
     *  @param first   The Ticks object that marks the beginning of the time span
     *  @param second  The Ticks object that marks the end of the time span
     **********************************************************************************************/
    inline
    TickSpan( const Ticks& first,  const Ticks& second )   { Set( first.Raw() - second.Raw() ); }

    /** ********************************************************************************************
     *  Sets the public fields to represent the given Tick objects ticks value.
     *  The state of the object will hereafter be the same as it was when constructed with the same
     *  parameter.
     *  @param ticks The Ticks object to use for setting the public fields
     **********************************************************************************************/
    inline
             void              Set( const Ticks& ticks )   { Set( ticks.Raw() ); }

    /** ********************************************************************************************
     *  Sets the public fields to represent the given ticks value.
     *  The state of the object will hereafter be the same as it was when constructed with the same
     *  parameter.
     *  @param ticks The value in ticks to use for setting the public fields
     **********************************************************************************************/
    ALIB_API void              Set( int_fast64_t ticks );

    /** ********************************************************************************************
     *  Takes the current values of the public fields and calculates a time span value in ticks.
     *  Such value can be used with class Ticks, e.g. to add or subtract time spans.
     *  @returns The time span represented by the public fields of this class.
     **********************************************************************************************/
    ALIB_API int_fast64_t      Get();

    /** ********************************************************************************************
     *  Sets all public values to 0.
     **********************************************************************************************/
    ALIB_API void              Clear();
};


/** ************************************************************************************************
 *  This class represents a point in time as a set of calendar values (year, month, day, hour...).
 *  It provides methods to import from and to object of type
 *  \ref aworx::lib::time::Ticks "Ticks".
 *
 *  In addition a method to format the date and time into human readable string value is available.
 *
 *  \note This class is using system specific calendar methods and relies on the locale and time zone
 *  settings of the machine.
 **************************************************************************************************/
class TicksCalendarTime
{
    #if defined (__GLIBCXX__)
        protected:
        /// the TM struct field for daylight saving information
        int                     tm_isdst;
    #endif

    public:
        /// The calendar year (e.g. 2016)
        int                     Year;

        /// The calendar month (1..12)
        int                     Month;

        /// The calendar day (1..31)
        int                     Day;

        /// The calendar day of week (this is ignored, when converted back to a time value)
        int                     DayOfWeek;

        /// The calendar hour (0..23)
        int                     Hour;

        /// The calendar minute (0..59)
        int                     Minute;

        /// The calendar second (0..59)
        int                     Second;

        /// The calendar millisecond (0..999)
        int                     Millisecond;

    /** ********************************************************************************************
     * Constructs the object to represent a time span of 0. (Sets all public fields to 0.)
     **********************************************************************************************/
    inline
    TicksCalendarTime()
    {
        Clear();
    }

    /** ********************************************************************************************
     *  Constructs the object using the given Tick objects ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks    The Ticks object to use for setting the public fields
     *  @param timezone Denote if the time that is calculated should be local or UTC.
     *                  Defaults to \c TimeZone::Local.
     **********************************************************************************************/
    inline
     TicksCalendarTime( const Ticks& ticks, enums::Timezone timezone =enums::Timezone::Local )
     {
        Set( ticks.Raw(), timezone );
     }

    /** ********************************************************************************************
     *  Constructs the object using the given ticks value.
     *  After construction, the public fields are set properly
     *  @param ticks    The value in ticks to use for setting the public fields
     *  @param timezone Denote if the time that is calculated should be local or UTC.
     *                  Defaults to \c TimeZone::Local.
     **********************************************************************************************/
    inline
     TicksCalendarTime( int_fast64_t ticks, enums::Timezone timezone =enums::Timezone::Local )
     {
        Set(ticks, timezone);
     }


    /** ********************************************************************************************
     *  Sets the public fields to represent the given Tick objects time value.
     *  @param ticks    The Ticks object to use for setting the public fields
     *  @param timezone Denote if the time that is calculated should be local or UTC.
     *                  Defaults to \c TimeZone::Local.
     **********************************************************************************************/
    inline
    void         Set( const Ticks& ticks, enums::Timezone timezone =enums::Timezone::Local )
    {
        Set( ticks.Raw(), timezone );
    }

    /** ********************************************************************************************
     *  Sets the public fields to represent the given ticks value.
     *  @param ticks    The value in ticks to use for setting the public fields
     *  @param timezone Denote if the time that is calculated should be local or UTC.
     *                  Defaults to \c TimeZone::Local.
     **********************************************************************************************/
    ALIB_API
    void         Set( int_fast64_t ticks, enums::Timezone timezone =enums::Timezone::Local  );

    /** ********************************************************************************************
     *  Takes the current values of the public fields and calculates a time span value in ticks.
     *  Such value can be used with class Ticks, e.g. to add or subtract time spans.
     *  @param timezone Denote if the time that is calculated should be local or UTC.
     *                  Defaults to \c TimeZone::Local.
     *  @returns The time span represented by the public fields of this class.
     **********************************************************************************************/
    ALIB_API
    int_fast64_t Get( enums::Timezone timezone =enums::Timezone::Local );

    /** ********************************************************************************************
     *     Sets all public values to 0.
     **********************************************************************************************/
    ALIB_API
    void         Clear();

    /** ********************************************************************************************
     * Formats the date using a given pattern string. Within the pattern string, different symbols
     * are interpreted as tokens. The format is compatible with C# time format strings, as well as
     * with class SimpleDateFormat of the Java APIs.<br>
     * Strings within the format text that should not be interpreted as tokens may be surrounded
     * by single quotes. Two single quotes in a row, will be replaced by one single quote.<br>
     * The following tokens are supported:
     *
     *  <center>Token</center>  | <center>Description</center>
     *  - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
     *   y       |The year with as many digits as it has (for current dates this is 4).</TD> </TR>
     *   yy      |The year, truncated to 2 digits (modulo 100).</TD> </TR>
     *   yyy...y |The year with a minimum amount of digits as amount of y-characters given.</TD> </TR>
     *   M       |The month as numbers from 1..12.</TD> </TR>
     *   MM      |The month as numbers from 01..12.</TD> </TR>
     *   MMM     |The month as abbreviated, 3-digit word in English language.</TD> </TR>
     *   MMMM    |The month as word in English language.</TD> </TR>
     *   d       |The day as numbers from 1..31.</TD> </TR>
     *   dd      |The day as numbers from 01..31.</TD> </TR>
     *   ddd     |The day as abbreviated, 3-digit word in English language.</TD> </TR>
     *   dddd    |The day as word in English language.</TD> </TR>
     *   H       |The hour as numbers from 0..23.</TD> </TR>
     *   HH      |The hour as numbers from 01..23.</TD> </TR>
     *   K       |The hour as numbers from 0..11 am/pm.</TD> </TR>
     *   KK      |The hour as numbers from 01..11 am/pm.</TD> </TR>
     *   m       |The minute as numbers from 0..59.</TD> </TR>
     *   mm      |The minute as numbers from 01..59.</TD> </TR>
     *   s       |The second as numbers from 0..59.</TD> </TR>
     *   ss      |The second as numbers from 00..59.</TD> </TR>
     *
     * @param format     The format pattern string.
     * @param target     A reference to an AString that gets the result of the format processing
     *                   appended.
     * @param targetData If \c CurrentData::Keep (the default) the string is appended to \p target.
     *                   if \c CurrentData::Clear, \p target is cleared.
     * @returns \p target (for convenience).
     **********************************************************************************************/
    ALIB_API
    AString&    Format( Substring format, AString& target,
                        lib::enums::CurrentData targetData= lib::enums::CurrentData::Keep  );
};

}} // namespace lib::time

/** Type alias name in namespace #aworx. */
using     Ticks=                aworx::lib::time::Ticks;

/** Type alias name in namespace #aworx. */
using     TickSpan=             aworx::lib::time::TickSpan;

/** Type alias name in namespace #aworx. */
using     TickWatch=            aworx::lib::time::TickWatch;

/** Type alias name in namespace #aworx. */
using     TicksCalendarTime=    aworx::lib::time::TicksCalendarTime;

}  // namespace aworx

#endif // HPP_ALIB_StopWatch
