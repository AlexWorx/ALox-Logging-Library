// #################################################################################################
//  ALib - A-Worx Utility Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################
/** @file */ // Hello Doxygen

// check for alib.hpp already there but not us
#if !defined (HPP_ALIB)
    #error "include \"alib/alib.hpp\" before including this header"
#endif
#if defined(HPP_COM_ALIB_TEST_INCLUDES) && defined(HPP_ALIB_TIME_TICKS)
    #error "Header already included"
#endif

// then, set include guard
#ifndef HPP_ALIB_TIME_TICKS
//! @cond NO_DOX
#define HPP_ALIB_TIME_TICKS 1
//! @endcond

#if !defined (HPP_ALIB_TIME_LIB)
    #include "alib/time/timelib.hpp"
#endif


namespace aworx { namespace lib { namespace time {

/** ************************************************************************************************
 * \note This class is deprecated and will be removed with the next version of \alib.
 *
 * This class provides an interface into system dependent timer values (usually 64 bit
 * tick counters) that we call *ticks*. Ticks and this class allow to store and calculate time
 * values in an efficient and highly accurate way.
 *
 * Ticks generated by this class can be added and subtracted:
 *
 * - Subtraction generates a *span value in ticks*
 * - *Span value in ticks* can be added to themselves safely
 * - *Span value in ticks* can be added to ticks safely
 *
 * Conversion functions to milliseconds, microseconds and nanoseconds accept ticks and span
 * values in ticks in the same manner.
 *
 * As Ticks are system dependent, they should not be stored and loaded in data files or
 * otherwise shared between systems. Even on the same machine, the values may become be
 * incompatible (e.g. after a reboot).
 * Also, in general such values should only be used by methods of
 * this class and classes
 * \ref aworx::lib::time::TickWatch "TickWatch",
 * \ref aworx::lib::time::TickSpan "TickSpan" and
 * \ref aworx::lib::time::TicksCalendarTime "TicksCalendarTime".
 *
 * The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 * deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 **************************************************************************************************/
class Ticks
{
    // #############################################################################################
    // protected fields
    // #############################################################################################
    protected:
        /** The internal time value. */
        TimeLib::TRaw             ticks                                                         =0L;

    // #############################################################################################
    // Constructors
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Creates a Ticks instance representing the point in time when this constructor was invoked.
         ******************************************************************************************/
        inline
        Ticks()                         { Set();    }

        /** ****************************************************************************************
         * Creates a Ticks instance representing a given point in time or time span in ticks.
         * @param initialTicks The value to copy into this.
         ******************************************************************************************/
        inline
        Ticks( TimeLib::TRaw initialTicks )   { this->ticks=    initialTicks;    }

    // #############################################################################################
    // Interface
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Sets the actual point in time as the value of this instance.
         ******************************************************************************************/
        void  Set()
        {
            #if defined( __GLIBCXX__ ) || defined(__APPLE__)
                struct timespec t;
                ALIB_ASSERT_RESULT_EQUALS( clock_gettime(CLOCK_MONOTONIC, &t),  0 );

                ticks= ( t.tv_sec * TimeLib::NanosPerSecond  ) + t.tv_nsec ;
            #elif defined( _WIN32 )
                    LARGE_INTEGER v;
                    ALIB_ASSERT_RESULT_NOT_EQUALS( QueryPerformanceCounter( &v ) , 0 );
                    ticks= v.QuadPart << 1;
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }


        /** ****************************************************************************************
         * Sets the point in time or time span represented by this instance to the value
         * represented by the given Ticks instance.
         * @param other The Ticks object to copy.
         ******************************************************************************************/
        inline
        void         Set( const Ticks& other )      { this->ticks=    other.ticks;    }

        /** ****************************************************************************************
         * Sets this objects' value to the value specified in raw ticks.
         * @param value The number of ticks this object should represent.
         ******************************************************************************************/
        inline
        void         SetRaw( TimeLib::TRaw value )     { this->ticks=    value;           }

        /** ****************************************************************************************
         * Gets the internally stored system dependent time in raw ticks.
         * @return  The internal value
         ******************************************************************************************/
        inline
        TimeLib::TRaw   Raw()    const                 { return ticks;                    }

        /** ****************************************************************************************
         * Adds time (span) represented by the given Ticks instance to this instance.
         * @param other The Ticks object to add.
         ******************************************************************************************/
        inline
        void         Add( const Ticks& other )      { this->ticks+=    other.ticks;   }

        /** ****************************************************************************************
         * Adds time (span) represented by the given Ticks instance to this instance.
         * @param other The ticks to add.
         ******************************************************************************************/
        inline
        void         Add( TimeLib::TRaw other )        { this->ticks+=    other;         }

        /** ****************************************************************************************
         * Subtracts the point in time or time span represented by the given Ticks instance from
         * this instance.
         * @param other The Ticks object to subtract.
         ******************************************************************************************/
        inline
        void         Sub( const Ticks& other )      { this->ticks-=    other.ticks;   }

        /** ****************************************************************************************
         * Subtracts the point in time or time span represented by the given Ticks instance from
         * this instance.
         * @param other The ticks to subtract.
         ******************************************************************************************/
        inline
        void         Sub( TimeLib::TRaw other )        { this->ticks-=    other;         }

        /** ****************************************************************************************
         * Addition operator.
         * @param other The ticks left-hand side object to add.
         * @return A ticks object containing the sum.
         ******************************************************************************************/
        inline
        Ticks operator+( const Ticks& other )       { return Ticks(this->ticks +    other.ticks);  }

        /** ****************************************************************************************
         * Substractions operator.
         * @param other The right-hand side ticks object to substract.
         * @return A ticks object containing the sum.
         ******************************************************************************************/
        inline
        Ticks operator-( const Ticks& other )       { return Ticks(this->ticks -    other.ticks);  }

        /** ****************************************************************************************
         * Assignment by sum operator.
         * @param other The ticks object subtract.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        Ticks& operator+=( const Ticks& other )     { this->ticks+=    other.ticks; return *this;  }

        /** ****************************************************************************************
         * Assignment by difference operator.
         * @param other The ticks object subtract.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        Ticks& operator-=( const Ticks& other )     { this->ticks-=    other.ticks; return *this;  }

        /** ****************************************************************************************
         * Equal to operator.
         * @param other The ticks to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator==( const Ticks& other )     { return this->ticks == other.ticks;  }


        /** ****************************************************************************************
         * Not equal to operator.
         * @param other The ticks to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator!=( const Ticks& other )     { return this->ticks != other.ticks;  }

        /** ****************************************************************************************
         * Less than operator.
         * @param other The ticks to compare.
         * @return A reference to this object.
         ******************************************************************************************/
        inline
        bool   operator<( const Ticks& other )      { return this->ticks <  other.ticks;  }

        /** ****************************************************************************************
         * Less than or equal to operator.
         * @param other The ticks to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator<=( const Ticks& other )     { return this->ticks <=  other.ticks;  }

        /** ****************************************************************************************
         * Greater than operator.
         * @param other The ticks to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator>( const Ticks& other )      { return this->ticks >  other.ticks;  }

        /** ****************************************************************************************
         * Greater than or equal to operator.
         * @param other The ticks to compare.
         * @return The result of the comparison.
         ******************************************************************************************/
        inline
        bool   operator>=( const Ticks& other )     { return this->ticks >=  other.ticks;  }


    // #############################################################################################
    // Interface Age, Since
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current system
         * time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * @return  The age of this instance stored in a new Ticks.
         ******************************************************************************************/
        inline
        Ticks    Age()
        {
            Ticks result;
            result.Sub( ticks );
            return result;
        }

        /** ****************************************************************************************
         * Sets this object to represent the time span between its creation (or otherwise currently
         * stored point in time) and the current system tim.e
         *
         * If the internal value represents a historic point in time, the resulting time span is
         * positive.
         ******************************************************************************************/
        inline
        void    SetToAge()
        {
            *this= Ticks() - *this;
        }

        /** ****************************************************************************************
         * Returns the time span between the value represented by this instance and the given
         * StopWatch.If the given StopWatch represents an earlier point in time, the result is
         * positive.
         *
         * @param olderTime The value to compare this instance with
         *
         * @return  The age of this instance stored in the given or created object.
         ******************************************************************************************/
        inline
        Ticks    Since( const Ticks& olderTime )    const
        {
            Ticks result(ticks);
            result.Sub( olderTime );
            return result;
        }

        /** ****************************************************************************************
         * Determines if this objects' age is higher than a given time span.
         *
         * @param waitTime  A \b %Ticks object representing a time span.
         * @return  \c true if the given \b %Ticks object representing a time span is smaller
         *          or equal than our age. \c false otherwise.
         ******************************************************************************************/
        inline
        bool   HasElapsed( Ticks waitTime )
        {
            return Age().Raw()  >=  waitTime.Raw();
        }

    // #############################################################################################
    // Conversion to/from time values (nanoseconds, milliseconds, microseconds, seconds)
    // #############################################################################################
    public:

        /** ****************************************************************************************
         * Converts the internal value to days.
         * @return  The internal value converted to days.
         ******************************************************************************************/
        inline
        int           InDays()       const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<int>( ticks /    TimeLib::NanosPerDay );
            #elif defined( _WIN32 )
                return    (int) ( ticks /    (TIME.ticksPerSecond * 60 * 60 * 24) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif

        }

        /** ****************************************************************************************
         * Converts the internal value to hours.
         * @return  The internal value converted to hours.
         ******************************************************************************************/
        inline
        int           InHours()      const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<int>( ticks /    TimeLib::NanosPerHour );
            #elif defined( _WIN32 )
                return    (int) ( ticks /    (TIME.ticksPerSecond * 60 * 60 ) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to minutes.
         * @return  The internal value converted to minutes.
         ******************************************************************************************/
        inline
        int           InMinutes()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return static_cast<int>( ticks /    TimeLib::NanosPerMinute );
            #elif defined( _WIN32 )
                return    (int) ( ticks /    (TIME.ticksPerSecond * 60) );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to seconds.
         * @return  The internal value converted to seconds.
         ******************************************************************************************/
        inline
        int           InSeconds()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    static_cast<int>(ticks /    TimeLib::NanosPerSecond);
            #elif defined( _WIN32 )
                return    (int) ( ticks /    TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to milliseconds.
         * @return  The internal value converted to milliseconds.
         ******************************************************************************************/
        inline
        int64_t  InMillis()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    ticks /    TimeLib::NanosPerMillisecond;
            #elif defined( _WIN32 )
                return    ( ticks * 1000 /   TIME.ticksPerSecond );

            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to microseconds.
         * @return  The internal value converted to microseconds.
         ******************************************************************************************/
        inline
        int64_t  InMicros()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    ticks /    TimeLib::NanosPerMicrosecond;
            #elif defined( _WIN32 )
                return    ( ticks * 1000000 /   TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Converts the internal value to nanoseconds.
         * @return  The internal value converted to nanoseconds.
         ******************************************************************************************/
        inline
        int64_t  InNanos ()    const
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                return    ticks;
            #elif defined( _WIN32 )
                return    (int64_t) ( ticks * 1000000000.0 /   (double) TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
        }

        /** ****************************************************************************************
         * Returns 1 divided by internal value in seconds, hence the number of Hertz that this
         * object represents when interpreted as a time span.
         *
         * @param nDigitsPrecision    Number of digits that the return value will be rounded to.
         *                            Defaults to -1 which means no rounding.
         * @return     double value representing the frequency in hertz.
         ******************************************************************************************/
        ALIB_API
        double       InHertz( int nDigitsPrecision= -1 ) const;

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param days  The time span to set in days.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromDays   ( int           days )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=                   days *    TimeLib::NanosPerDay   ;
            #elif defined( _WIN32 )
                ticks= (TimeLib::TRaw) (  ((int64_t) days) * 24 * 60 * 60 *  TIME.ticksPerSecond + 1  );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param hours  The time span to set in hours.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromHours  ( int           hours )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=                   hours *    TimeLib::NanosPerHour   ;
            #elif defined( _WIN32 )
                ticks= (TimeLib::TRaw) (  ((int64_t) hours) * 60 * 60 *  TIME.ticksPerSecond    + 1 );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param mins  The time span to set in minutes.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromMinutes( int           mins )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=                   mins *    TimeLib::NanosPerMinute   ;
            #elif defined( _WIN32 )
                ticks= (TimeLib::TRaw) (  ((int64_t) mins) * 60 *  TIME.ticksPerSecond  + 1  );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param secs  The time span to set in seconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromSeconds( int           secs )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=                   secs *    TimeLib::NanosPerSecond   ;
            #elif defined( _WIN32 )
                ticks= (TimeLib::TRaw) (  ((int64_t) secs) *  TIME.ticksPerSecond  + 1  );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in milliseconds.
         * @param millis    The time span to set in milliseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromMillis ( int64_t  millis )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=                   millis *    TimeLib::NanosPerMillisecond   ;
            #elif defined( _WIN32 )
                ticks= (TimeLib::TRaw) (  ((int64_t) millis) *  TIME.ticksPerSecond / 1000   + 1 );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in microseconds.
         * @param micros  The time span to set in microseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&       FromMicros ( int64_t  micros )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=                   micros *    TimeLib::NanosPerMicrosecond ;
            #elif defined( _WIN32 )
                ticks= (TimeLib::TRaw) (  ((int64_t) micros) *  TIME.ticksPerSecond / 1000000  + 1 );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in nanoseconds.
         * @param nanos  The time span to set in nanoseconds.
         * @return   \c *this to allow concatenated calls.
         ******************************************************************************************/
        inline
        Ticks&     FromNanos  ( int64_t  nanos )
        {
            #if defined (__GLIBCXX__) || defined(__APPLE__)
                ticks=    nanos;
            #elif defined( _WIN32 )
                ticks=  (TimeLib::TRaw) (  nanos / 1000000000.0 *  (double) TIME.ticksPerSecond );
            #else
                #pragma message ("Unknown Platform in file: " __FILE__ )
            #endif
            return *this;
        }

        #if ALIB_MODULE_STRINGS
            /** ************************************************************************************
             * Formats the point in time represented by this instance into an AString using the given
             * pattern. The token definitions of the format string is equal to those found in
             * \ref TicksCalendarTime.
             *
             * @param format  The format pattern string.
             * @param target  A reference to an AString that gets the result of the format processing
             *                appended.
             * @returns \p target (for convenience).
             **************************************************************************************/
            ALIB_API
            AString&  Format( const String& format, AString& target );
        #endif

    // #############################################################################################
    // Conversion to time platform/language specific values
    // #############################################################################################
        #if defined (__GLIBCXX__) || defined(__APPLE__)
            /** ************************************************************************************
             * Converts the internal value into seconds since January 1, 1970, 00:00:00 GMT.
             * The conversion is dependent on time zone and system clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  GLib specific. For Windows OS see #InSystemTime and #InFileTime.
             *
             * @return Seconds in the epoch.
             **************************************************************************************/
            ALIB_API  time_t  InEpochSeconds()    const;

            /** ************************************************************************************
             * Sets the internal value by converting the given seconds since January 1,
             * 1970, 00:00:00 GMT. The conversion is dependent on time zone and system clock
             * setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  GLib specific. For Windows OS see #SetFromSystemTime and #SetFromFileTime.
             *
             * @param epochSeconds The milliseconds in the epoch to convert.
             **************************************************************************************/
            ALIB_API  void    SetFromEpochSeconds ( time_t epochSeconds );
        #endif // no else here (doxygen)!

        #if defined (_WIN32)
            /** ************************************************************************************
             * Converts the internal value into windows specific file time, a 64-bit value that
             * represents the number of 100 nanosecond intervals that have elapsed since
             * 12:00 A.M. January 1, 1601 UTC. The conversion is dependent on time zone and system
             * clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  Microsoft Windows specific. On other systems see #InEpochSeconds.
             *
             * @param result Pointer to a FILETIME struct to store the result in.
             **************************************************************************************/
            ALIB_API  void    InFileTime( LPFILETIME result ) const;

            /** ************************************************************************************
             * Converts the internal value into windows specific file time, a 64-bit value that
             * represents the number of 100 nanosecond intervals that have elapsed since
             * 12:00 A.M. January 1, 1601 UTC. The conversion is dependent on time zone and system
             * clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  Microsoft Windows specific. On other systems see #InEpochSeconds.
             *
             * @param result A reference to a LARGE_INTEGER struct to store the result in.
             **************************************************************************************/
            ALIB_API  void    InFileTime( ULARGE_INTEGER& result ) const;

            /** ************************************************************************************
             * Sets the internal value to represent the point in time provided as "file time".
             * File time is a 64-bit value that represents the number of 100 nanosecond intervals
             * that have elapsed since 12:00 A.M. January 1, 1601 UTC.
             * The conversion is dependent on time zone and system clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  Microsoft Windows specific. On other systems see #SetFromEpochSeconds.
             *
             * @param fileTime The file time to set.
             **************************************************************************************/
            ALIB_API  void    SetFromFileTime( const FILETIME& fileTime );

            /** ************************************************************************************
             * Sets the internal value to represent the point in time provided as "file time".
             * File time is a 64-bit value that represents the number of 100 nanosecond intervals
             * that have elapsed since 12:00 A.M. January 1, 1601 UTC.
             * The conversion is dependent on time zone and system clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  Microsoft Windows specific. On other systems see #SetFromEpochSeconds.
             *
             * @param fileTime The file time to set.
             **************************************************************************************/
            ALIB_API  void    SetFromFileTime( const ULARGE_INTEGER& fileTime );

            /** ************************************************************************************
             * Converts the internal value into windows specific system time struct.
             * The conversion is dependent on time zone and system clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  Microsoft Windows specific. On other systems see #SetFromEpochSeconds.
             *
             * @param result   Pointer to a SYSTEMTIME struct to store the result in.
             * @param timezone Denote if the time that is returned should be local or UTC.
             *                 Defaults to \c TimeZone::Local.
             * @return Seconds in the epoch.
             **************************************************************************************/
            ALIB_API  void    InSystemTime( LPSYSTEMTIME result, lang::Timezone timezone =lang::Timezone::Local ) const;

            /** ************************************************************************************
             * Sets the internal value to represent the point in time provided as windows system
             * time. The conversion is dependent on time zone and system clock setting of the host.
             * Changes in the system clock setting of the host are reflected only with explicit
             * invocation of \alib{time,TimeLib::SyncClock} on the static library singleton.
             * \note  Microsoft Windows specific. On other systems see #SetFromEpochSeconds.
             *
             * @param systemTime Pointer to a SYSTEMTIME struct that holds the system time to set.
             * @param timezone Denote if the time is interpreted as local or UTC.
             *                 Defaults to \c TimeZone::Local.
             **************************************************************************************/
            ALIB_API  void    SetFromSystemTime( const SYSTEMTIME& systemTime, lang::Timezone timezone= lang::Timezone::Local );
        #endif


};

}} // namespace lib::time

/** Type alias name in namespace #aworx. */
using     Ticks=                aworx::lib::time::Ticks;

}  // namespace aworx


#if ALIB_MODULE_BOXING
//! @cond NO_DOX
namespace aworx { namespace lib { namespace boxing  {
ALIB_BOXING_SPECIALIZE_CB_CUB( aworx::lib::time::Ticks , aworx::lib::time::Ticks , false, true );
inline  void  T_Boxing<aworx::lib::time::Ticks>::Boxing(Box& box, const aworx::lib::time::Ticks& o)
{
    box.data.Value= static_cast<boxvalue>( o.Raw() );
    box.data.Length= 0;
}

inline  aworx::lib::time::Ticks T_Boxing<aworx::lib::time::Ticks>::Unboxing( const Box& box )
{
    return aworx::lib::time::Ticks( static_cast<time::TimeLib::TRaw>( box.data.Value ) );
}
}}}
//! @endcond

namespace aworx { namespace lib { namespace time {
/**
 * Implementation of \ref aworx::lib::strings::boxing::IFormat "IFormat" for boxable type
 * <c>Ticks*</c>.<br>
 * Writes the content of \p box (which is of type \b %Ticks*) to the given \b %AString
 * object \p target using a local instance of class \b %TicksCalendarTime and its method
 * \ref aworx::lib::time::TicksCalendarTime::Format "TicksCalendarTime::Format".
 *
 */
class IFormat_TTicks: public strings::boxing::IFormat, public Singleton<IFormat_TTicks>
{
    /**
     * Interface implementation.
     * @param box   The box that the interface was invoked on.
     * @param formatSpec The specification of the format (type specific)
     * @param target     The AString object receiving the formatted string.
     */
    ALIB_API
    virtual void Invoke( const Box& box, const String& formatSpec, AString& target )                       override;
};

}}} // namespace [aworx::lib::time]
#endif //ALIB_MODULE_BOXING


#endif // HPP_ALIB_TIME_TICKS
