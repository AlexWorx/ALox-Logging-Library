// #################################################################################################
//  ALib - A-Worx Utility Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

using System;
using System.Diagnostics;
using System.Globalization;

/** ************************************************************************************************
 * This namespace of the A-Worx Library holds classes that are providing methods for
 * measuring time spans and conversion of dates and time values.
 **************************************************************************************************/
namespace cs.aworx.lib.time  {

/** ************************************************************************************************
 * This class provides an interface into system dependent timer values (usually 64 bit
 * tick counters) that we call *ticks*. Ticks and this class allow to store and calculate time
 * values in an efficient and highly accurate way.
 *
 * Ticks generated by this class can be added and subtracted:
 *
 * - Subtraction generates a *span value in ticks*
 * - *Span value in ticks* can be added to themselves safely
 * - *Span value in ticks* can be added to ticks safely
 *
 * Conversion functions to milliseconds, microseconds and nanoseconds accept ticks and span
 * values in ticks in the same manner.
 *
 * As Ticks are system dependent, they should not be stored in system independent data files or
 * otherwise shared between systems. In general such values should only be used by methods of
 * this class and class
 * \ref cs::aworx::lib::time::TickWatch "TickWatch".
 *
 * The resolution and accuracy of the values is platform dependent. Especially nanoseconds are
 * deemed to be not accurate and above 100 ns (this was written and fact in 2013).
 **************************************************************************************************/
public class Ticks
{
    // #############################################################################################
    // static fields and methods
    // #############################################################################################
        /** ****************************************************************************************
         * The Frequency of the internal tick timer. The Frequency gives you an indication of the
         * accuracy of the time (At least if the underlying system library is reasonably well working in
         * this respect). And this is the reason why it is published with this field. This value does
         * not necessarily correspond to the number of ticks per second that you get from this classes
         * Raw method.
         ******************************************************************************************/
        public  static readonly        long             InternalFrequency;

        /** ****************************************************************************************
         * The time (in ticks) when the ticker library containing the ticker (ALIB) was initialized.
         * This might be useful to measure the time since the process was started.
         ******************************************************************************************/
        public  static readonly        Ticks            CreationTime;

        /// The DateTime.Now.Ticks at 1/1/1970 0:00:00.  */
        private static readonly        long             dateTimeTicks19700101;

        /// A stopwatch started when static constructor is invoked.  */
        private static readonly        Stopwatch        creationTimeStopWatch;

        /// A conversion factor between stopwatch ticks and DateTimeTicks.  */
        private static readonly        double           convSWToDT;

        static Ticks()
        {
            // This static constructor is called once at the beginning of the life-cycle of this library.
            // We use it to create
            //  a) a reference counter in DateTime ticks initialized to now and
            //  b) a Stopwatch object that we are starting.
            // Within the Now() function of this class, we are then converting the Stopwatch measurement
            // and add it to the initial timer.
            // So, why are we doing this instead of just using DateTime.Now in method Now()?
            // The answer is: DateTime.Now is very inefficient, because it creates a heap object that is
            // then disposed right away. This version of Now() is around 15 times faster on the compiling platform.

            CreationTime=            new Ticks( DateTime.Now.Ticks );

            // for the conversion in "millis since the epoch" we need the reference DayTime ticks
            dateTimeTicks19700101=  (new DateTime( 1970, 1, 1, 0, 0, 0 )).Ticks;

            creationTimeStopWatch=   new Stopwatch();
            creationTimeStopWatch.Start();

            InternalFrequency=       Stopwatch.Frequency;

            // conversion factor StopWatch to DateTime is:
            //    10 million nanoseconds (the DateTime ticks per second) / by frequency of stopwatch
            convSWToDT=    10000000d / (double) InternalFrequency;
        }

    // #############################################################################################
    // Private fields
    // #############################################################################################

        /// The value.  */
        protected                      long             ticks;

        /**  */
        /// A temporary ticks object. used for as a return value.  */
        protected                      Ticks            tempTicks;


    // #############################################################################################
    // Constructors
    // #############################################################################################

        /** ********************************************************************************************
         * Creates a Ticks instance representing the point in time when this constructor was invoked.
         ******************************************************************************************/
        public                  Ticks( )                {    Set();                }

        /** ****************************************************************************************
         * Creates a Ticks instance representing the same point in time or time span as the instance provided.
         * @param copy  The instance to copy the ticks value from.
         ******************************************************************************************/
        public                  Ticks( Ticks copy )     {    ticks=  copy.ticks;     }

        /** ****************************************************************************************
         * Creates a Ticks instance representing a given time point or time span in ticks.
         * @param ticks  The value to copy into this.
         ******************************************************************************************/
        public                  Ticks( long ticks )     {    this.ticks=  ticks;     }


    // #############################################################################################
    // Interface
    // #############################################################################################

        /** ****************************************************************************************
         * Sets the actual point in time as the value of this instance.
         ******************************************************************************************/
        public void             Set()
        {
            // same as DateTime.Now.Ticks, but much faster
            #if !ALOX_WP71
                ticks=  CreationTime.ticks +  (long)  ( ((double) creationTimeStopWatch.ElapsedTicks) * convSWToDT ) ;
            #else
                value=  DateTime.Now.Ticks;
            #endif
        }

        /** ****************************************************************************************
         * Sets the point in time or time span represented by this instance to the value represented by
         * the given Ticks instance.
         * @param other  The Ticks object to retrieve the new ticks value from.
         ******************************************************************************************/
        public void             Set( Ticks other )      {    this.ticks=            other.ticks;    }

        /** ****************************************************************************************
         * Sets this objects' value to the value specified in ticks.
         * @param value  The ticks value to set
         ******************************************************************************************/
        public void             SetRaw( long value )    {    this.ticks=            value;            }

        /** ****************************************************************************************
         * Gets the internally stored system dependent time in ticks.
         * @return The internal value
         ******************************************************************************************/
        public long             Raw()                   {    return         ticks;                    }

        /** ****************************************************************************************
         * Adds the point in time or time span represented by the given Ticks instance to this instance.
         * @param other  The Ticks object to add the ticks from.
         ******************************************************************************************/
        public void             Add( Ticks other )      {    this.ticks+=        other.ticks;    }

        /** ****************************************************************************************
         * Adds the point in time or time span represented by the given Ticks instance to this instance.
         * @param value  The ticks to add.
         ******************************************************************************************/
        public void             Add( long value )       {    this.ticks+=        value;    }

        /** ****************************************************************************************
         * Subtracts the point in time or time span represented by the given Ticks instance from this instance.
         * @param other  The Ticks object to subtract the ticks from.
         ******************************************************************************************/
        public void             Sub( Ticks other )      {    this.ticks-=        other.ticks;    }

        /** ****************************************************************************************
         * Subtracts the point in time or time span represented by the given Ticks instance from this instance.
         * @param value  The ticks to subtract.
         ******************************************************************************************/
        public void             Sub( long value )       {    this.ticks-=        value;    }


    // #############################################################################################
    // Interface Age, Since
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current system time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * Note: Attention: The object returned is a temporary object, deemed to be reused by other
         * interface methods of this instance. Therefore, it must be used only until subsequent
         * method invocations on this instance are performed (hence, also not thread safe!)
         * Use #Age(Ticks result) to provide a dedicated external result instance.
         *
         * @return The age of this instance, stored in a temporary object, not thread safe object.
         ******************************************************************************************/
        public     Ticks    Age( )
        {
            if (tempTicks == null )
                tempTicks= new Ticks( 0L );
            return Age( tempTicks );
        }

        /** ****************************************************************************************
         * Returns the time span between value represented by this instance and the current  time.
         * If the internal value represents a historic point in time, the result is positive.
         *
         * @param result    The Ticks object to store the result in. If null, this is created.
         *
         * @return The age of this instance, stored in the given or created object.
         ******************************************************************************************/
        public     Ticks    Age( Ticks result )
        {
            if ( result == null )
                result= new Ticks();
            else
                result.Set();
            result.Sub( this );
            return result;
        }

        /** ****************************************************************************************
         * Returns the time span between the value represented by this instance and the given TickWatch.
         * If the given TickWatch represents an earlier point in time, the result is positive.
         *
         * Note: Attention: The object returned is a temporary object, deemed to be reused by other
         * interface methods of this instance. Therefore, it must be used only until subsequent
         * method invocations on this instance are performed (hence, also not thread safe!)
         * Use #Since(Ticks result, Ticks result) to provide a dedicated external result instance.
         *
         * @param olderTime    The value to compare this instance with
         *
         * @return The calculated time span, stored in a temporary object, not thread safe object
         ******************************************************************************************/
        public     Ticks    Since( Ticks olderTime )
        {
            if (tempTicks == null )
                tempTicks= new Ticks( 0L );
            return Since( olderTime, tempTicks );
        }

        /** ****************************************************************************************
         * Returns the time span between the value represented by this instance and the given TickWatch.
         * If the given TickWatch represents an earlier point in time, the result is positive.
         *
         * @param olderTime  The value to compare this instance with
         * @param result     The Ticks object to store the result in. If null, this is created.
         * @return The calculated time span, stored in the given or created object.
         ******************************************************************************************/
        public     Ticks    Since( Ticks olderTime, Ticks result )
        {
            if ( result == null )
                result= new Ticks( this );
            else
                result.Set( this );

            result.Sub( olderTime );
            return    result;
        }

        /** ****************************************************************************************
         * Determines if this objects' age is higher than a given time span.
         *
         * @param waitTime  A \b %Ticks object representing a time span.
         * @return  \c true if the given \b %Ticks object representing a time span is smaller
         *          or equal than our age. \c false otherwise.
         ******************************************************************************************/
        public bool         HasElapsed( Ticks waitTime )
        {
            return Age().Raw()  >=  waitTime.Raw();
        }


    // #############################################################################################
    // Conversion to/from time values (nanoseconds, milliseconds, microseconds, seconds)
    // #############################################################################################

        /** ****************************************************************************************
         * Converts the internal value to days.
         * @return The internal value converted to days.
         ******************************************************************************************/
        public    long          InDays()                { return    ticks /  8640000000000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to hours.
         * @return The internal value converted to hours.
         ******************************************************************************************/
        public    long          InHours()               { return    ticks /   360000000000000L;    }

        /** ****************************************************************************************
         * Converts the internal value to minutes.
         * @return The internal value converted to minutes.
         ******************************************************************************************/
        public    long          InMinutes()             { return    ticks /    6000000000000L;     }

        /** ****************************************************************************************
         * Converts the internal value to seconds.
         * @return The internal value converted to seconds.
         ******************************************************************************************/
        public    long          InSeconds()             { return    ticks /         10000000L;     }

        /** ****************************************************************************************
         * Converts the internal value to milliseconds.
         * @return The internal value converted to milliseconds.
         ******************************************************************************************/
        public    long          InMillis()              { return    ticks /            10000L;     }

        /** ****************************************************************************************
         * Converts the internal value to microseconds.
         * @return The internal value converted to microseconds.
         ******************************************************************************************/
        public    long          InMicros()              { return    ticks /               10L;     }

        /** ****************************************************************************************
         * Converts the internal value to nanoseconds.
         * @return The internal value converted to nanoseconds.
         ******************************************************************************************/
        public    long          InNanos    ()           { return    ticks *              100L;     }

        /** ****************************************************************************************
         * Returns 1 divided by internal value in seconds, hence the number of Hertz that this Ticks
         * object represents when interpreted as a time span.
         *
         *
         * @param nDigitsPrec     Number of digits that the return value will be rounded to.
         *                        Defaults to -1 which means no rounding.
         *
         * @return  A double value representing the frequency in hertz.
         ******************************************************************************************/
        public    double        InHertz    ( int nDigitsPrec= -1 )
        {
            // check
            if ( ticks == 0)
                return 0.0;

            // calc hertz
            double hz= 10000000d / ticks;

            // no rounding? that's it
            if ( nDigitsPrec < 0 )
                return hz;

            // round
            double mag= Math.Pow( 10, nDigitsPrec );
            return ( (int) ( hz * mag + ( hz < 0 ? -0.5 : 0.5 )) ) / mag;
        }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in days.
         * @param days   The time span to set in days.
         ******************************************************************************************/
        public    void          FromDays   ( long days )     { ticks=    days * 8640000000000000L;  }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in hours.
         * @param hours   The time span to set in hours.
         ******************************************************************************************/
        public    void          FromHours  ( long hours )    { ticks=    hours*  360000000000000L;  }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in minutes.
         * @param mins   The time span to set in minutes.
         ******************************************************************************************/
        public    void          FromMinutes( long mins )     { ticks=    mins *    6000000000000L;  }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in seconds.
         * @param secs   The time span to set in seconds.
         ******************************************************************************************/
        public    void          FromSeconds( long secs )     { ticks=    secs *         10000000L;  }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in milliseconds.
         * @param millis     The time span to set in milliseconds.
         ******************************************************************************************/
        public    void          FromMillis ( long millis )   { ticks=    millis *          10000L;  }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in microseconds.
         * @param micros   The time span to set in microseconds.
         ******************************************************************************************/
        public    void          FromMicros ( long micros )   { ticks=    micros *           10L;    }

        /** ****************************************************************************************
         * Sets the internal value to a time span provided in nanoseconds.
         * @param nanos   The time span to set in nanoseconds.
         ******************************************************************************************/
        public    void          FromNanos  ( long nanos )    { ticks=    nanos /           100L;    }


    // #############################################################################################
    // Conversion to platform/language specific time objects
    // #############################################################################################

        /** ****************************************************************************************
         * Converts the internal value into milliseconds since January 1, 1970, 00:00:00 GMT.
         * The conversion is dependent on time zone and system clock setting of the host.
         * @return  Milliseconds in the epoch.
         ******************************************************************************************/
        public    long          InEpochMillis()              { return ( ticks - dateTimeTicks19700101 ) /      10000L;    }

        /** ****************************************************************************************
         * Sets the internal value by converting the given milliseconds since January 1, 1970, 00:00:00 GMT.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @param epochMillis The milliseconds in the epoch to convert.
         ******************************************************************************************/
        public    void          SetFromEpochMillis( long epochMillis ) { ticks= dateTimeTicks19700101 + ( epochMillis * 10000L); }


        /** ****************************************************************************************
         * Converts the internal value to DateTime ticks.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @return  The converted DateTime compatible ticks value.
         ******************************************************************************************/
        public     long         InDotNetDateTimeTicks()      { return ticks;    }

        /** ****************************************************************************************
         * Sets the internal value by converting the given DateTime.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @param dateTime A DateTime instance to read and convert the ticks from.
         ******************************************************************************************/
        public     void         SetFromDotNetDateTime( DateTime dateTime )    { ticks= dateTime.Ticks;    }

        /** ****************************************************************************************
         * Converts the internal value to DateTime.
         * The conversion is dependent on time zone and system clock setting of the host.
         *
         * @return  A corresponding DateTime object.
         ******************************************************************************************/
        public     DateTime     InDotNetDateTime()           { return new DateTime ( ticks );    }

}


/** ************************************************************************************************
 *  This class encapsulates a system dependent time value (Ticks) and provides some basic
 *  interface for measuring time spans, including multiple samples and their average.
 *
 *  The interface does provide nanosecond versions the methods. However, the internal resolution
 *  of the used timer is system dependent and might be lower than nanoseconds.
 **************************************************************************************************/
public class TickWatch
{
    // #############################################################################################
    // Internal fields
    // #############################################################################################

        /// The value.
        protected        Ticks          ticks                                      =new Ticks( 0L );

        /// The number of samples performed.
        protected        int            cntSamples                                              = 0;

        /// The sum of the samples times.
        protected        Ticks          sum                                        =new Ticks( 0L );

        /// A temporary Ticks used as a return value
        protected        Ticks          tempTicks;


    // #############################################################################################
    // Constructors
    // #############################################################################################

        /** ****************************************************************************************
         * Creates a TickWatch representing the current point in time.
         ******************************************************************************************/
        public              TickWatch    ()                  {    Reset();                }

        /** ****************************************************************************************
         * Creates a TickWatch as a copy of another TickWatch.
         *
         * @param copy  The instance to copy value from.
         ******************************************************************************************/
        public              TickWatch    ( TickWatch copy )
        {
            ticks       .Set( copy.ticks );
            sum         .Set( copy.sum );
            cntSamples= copy.cntSamples;
        }

    // #############################################################################################
    // Interface Get/Set/Reset
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the internally stored value.
         * @return  The internally stored value in ticks..
         ******************************************************************************************/
        public    Ticks     GetStartTime()           { return ticks;         }

        /** ****************************************************************************************
         * Sets the internal value to current system time to 'now'.
         ******************************************************************************************/
        public    void      Start()                  { ticks.Set();          }

        /** ****************************************************************************************
         * Sets the internal start time value.
         * @param t     The value.
         ******************************************************************************************/
        public    void      SetStartTime( Ticks t )  { ticks.Set( t );       }


        /** ****************************************************************************************
         * Sets the internal value to current system time and clears existing sum and quantity of
         * samples.
         ******************************************************************************************/
        public     void     Reset()                  { sum.SetRaw( 0L ) ; cntSamples= 0;  Start(); }


    // #############################################################################################
    // Interface to Measurement
    // #############################################################################################

        /** ****************************************************************************************
         * Returns the time span between the current system time and the internal reference value.
         * In addition this value is added to the sum of sample times and the sample counter is
         * increased by one. Lastly the internal reference value is set to now. Therefore, a
         * subsequent call to this function would measure the time span from this call to this
         * subsequent call (if the internal reference value was not set differently meanwhile).
         * Other interface methods dealing with samples are #GetSampleCnt, #GetCumulated and
         * #GetAverage.
         *
         * @return  The time difference between the current system time and the internal reference value.
         ******************************************************************************************/
        public         Ticks    Sample    ()
        {
            if (tempTicks == null )
                tempTicks= new Ticks( 0L );

            cntSamples++;
            long old=    ticks.Raw();
            ticks.Set();
            long  diff=  ticks.Raw() - old;

            tempTicks.SetRaw( diff );
            sum.Add( diff );

            return tempTicks;
        }

        /** ****************************************************************************************
         * Returns the number of calls to #Sample since this instance was created or #Reset was
         * invoked.
         * @return The number of samples taken.
         ******************************************************************************************/
        public         int    GetSampleCnt()            { return cntSamples; }

        /** ****************************************************************************************
         * Returns the cumulated length of all samples taken since this instance was created or cleared.
         * Note: the object returned will be reused in subsequent calls to this method. Hence, previously
         * returned values will be overwritten!
         *
         * @return The cumulated length of all samples taken since the last reset.
         ******************************************************************************************/
        public        Ticks    GetCumulated()           { return sum; }

        /** ****************************************************************************************
         * Returns the average length of all samples since this instance was created or reset.
         * If no measurement was performed, the result value will be set to 0 ticks.
         *
         * Note: Attention: The object returned is a temporary object, deemed to be reused by other
         * interface methods of this instance. Therefore, it must be used only until subsequent
         * method invocations on this instance are performed (hence, also not thread safe!)
         * Use #GetAverage(Ticks result) to provide a dedicated external result instance.
         *
         *
         * @return  The average length of all samples taken since the last reset.
         ******************************************************************************************/
        public        Ticks    GetAverage()
        {
            if (tempTicks == null )
                tempTicks= new Ticks( 0L );
            return new Ticks( cntSamples== 0 ? 0L     :    (sum.Raw() / cntSamples) );
        }

        /** ****************************************************************************************
         * Returns the average length of all samples since this instance was created or reset.
         * If no measurement was performed, the result value will be set to 0 ticks.
         *
         * @param result   An object to store the result in. If not provided (null), a result
         *                 object is created.
         *
         * @return The average sample time within the given or created object.
         ******************************************************************************************/
        public        Ticks    GetAverage( Ticks result )
        {
            if ( result == null )
                result= new Ticks();

            result.SetRaw( cntSamples== 0 ? 0L   :    (sum.Raw() / cntSamples) );
            return  result;
        }


    // #############################################################################################
    // Conversion to time platform/language specific objects
    // #############################################################################################

        /** ****************************************************************************************
         * Returns a  String that represents this object.
         * @return  A String that represents this object.
         ******************************************************************************************/
        public override String        ToString()
        {
            return  ticks.InDotNetDateTime().ToString( CultureInfo.InvariantCulture );
        }
}

} // namespace / EOF
