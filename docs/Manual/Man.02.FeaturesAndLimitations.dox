/// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page man_features_and_limitations     02 - Features and Limitations

### Current Features ###

- Available for C++ 11,  C# (.Net, Windows Phone) and Java
  (with Android support and extensions).

- **Open source**, MIT License.
- Jump-start **tutorials** for [ALox for C++](http://alexworx.github.io/ALox-Logging-Library/cpp_ref/cpptutorial.html),[ALox for C#](http://alexworx.github.io/ALox-Logging-Library/cs_ref/cstutorial.html) and [ALox for Java](http://alexworx.github.io/ALox-Logging-Library/java_ref/javatutorial.html)).

- **Auto-configuration** (if not configured by your code) based on OS (GNU/Linux, Windows) and **detecting IDE** (VStudio, Eclipse, QTCreator, etc.). Minimal intrusiveness in respect to *cluttering* your code and what you need to make it really work.

- Formatted, **colorful, configurable log output** with support for ANSI compatible consoles and Windows OS consoles.

- Log lines **'clickable' in IDE** to jump to the corresponding source code line (depending on IDE).

- Automatic collection of **meta information** like time stamp, time-difference to previous log, executing thread or executing source scope information (platform/language dependend).

- **Hierarchical 'Log-Domains'**, (like for example "MYAPP/UI", "MYAPP/DATABASE" that allow the classification of different <em>Log Statements</em> into user defined topics. Verbosity is controlled per domain to allow the programmer to concentrate on the area of current interest.

- Defaulting 'Log-Domains' for **source scopes**, like *file*, *class* or *method*, which allows to omit the log-domain parameter from the <em>Log Statements</em> (again: leads to short, clean and readable <em>Log Statements</em>).

- Defaulting 'Log-Domains' for **thread scopes**, which allows to control the verbosity of the log output on a per thread basis.

- Support for **CMake**, **Eclipse**, **Visual Studio**, **QT Creator**, **Mono Develop** in combination with **GNU/Linux**, **Windows**, **Windows Phone** and **Android**. (Windows Phone in current versions not tested any more). Porting to other platforms should be easy.

- Very **fast** to minimize runtime overhead of logging (We just broke our former record and did **one million log lines in a second**, including meta information. This was of-course the C++ version doing release logging on release executable).

- Automatic removal, aka **'pruning'**,  of *debug-log* statements from release code mostly without the need of preprocessor if/endif code  cluttering. Optionally also automatic pruning of *release-log* statements. (In Java: implemented using [Proguard](http://proguard.sourceforge.net), with provision of ready to use configuration files.

- Multiple **parallel log streams** with different \e Verbosity, e.g. for logging to the console and in parallel into a file.

- **Extensible** with own loggers, which enables dedicated "data drains" (e.g. databases or Internet services) and custom output formatting. ALox provides a simple programming interface and internal architecture that is easy to learn, not overloaded by 'factories' and 'factory factories' ;-)

- Logging of <b>arbitrary objects</b> which means the whole ALox architecture builds on logging 'objects' instead of just message strings. Only the implementation decides whether an object is - and if yes, how - an object is converted into a human readable string.

- Scope dependent **Log Data** to add debug variables that automatically get pruned like the debug-logging statements are.

- **Conditional logging** (similar to assertions).

- **Log Once** to restrict a log message or a set of log messages to appear only once (or up to n-times).

- Automatic (OK, half-automatic :-) mapping of thread IDs to **readable thread names**

- **LogTools** (in C# and Java) for

    - Recursive **logging of complex types** with one line of code using *class inspection/reflection*. Variable recursion depth and detection of cyclic references.
    - Logging **Exceptions** (recursively with inner exceptions)
    - Logging **XML trees**

- C++ version accepts arbitrary **3rd party string types**. No need to convert, e.g. a *QString* before logging it although ALox is not built on QT! This goal was reached by underlying A-Worx utility library *ALib* (open source, MIT License) which greatly [solved that problem](http://alexworx.github.io/ALox-Logging-Library/cpp_ref/namespaceaworx_1_1lib_1_1strings.html) using some *template meta programming* to relieve us from the (disastrous) string mix in the C++ world.
  On the same token, conversion of **user defined types** to logable (string) objects is supported. After implementing the conversion once, you can just throw your custom types into ALox <em>Log Statements</em>, even as a part of a concatenated log message.

- and finally: ALox is under **continuous development**. You're invited to contribute!




### Future work... and today's limitations ###

- Plug-ins for IDEs implementing dedicated ALox log output windows (planned is QT Creator).

- File loggers (Well, there is one, but this is very basic still)

- HTTP/SOAP/REST/Email loggers (send us your proposals for the right standards/backends to support first.
  Or better: Contribute us your source)

- Thread tools for analysis and assertions

- More on performance logging

<p>

--------------------------------------------------------------------
<center>Next chapter: \ref man_alox_terminology </center> <center> \ref manual "Back to index" </center>


*/
