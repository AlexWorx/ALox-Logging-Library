/// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2017 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_man_features_and_limitations     02 - Features and Limitations

### Current Features ###

- Available for <b>C++</b> 11 (GNU/Linux, Windows OS, macOS),  <b>C#</b> (.Net, Windows, Linux, Microsoft, Mono ) and <b>Java</b>
  (with Android support and extensions).

- <b>Free software</b>, published under Boost Software License.

- Jump-start **tutorials** for [ALox for C++](http://alexworx.github.io/ALox-Logging-Library/cpp_ref/alox_cpp_tutorial.html),[ALox for C#](http://alexworx.github.io/ALox-Logging-Library/cs_ref/alox_cs_tutorial.html) and [ALox for Java](http://alexworx.github.io/ALox-Logging-Library/java_ref/alox_java_tutorial.html), <b>Sample Projects</b> and pre-configured project files for <b>different IDEs</b> and <b>CMake</b>.

- Formatted, **colorful, configurable log output** with support for ANSI compatible consoles and Windows OS consoles.

- Log lines **'clickable' in IDE** to jump to the corresponding source code line (depending on IDE).

- Automatic collection of **meta information** like time stamp, time-difference to previous log, executing thread or executing source scope information (platform/language dependent).

- Automatic removal, aka **'pruning'**,  of *debug-log* statements from release code mostly without the need of pre-processor if/endif code cluttering. Optionally also automatic pruning of *release-log* statements. (In Java: implemented using [Proguard](http://proguard.sourceforge.net), with provision of ready to use configuration files.

- Minimal intrusiveness in respect to *cluttering* your code and what you need to make it really work.

- Use of external configuration (INI-files, command line parameters, environment variables, etc.) which allows developer specific local settings and greatly supports working in teams.

- **Hierarchical 'Log-Domains'**, (like for example "MYAPP/UI", "MYAPP/DATABASE" that allow the classification of different <em>Log Statements</em> into user defined topics. Verbosity is controlled per domain to allow the programmer to concentrate on the area of current interest.

- Defaulting 'Log-Domains' for **source scopes**, like *file*, *class* or *method*, which allows to omit the log-domain parameter from the <em>Log Statements</em> (again: leads to short, clean and readable <em>Log Statements</em>).

- Defaulting 'Log-Domains' for **thread scopes**, which allows to control the verbosity of the log output on a per thread basis.

- Support for **CMake**, **Eclipse**, **Visual Studio**, **QT Creator**, **Mono Develop** in combination with **GNU/Linux**, **Windows**, **Windows Phone** and **Android**. (Windows Phone in current versions not tested any more). Porting to other platforms should be easy.

- Very **fast** to minimize runtime overhead of logging (We just broke our former record and did **one million log lines in a second**, including meta information. This was of-course the C++ version doing release logging on release executable).

- Multiple **parallel log streams** with different \e Verbosity, e.g. for logging to the console and in parallel into a file.

- **Extensible** with own loggers, which enables dedicated "data drains" (e.g. databases or Internet services) and custom output formatting. ALox provides a simple programming interface and internal architecture that is easy to learn, not overloaded by 'factories' and 'factory factories' ;-)

- Logging of <b>arbitrary objects</b> which means the whole ALox architecture builds on logging 'objects' instead of just string messages. Only the logger instances which are attached at runtime, decide how logged data might be converted to human readable strings.

- Scope dependent **Log Data** to add debug variables that automatically get pruned like the debug-logging statements are.

- **Conditional logging** (similar to assertions).

- **Log Once** to restrict a log message or a set of log messages to appear only once (or up to n-times).

- Support for **Recursive logging**, which is the correct execution of log statements during the evaluation of parameters of another log statement.

- Automatic (OK, half-automatic :-) mapping of thread IDs to **readable thread names**

- **LogTools** (in C# and Java) for

    - Recursive **logging of complex types** with one line of code using *class inspection/reflection*. Variable recursion depth and detection of cyclic references.
    - Logging **Exceptions** (recursively with inner exceptions)
    - Logging **XML trees**

- C++ version:
    - Compiled and tested on **GNU/Linux**, **Windows OS** and Apple **macOS**.
    - Accepts **arbitrary objects** to be logged. This goal is reached by using underlying library [ALib Boxing](http://alexworx.github.io/ALox-Logging-Library/cpp_ref/namespaceaworx_1_1lib_1_1boxing.html) which allows to pass 'anything' as a parameter to C++ functions and methods.
    - Accepts **3rd party string types**. This goal is reached by using underlying library [ALib Strings](http://alexworx.github.io/ALox-Logging-Library/cpp_ref/namespaceaworx_1_1lib_1_1strings.html).


- and finally: ALox is under **continuous development**. You're invited to contribute!




### Future work... and today's limitations ###

- Plug-ins for IDEs implementing dedicated ALox log output windows (planned is QT Creator).

- File loggers (Well, there is one, but this is very basic still)

- HTTP/SOAP/REST/Email loggers (send us your proposals for the right standards/backends to support first.
  Or better: Contribute us your source)

- Thread tools for analysis and assertions

- More on performance logging

<p>

--------------------------------------------------------------------
<center>Next chapter: \ref alox_man_terminology </center> <center> \ref manual "Back to index" </center>


*/
