// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

// To link here from sub-dox:  [ALox Configuration Variables](../group__GrpALoxConfigVars.html)

/** @file */ //<- needed for Doxygen include


// the variable 'declarations' to be read by doxygen (doxygen is sometimes funny)
Configuration Variable ALIB_RTE;
Configuration Variable ALIB_LOCALE;
Configuration Variable ALIB_HAS_CONSOLE_WINDOW;
Configuration Variable ALIB_WAIT_FOR_KEY_PRESS;

Configuration Variable ALOX_CODE_PAGE;
Configuration Variable ALOX_CONSOLE_TYPE;
Configuration Variable ALOX_CONSOLE_HAS_LIGHT_BACKGROUND;
Configuration Variable ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES;
Configuration Variable ALOX_LOGGERNAME_AUTO_SIZES;
Configuration Variable ALOX_LOGGERNAME_FORMAT;
Configuration Variable ALOX_LOGGERNAME_FORMAT_DATE_TIME;
Configuration Variable ALOX_LOGGERNAME_FORMAT_TIME_DIFF;
Configuration Variable ALOX_LOGGERNAME_FORMAT_MULTILINE;
Configuration Variable ALOX_LOGGERNAME_MAX_ELAPSED_TIME;
Configuration Variable ALOX_LOXNAME_DOMAIN_SUBSTITUTION;
Configuration Variable ALOX_LOXNAME_LOGGERNAME_VERBOSITY;
Configuration Variable ALOX_LOXNAME_DUMP_STATE_ON_EXIT;
Configuration Variable ALOX_LOXNAME_PREFIXES;
Configuration Variable ALOX_LOXNAME_SOURCE_PATH_TRIM_RULES;
Configuration Variable ALOX_NO_IDE_LOGGER;
Configuration Variable ALOX_USE_SYSTEM_OUT_PRINT;

//##################################################################################################
// GrpALoxConfigVars
//##################################################################################################
/**
@defgroup GrpALoxConfigVars I - Configuration Variables

<b>AWorx Configuration System:</b><p>
Trough the use of ALib class
<b>Configuration</b>
 ([C++] (@ref #aworx::lib::config::Configuration),
  [C#]  (@ref #cs::aworx::lib::config::Configuration),
  [Java](@ref #com::aworx::lib::config::Configuration))
and its plug-in concept, ALox and ALib itself access configuration variables to
manipulate the behavior of the libraries. Configuration data can be provided in configuration files,
by setting environment variables, providing command line parameters or by any custom mechanism.

While this is a reference appendix chapter, for general information refer to
- The documentation of namespace
    <b>[com::|cs::]%aworx::lib::config</b>
        ([C++] (@ref #aworx::lib::config),
        [C#]  (@ref #cs::aworx::lib::config),
        [Java](@ref #com::aworx::lib::config)) and to
- The ALox user manual chapter \ref man_external_configuration.

<br>
<p>

<b>Language/Platform Specifics:</b><p>
Configuration variables listed here, their availability and their possible values might be specific to
the used platform and programming language. If so, their documentation will hint to
such differences.

<b>Default Behavior:</b><p>
ALox and the AWorx library are designed to run fine without setting configuration variables wherever
this is possible.
Nevertheless, these variables provide an additional way to tweak ALox and overwrite the default
behavior.

<b>Boolean Variables:</b><p>
This documentation uses the term <em>boolean variables</em> for those variables that are evaluated
using method
<b>%Configuration::IsTrue</b>
 ([C++] (@ref      #aworx::lib::config::Configuration::IsTrue),
  [C#]  (@ref  #cs::aworx::lib::config::Configuration::IsTrue),
  [Java](@ref #com::aworx::lib::config::Configuration::isTrue)).


\note Setting environment variables is platform specific and is not part of this documentation. To
get an overview, refer to [Wikipedia](https://en.wikipedia.org/wiki/Environment_variable).<p>


@{
*/

// ------------------------------------- ALIB variables -------------------------------------------

/**
\var  ALIB_RTE
\e Declaration:
<b>%ALib::RTE</b>
 ([C++] (@ref      #aworx::lib::ALIB::RTE),
  C#, Java: not applicable).<br>
\e Default Value: \c "auto"<br> 

Overwrites the runtime environment returned by in method
[System::RTE] (@ref #aworx::lib::system::System::RTE).
If this variable is set, then no auto detection of the environment is performed,
unless its value is "auto".


Possible values are:
<center>Value</center>   | <center>Value returned by %System::RTE</center>
- - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
auto                     | Auto detect (same as if variable was not set).
none                     | RuntimeEnvironment::UNKNOWN
eclipse                  | RuntimeEnvironment::ECLIPSE_CDT
qtcreator                | RuntimeEnvironment::QT_CREATOR
vstudio                  | RuntimeEnvironment::VSTUDIO
shell                    | RuntimeEnvironment::SHELL
desktop                  | RuntimeEnvironment::DESKTOP
device                   | RuntimeEnvironment::MOBILE_DEVICE


*/

/**
\var  ALIB_LOCALE
\e Declaration:
<b>%ALib::LOCALE</b>
 ([C++,GLIBC version only] (@ref      #aworx::lib::ALIB::LOCALE),
  C#, Java: not applicable).<br>
\e Default Value: \c "" (empty string)<br> 

This variable is evaluated within [ALIB::Init] (@ref #aworx::lib::ALIB::Init). The behavior is
as follows:
- if not set, the environment variables <em>LANG</em> and <em>LANGUAGE</em> are evaluated and
  if set, their value is passed to glibc method <em>setlocale()</em>.
- if set to "none", the invocation of setlocale() is suppressed.
- if set to anything different than "none", the value is passed to glibc method <em>setlocale()</em>.

The right definition of the locale is important, when using AString methods for converting
multi-byte character strings to wide character strings.
*/


/**
\var  ALIB_HAS_CONSOLE_WINDOW
\e Declaration:
<b>%ALib::ALIB_HAS_CONSOLE_WINDOW</b>
 ([C++] (@ref      #aworx::lib::ALIB::ALIB_HAS_CONSOLE_WINDOW),
  C#, Java: not applicable).<br>
\e Default Value: \c "" (empty string)<br> 

This boolean configuration variable overwrites the value determined in method
\ref  aworx::lib::system::System::HasConsoleWindow "System::HasConsoleWindow".
*/

/**
\var  ALIB_WAIT_FOR_KEY_PRESS
\e Declaration:
<b>%ALib::WAIT_FOR_KEY_PRESS</b>
 ([C++] (@ref      #aworx::lib::ALIB::WAIT_FOR_KEY_PRESS),
  [C#]  (@ref  #cs::aworx::lib::ALIB::WAIT_FOR_KEY_PRESS),
  Java: not applicable).<br>
\e Default Value: \c "" (empty string)<br> 
This boolean variable is evaluated within
<b>%ALIB::Init</b>
 ([C++] (@ref #aworx::lib::ALIB::Init),
  [C#]  (@ref #cs::aworx::lib::ALIB::Init)).

If set, it overrules the default behavior of detecting an appropriate value for field
<b>ALIB::WaitForKeyPressOnTermination</b>
 ([C++] (@ref #aworx::lib::ALIB::WaitForKeyPressOnTermination),
  [C#]  (@ref #cs::aworx::lib::ALIB::WaitForKeyPressOnTermination)).
*/



// -------------------------------------- ALOX variables -------------------------------------------
/**
\var  ALOX_USE_SYSTEM_OUT_PRINT
\e Declaration:
<b>%ALox::USE_SYSTEM_OUT_PRINT</b>
 (C++, C#: not applicable,
 [Java] (@ref  #com::aworx::lox::ALox::USE_SYSTEM_OUT_PRINT))<br>
\e Default Value: \c "false"

This boolean variable is evaluated within the constructor of class
[ConsoleLogger] (@ref #com::aworx::lox::loggers::ConsoleLogger). By default, this class
invokes <em>System.console()</em> to receive a console class object. Only if this fails, the
output is performed using <em>System.out.print()</em>.

Setting this variable, this behavior can be overwritten.

*/


/**
\var  ALOX_CONSOLE_TYPE
\e Declaration:
<b>%ALox::CONSOLE_TYPE</b>
 ([C++]      (@ref #aworx::lox::ALox::CONSOLE_TYPE),
  [C#]   (@ref #cs::aworx::lox::ALox::CONSOLE_TYPE),
  [Java](@ref #com::aworx::lox::ALox::CONSOLE_TYPE))<br>
\e Default Value: \c "default"<br>

Influences the type of console logger to be will be created by method
<b>Log::CreateConsoleLogger</b>
 ([C++] (@ref #aworx::lox::Lox::CreateConsoleLogger),
  [C#]  (@ref #cs::aworx::lox::Lox::CreateConsoleLogger),
  [Java](@ref #com::aworx::lox::Lox::createConsoleLogger)) which is also used by
<b>Log::AddDebugLogger</b>
 ([C++] (@ref #aworx::lox::Log::AddDebugLogger),
  [C#]  (@ref #cs::aworx::lox::Log::AddDebugLogger),
  [Java](@ref #com::aworx::lox::Log::addDebugLogger)).

Possible values are:
<center>Value</center>   | <center>Effect</center>
- - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   Default    | No influence, same as if variable was not set (auto detection mechanism applies).
   Plain      | Plain text \e Logger of type <b>ConsoleLogger</b> ([C++] (@ref #aworx::lox::loggers::ConsoleLogger), [C#]  (@ref #cs::aworx::lox::loggers::ConsoleLogger), [Java](@ref #com::aworx::lox::loggers::ConsoleLogger)) is created.
   Ansi       | A \e Logger of type \b AnsiLogger ([C++] (@ref #aworx::lox::loggers::AnsiLogger), [C#]  (@ref #cs::aworx::lox::loggers::AnsiLogger), [Java](@ref #com::aworx::lox::loggers::AnsiLogger)) is created
   Windows    | In C++, a \e Logger of type [WindowsConsoleLogger] (@ref #aworx::lox::loggers::WindowsConsoleLogger) is created.<br> In C#, a \e Logger of type [ColorConsoleLogger] (@ref #cs::aworx::lox::loggers::ColorConsoleLogger) is created.<br> (It is advisable to use this value when in Windows operating system, while using ANSI for colorful output under Linux/Mono.)<br> In Java, this value is not supported.<br>
   NoQtCreator| Available only in C++: This variable suppresses actions taken by method \b %Lox::CreateConsoleLogger when QTCreator is detected. This should be used when QTCreator is used in combination with CMake because then, unfortunately, QTCreator does not support clickable output. See \ref cppsetup for more information.
*/


/**
\var  ALOX_CONSOLE_HAS_LIGHT_BACKGROUND
\e Declaration:
<b>%ALox::CONSOLE_HAS_LIGHT_BACKGROUND</b>
 ([C++]      (@ref #aworx::lox::ALox::CONSOLE_HAS_LIGHT_BACKGROUND),
  [C#]   (@ref #cs::aworx::lox::ALox::CONSOLE_HAS_LIGHT_BACKGROUND),
  [Java](@ref #com::aworx::lox::ALox::CONSOLE_HAS_LIGHT_BACKGROUND))<br>
\e Default Value: \c "" (empty string)<br>

Evaluated by colorful loggers that dispose about light and dark colors to
adjust their foreground color accordingly. E.g. for instances of class
<b>%AnsiLogger</b>
 ([C++] (@ref #aworx::lox::loggers::AnsiLogger),
  [C#]  (@ref #cs::aworx::lox::loggers::AnsiLogger),
  [Java](@ref #com::aworx::lox::loggers::AnsiLogger)) field
<b>%AnsiLogger::IsBackgroundLight</b>
 ([C++] (@ref #aworx::lox::loggers::AnsiLogger::IsBackgroundLight),
  [C#]  (@ref #cs::aworx::lox::loggers::AnsiLogger::IsBackgroundLight),
  [Java](@ref #com::aworx::lox::loggers::AnsiLogger::isBackgroundLight)) is
set.

If not given, under Windows OS the right value is detected. Otherwise the value
defaults to \b false. In some occasions the
(detected or set) runtime environment might also indicate a default value.

*/



/**
\var  ALOX_NO_IDE_LOGGER
\e Declaration:
<b>%ALox::NO_IDE_LOGGER</b>
 ([C++]      (@ref #aworx::lox::ALox::NO_IDE_LOGGER),
  [C#]   (@ref #cs::aworx::lox::ALox::NO_IDE_LOGGER),
  Java: not applicable)<br>
\e Default Value: \c "false"<br>

Boolean variable that is evaluated in method
<b>Log::AddDebugLogger</b>
 ([C++] (@ref #aworx::lox::Log::AddDebugLogger),
  [C#]  (@ref #cs::aworx::lox::Log::AddDebugLogger)).
If not set, when debugging, an additional \e Logger supporting the log output of the IDE is created.
Such loggers currently are:

- [C#:  CLRDebuggerLogger] (@ref #cs::aworx::lox::loggers::CLRDebuggerLogger)
- [C++: VStudioLogger]     (@ref #aworx::lox::loggers::VStudioLogger)

This variable can be used to suppress this.
*/

/**
\var  ALOX_CODE_PAGE
\e Declaration:
<b>%ALox::CODE_PAGE</b>
 ([C++, Windows only]      (@ref #aworx::lox::ALox::CODEPAGE),
  C#, Java: not applicable)<br>
\e Default Value: \c 65001<br>

Evaluated once in the constructor of class
[WindowsConsoleLogger] (@ref #aworx::lox::loggers::WindowsConsoleLogger).
Overwrites the default value of field
[WindowsConsoleLogger::CodePage] (@ref #aworx::lox::loggers::WindowsConsoleLogger::CodePage).
For possible values refer to
[Microsoft documentation] (https://msdn.microsoft.com/EN-US/library/windows/desktop/dd317756%28v=vs.85%29.aspx).
*/


/**
\var  ALOX_LOGGERNAME_AUTO_SIZES
\e Declaration:
<b>%ALox::AUTO_SIZES</b>
 ([C++]      (@ref #aworx::lox::ALox::AUTO_SIZES),
  [C#]   (@ref #cs::aworx::lox::ALox::AUTO_SIZES),
  [Java](@ref #com::aworx::lox::ALox::AUTO_SIZES))<br>
\e Default Value: none.<br>

This variable is used by \e Loggers of type
<b>%TextLogger</b>
 ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger),
  [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)).
It is read when a \b %TextLogger is registered with a \b %Lox and written back when it is
removed.<br>
This mechanism maintains automatically adjusted tabulator positions across different runs
of a software.
See field
<b>%TextLogger.AutoSizes</b>
 ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger.AutoSizes),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger.AutoSizes),
  [Java](@ref #com::aworx::lox::core::textlogger::TextLogger.autoSizes)) for more information.

Note, that the portion <c>'LOGGERNAME'</c> in the variable name is replaced by ALox
with the value of
<b>%Logger.GetName</b>
  ([C++]      (@ref #aworx::lox::core::Logger::GetName),
   [C#]   (@ref #cs::aworx::lox::core::Logger::GetName),
   [Java](@ref #com::aworx::lox::core::Logger::getName)). This allows to have different sizes for
different \e %Loggers.

There is no need to manually edit the values found in this variable and their values are not
documented here. Consider this variable a 'cookie' that ALox uses to store tabulator width
across sessions. Of-course the information is only stored (and successfully read back with
the next run of a process) when a write-enabled configuration plug-in (e.g. an INI file)
is available.
*/

/**
\var  ALOX_LOGGERNAME_MAX_ELAPSED_TIME
\e Declaration:
<b>%ALox::MAX_ELAPSED_TIME</b>
 ([C++]      (@ref #aworx::lox::ALox::MAX_ELAPSED_TIME),
  [C#]   (@ref #cs::aworx::lox::ALox::MAX_ELAPSED_TIME),
  [Java](@ref #com::aworx::lox::ALox::MAX_ELAPSED_TIME))<br>
\e Default Value: \c "0, limit=59"<br>

Format: <c> ALOX_\<LOGGERNAME\>_MAX_ELAPSED_TIME = maximum [, limit= limitValue] </c>

This variable is used by \e Loggers of type
<b>%TextLogger</b>
 ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger),
  [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)).
It is read when a \b %TextLogger is registered with a \b %Lox and written back when it is
removed.<br>
The value stores the maximum elapsed time span of any <em>Log Statement</em> executed, measured
in seconds. Those maximum values are preserved accross different sessions of an application.
If a subsequent run of a process takes more time than any previous, then this new time span
is stored as the new maximum of all sessions.<br>
 The value is used to determine the number of 'digits' displayed in the meta information output
of utility class
<b>%MetaInfo</b>
 ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo),
  [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo)) for format parameter \c "%TC".
  
Consequently, the width of the log output (in respect to meta info \c "%TC") automatically adjusts 
to a reasonable value, depending on the execution time of the sofware.  
  
The variable optionally supports a second attribute \c 'limit' which restricts the maximum value
when a new session starts.   

Note, that the portion <c>'LOGGERNAME'</c> in the variable name is replaced by ALox
with the value of
<b>%Logger.GetName</b>
  ([C++]      (@ref #aworx::lox::core::Logger::GetName),
   [C#]   (@ref #cs::aworx::lox::core::Logger::GetName),
   [Java](@ref #com::aworx::lox::core::Logger::getName)). This allows to have different values for
different \e %Loggers.


*/


/**
\var  ALOX_LOGGERNAME_FORMAT
\e Declaration:
<b>%ALox::FORMAT</b>
 ([C++]      (@ref #aworx::lox::ALox::FORMAT),
  [C#]   (@ref #cs::aworx::lox::ALox::FORMAT),
  [Java](@ref #com::aworx::lox::ALox::FORMAT))<br>
\e Default Value: Set to the default values of the class members (fields).<br>

This variable is used by \e Loggers of type
<b>%TextLogger</b>
 ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger),
  [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)).<br>
It is read when a \e Logger of that type is added to a \b %Lox and if found, fields
- <b>%MetaInfo.Format</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.Format),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.Format),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.format))
- <b>%MetaInfo.VerbosityError</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityError),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityError),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityError))
- <b>%MetaInfo.VerbosityWarning</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityWarning),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityWarning),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityWarning))
- <b>%MetaInfo.VerbosityInfo</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityInfo),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityInfo),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityInfo))
- <b>%MetaInfo.VerbosityVerbose</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityVerbose),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityVerbose),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityVerbose))

are (optionally) set according to the variables' content. The contents of the variable is specified
as follows:

Format: <c> ALOX_\<LOGGERNAME\>_FORMAT = ["]Format["] [, ["]Error["] [, ["]Warning["] [, ["]Info["] [, ["]Verbose["] ]]]] </c>

Values that start or end with whitespace characters or which contain comma characters (<c>,</c>) ,
need to be enclosed by quotation marks (<c>\"</c>).

Note, that the portion <c>'LOGGERNAME'</c> in the variable name is replaced by ALox as follows:
- First, value of
    <b>%Logger.GetName</b>
     ([C++]      (@ref #aworx::lox::core::Logger::GetName),
      [C#]   (@ref #cs::aworx::lox::core::Logger::GetName),
      [Java](@ref #com::aworx::lox::core::Logger::getName))  of the \b Logger constructed is used.
- If no configuration setting is found for that name, the value of
    <b>%Logger::GetTypeName</b>
     ([C++]      (@ref #aworx::lox::core::Logger::GetTypeName),
      [C#]   (@ref #cs::aworx::lox::core::Logger::GetTypeName),
      [Java](@ref #com::aworx::lox::core::Logger::getTypeName)) is used.

This allows to configure either a single \e %Logger or a whole class of \e %Loggers.

As a sample, configuration variable \b ALOX_ANSI_CONSOLE_LOGGER_FORMAT, affects all loggers of type
<b>%AnsiConsoleLogger</b>
 ([C++]      (@ref #aworx::lox::loggers::AnsiConsoleLogger),
  [C#]   (@ref #cs::aworx::lox::loggers::AnsiConsoleLogger),
  [Java](@ref #com::aworx::lox::loggers::AnsiConsoleLogger)) as long as no specific name
is set when such \e %Logger is constructed and no separate configuration for that name is set.

Note, that the default debug \e %Logger which is automatically created if no \e %Logger is
attached to the debug \b %Lox singleton, is named \c "DEBUG_LOGGER".
Therefore, by setting variable \c ALOX_DEBUG_LOGGER_FORMAT, this \e Logger is affected.
Furthermore, in C++ and C# versions of ALox, when debugging, a second debug-\e Logger for
the IDE might be created. Its' name is \c "IDE_LOGGER".
*/


/**
\var  ALOX_LOGGERNAME_FORMAT_DATE_TIME
\e Declaration:
<b>%ALox::FORMAT_DATE_TIME</b>
 ([C++]      (@ref #aworx::lox::ALox::FORMAT_DATE_TIME),
  [C#]   (@ref #cs::aworx::lox::ALox::FORMAT_DATE_TIME),
  [Java](@ref #com::aworx::lox::ALox::FORMAT_DATE_TIME))<br>
\e Default Value: Set to the default values of the class members (fields).<br>

This variable is used and applied in the same way as \ref ALOX_LOGGERNAME_FORMAT, but  
defines the following fields:

- <b>%MetaInfo.DateFormat</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.DateFormat),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.DateFormat),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.dateFormat))
- <b>%MetaInfo.TimeOfDayFormat</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeOfDayFormat),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeOfDayFormat),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeOfDayFormat)) and
- <b>%MetaInfo.TimeElapsedDays</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeElapsedDays),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeElapsedDays),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeElapsedDays)).

*/

/**
\var  ALOX_LOGGERNAME_FORMAT_TIME_DIFF
\e Declaration:
<b>%ALox::FORMAT_TIME_DIFF</b>
 ([C++]      (@ref #aworx::lox::ALox::FORMAT_TIME_DIFF),
  [C#]   (@ref #cs::aworx::lox::ALox::FORMAT_TIME_DIFF),
  [Java](@ref #com::aworx::lox::ALox::FORMAT_TIME_DIFF))<br>
\e Default Value: Set to the default values of the class members (fields).<br>

This variable is used and applied in the same way as \ref ALOX_LOGGERNAME_FORMAT, but  
defines the following fields:

- <b>%MetaInfo.TimeDiffMinimum</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffMinimum),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffMinimum),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffMinimum))
- <b>%MetaInfo.TimeDiffNone</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffNone),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffNone),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffNone))
- <b>%MetaInfo.TimeDiffNanos</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffNanos),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffNanos),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffNanos))
- <b>%MetaInfo.TimeDiffMicros</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffMicros),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffMicros),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffMicros))
- <b>%MetaInfo.TimeDiffMillis</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffMillis),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffMillis),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffMillis))
- <b>%MetaInfo.TimeDiffSecs</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffSecs),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffSecs),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffSecs))
- <b>%MetaInfo.TimeDiffMins</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffMins),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffMins),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffMins))
- <b>%MetaInfo.TimeDiffHours</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffHours),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffHours),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffHours)) and
- <b>%MetaInfo.TimeDiffDays</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.TimeDiffDays),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.TimeDiffDays),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.timeDiffDays)).

*/

/**
\var  ALOX_LOGGERNAME_FORMAT_MULTILINE
\e Declaration:
<b>%ALox::FORMAT_MULTILINE</b>
 ([C++]      (@ref #aworx::lox::ALox::FORMAT_MULTILINE),
  [C#]   (@ref #cs::aworx::lox::ALox::FORMAT_MULTILINE),
  [Java](@ref #com::aworx::lox::ALox::FORMAT_MULTILINE))<br>
\e Default Value: Set to the default values of the class members (fields).<br>

This variable is used and applied in the same way as \ref ALOX_LOGGERNAME_FORMAT, but  
defines the following fields:

- <b>%MultiLineMsgMode</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger::MultiLineMsgMode),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger::MultiLineMsgMode),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineMsgMode))
- <b>%FmtMultiLineMsgHeadline</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger::FmtMultiLineMsgHeadline),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger::FmtMultiLineMsgHeadline),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::fmtMultiLineMsgHeadline))
- <b>%FmtMultiLinePrefix</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger::FmtMultiLinePrefix),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger::FmtMultiLinePrefix),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::fmtMultiLinePrefix))
- <b>%FmtMultiLineSuffix</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger::FmtMultiLineSuffix),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger::FmtMultiLineSuffix),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::fmtMultiLineSuffix))
- <b>%MultiLineDelimiter</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineDelimiter)) and
- <b>%MultiLineDelimiter</b>
  ([C++]      (@ref #aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [C#]   (@ref #cs::aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineDelimiter))
*/

/**
\var  ALOX_LOXNAME_DOMAIN_SUBSTITUTION
\e Declaration:
<b>%ALox::DOMAIN_SUBSTITUTION</b>
 ([C++]      (@ref #aworx::lox::ALox::DOMAIN_SUBSTITUTION),
  [C#]   (@ref #cs::aworx::lox::ALox::DOMAIN_SUBSTITUTION),
  [Java](@ref #com::aworx::lox::ALox::DOMAIN_SUBSTITUTION))<br>
\e Default Value: none.<br>
This variable is used to define <em>Domain Substitution Rules</em> for a \b %Lox.
The portion <c>'LOXNAME'</c> of the variable name has to be replaced by
the name of the instance of class \b %Lox in question.

Format: <c> ALOX_\<LOXNAME\>_DOMAIN_SUBSTITUTION = [*]domainpath[*] -> replacement [ ; &hellip; ] </c>

Details are described in \ref man_domain_substitution_config "Substitution Rules and External Configuration".

*/

/**
\var  ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES
\e Declaration:
<b>%ALox::SPTR_GLOBAL</b>
 ([C++]      (@ref #aworx::lox::ALox::SPTR_GLOBAL),
  [C#]   (@ref #cs::aworx::lox::ALox::SPTR_GLOBAL),
  Java: not applicable)<br>
\e Default Value: \c "" (empty string).<br>

This variable is used to define global <em>Source Path Trim Rules</em>.

Format: <c> ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES = [*]sourcepath [, inclusion, trimoffset, sensitivity, replacement] [ ; &hellip; ] </c>


Details are described in \ref man_trim_source_path_set_config "External Configuration of Trim Rules".


*/

/**
\var  ALOX_LOXNAME_SOURCE_PATH_TRIM_RULES
\e Declaration:
<b>%ALox::SPTR_LOX</b>
 ([C++]      (@ref #aworx::lox::ALox::SPTR_LOX),
  [C#]   (@ref #cs::aworx::lox::ALox::SPTR_LOX),
  Java: not applicable)<br>
\e Default Value: \c "" (empty string).<br>

This variable is used to define <b>%Lox</b>-specific <em>Source Path Trim Rules</em>.
The portion <c>'LOXNAME'</c> of the variable name has to be replaced by
the name of the instance of class \b %Lox in question.

Format: <c> ALOX_\<LOXNAME\>_SOURCE_PATH_TRIM_RULES = [*]sourcepath [, inclusion, trimoffset, sensitivity, replacement] [ ; &hellip; ] </c>

Details are described in \ref man_trim_source_path_set_config "External Configuration of Trim Rules".

*/

/**
\var  ALOX_LOXNAME_LOGGERNAME_VERBOSITY
\e Declaration:
<b>%ALox::VERBOSITY</b>
 ([C++]      (@ref #aworx::lox::ALox::VERBOSITY),
  [C#]   (@ref #cs::aworx::lox::ALox::VERBOSITY),
  [Java](@ref #com::aworx::lox::ALox::VERBOSITY))<br>
\e Default Value: \c "writeback" (empty string).<br>

This variable is used to set \e Verbosities for a \e %Logger attached to an instance of class <b>%Lox</b>.
The portions <c>'LOXNAME'</c> and <c>'LOGGERNAME'</c> of the variable name have to be replaced by
the names of the instances of \b %Lox and \b %Logger in question.

Format: <c> ALOX_\<LOXNAME\>_\<LOGGERNAME\>_VERBOSITY = [ writeback [ VAR_NAME ] ; ]   [*]domainpath[*] = verbosity [ ; &hellip; ] </c>

Details are described in \ref man_external_verbosity_configuration "External Verbosity Configuration".
*/

/**
\var  ALOX_LOXNAME_PREFIXES
\e Declaration:
<b>%ALox::PREFIXES</b>
 ([C++]      (@ref #aworx::lox::ALox::PREFIXES),
  [C#]   (@ref #cs::aworx::lox::ALox::PREFIXES),
  [Java](@ref #com::aworx::lox::ALox::PREFIXES))<br>
\e Default Value: \c "" (empty string).<br>

This variable is used to define <b>%Lox</b> and <em>Log Domain</em> specific <em>Prefix Logables</em> (strings only).
The portion <c>'LOXNAME'</c> of the variable name has to be replaced by
the name of the instance of class \b %Lox in question.

Format: <c> ALOX_\<LOXNAME\>_PREFIXES = [*]domainpath[*] = prefixstring [, inclusion] [ ; &hellip; ] </c>

The variable value may contain more than one definition, separated by semicolons \b ';'.
Each definition contains of the following parameters:
- \p domainpath<br>
  An absolute or relative domain path. When using the optional asterisk characters \b '*',
  a start of a domain path, the end of a domain path or
  an arbitrary substring of a domain path can also be denoted.
  This way, more than one <em>Log Domain</em> might be affected.
- \p prefixstring<br>
  The <em>Prefix Logable</em> to set. The string is trimmed from whitespaces, unless surrounded
  by quotation marks, \b ". Outer quotation marks are trimmed as well.
- \p inclusion<br>
  Can evaluate to the terms <em>Include</em> or <em>Exclude</em>. Can be arbitrarily abbreviated
  (i.e. \b "E" is enough) and is read in case insensitive way.
  The meaning is the same as parameter \p otherPLs of method
  <b>Log.SetPrefix</b>
     ([C++] (@ref      #aworx::lox::Lox::SetPrefix(const void*,int,const TString&,lib::enums::Inclusion)),
      [C#]  (@ref  #cs::aworx::lox::Lox::SetPrefix(Object,String,Inclusion otherPLs, int,String,String)),
      [Java](@ref #com::aworx::lox::Lox::setPrefix(Object,String,Inclusion otherPLs)))
*/


/**
\var  ALOX_LOXNAME_DUMP_STATE_ON_EXIT
\e Declaration:
<b>%ALox::DUMP_STATE_ON_EXIT</b>
 ([C++]      (@ref #aworx::lox::ALox::DUMP_STATE_ON_EXIT),
  [C#]   (@ref #cs::aworx::lox::ALox::DUMP_STATE_ON_EXIT),
  [Java](@ref #com::aworx::lox::ALox::DUMP_STATE_ON_EXIT))<br>
\e Default Value: \c "none, verbosity=info, domain=/ALOX" (empty string).<br>

Used for debugging or for investigation into ALox enabled 3rd party libraries or applications.

\note If you want to prevent such investigation for your software, refer to
      the documentation of namespace
      <b>[com::|cs::] %aworx::lib::config</b>.
        ([C++] (@ref      aworx::lib::config),
         [C#]  (@ref  cs::aworx::lib::config),
         [Java](@ref com::aworx::lib::config)) to learn how to protect external variables from
       being set.

Format: <c> ALOX_\<LOXNAME\>_DUMP_STATE_ON_EXIT = arg1 [, arg2][, &hellip; ] </c>

The portion <c>'LOXNAME'</c> of the variable name has to be replaced by
the name of the instance of class \b %Lox in question.

If this variable is defined, class Lox will automatically invoke method
<b>%Lox.State</b>
  ([C++](@ref      #aworx::lox::Lox::State),
  [C#]  (@ref  #cs::aworx::lox::Lox::State),
  [Java](@ref #com::aworx::lox::Lox::state)) in the moment a first \e Logger is removed. In most
cases this would be the at the end of the process.
(The other cases are: If after a removal of a \e Logger, the same
or another \e Logger is added, then the next removal of a \e Logger will again invoke the method.)

There are two types of arguments possible which can appear in arbitrary order. All argument
identifiers are letter case agnostic.

<br>
<p>
<b>1. State Information Flags:</b><br>
The state information flags are language specific. See reference documentation of
<b>%Lox.State</b>
  ([C++](@ref      #aworx::lox::Lox::State),
  [C#]  (@ref  #cs::aworx::lox::Lox::State),
  [Java](@ref #com::aworx::lox::Lox::state)) for more information. The identifiers expected
in this variables' arguments are:


<center>Identifier</center>   | <center>Description</center>
- - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 \c all                  | Selects everything
 \c basic                | Name of the %Lox and number of log calls
 \c version              | Library version and thread safeness
 \c loggers              | Loggers
 \c domains              | Log domains currently registered
 \c internaldomains      | Internal domains
 \c scopedomains         | Scope domains
 \c dsr                  | Domain substitution rules
 \c prefixlogables       | Prefix logables
 \c once                 | Log once counters
 \c logdata              | Log data objects
 \c threadmappings       | Named threads
 \c sptr                 | Source path trim rules (<b>C++ and C# only</b>)
 \c compilationflags     | ALib/ALox compilation flags (<b>C++ only</b>)

<br>
<p>
<b>2. Attributes:</b><br>
Two attributes are affecting the invocation of
<b>%Lox.State</b>
  ([C++](@ref      #aworx::lox::Lox::State),
  [C#]  (@ref  #cs::aworx::lox::Lox::State),
  [Java](@ref #com::aworx::lox::Lox::state)) can be provided as arguments:

<center>Attribute</center>   | <center>Description</center>
- - - - - - - - - - - - -| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 \c domain \c = \b DOMAIN_PATH  | Sets a domain path for the \b %Log.State invocation (defaults to \c "").
 \c verbosity \c = \b VERBOSITY | Sets a verbosity for the \b %Log.State invocation (defaults to \c "Info").



As a sample, take the following external variable:

        ALOX_LOG_DUMP_STATE_ON_EXIT= domain=/DEBUG, verbosity = info,  logdata, scopedomains


When the process terminates (precisely the first \e Logger is removed from the standard
debug \b %Lox called \b "LOG"), then method
<b>%Lox.State</b>
  ([C++](@ref      #aworx::lox::Lox::State),
  [C#]  (@ref  #cs::aworx::lox::Lox::State),
  [Java](@ref #com::aworx::lox::Lox::state))
is invoked, with
- absolute domain \b '/DEBUG' provided for parameter \p domain,
- value \c %Verbosity.Info for parameter \p verbosity and
- parameter \p flags set to <c>( LogData & ScopeDomains )</c>


*/





/**  @}  */
