// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2017 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_man_prefix_logables 07 - Prefix Logables

\tableofcontents

\~Comment ####################################################################################### \~
# 1. Introduction #  {#alox_man_prefix_logables_intro}

The feature of \b %ALox called <b>Prefix Logables</b>, covered in this chapter, builds upon
the \b %ALox concept of \e Scopes in a similar way as feature <em>Scope Domains</em> does. Therefore it is advisable
to have read and understood chapters
- \ref alox_man_logdomains and
- \ref alox_man_scopes prior to continuing reading here.

This chapter will \e not repeat every detail covered already in the aforementioned chapters.

\e Logables in \b %ALox for Java/C# are of type <c>class </c> Object, in <b>%ALox for C++</b> of type
\ref aworx::lib::boxing::Box "aworx::Box". An implementation of abstract class \b %Logger, receives
an arbitrary amount of objects of arbitrary types.
This corresponds to the fact that the <em>Log Statements</em> also accept arbitrary amounts of
arbitrary objects to be logged out.
However, the lists may differ: a \e %Logger might receive \b more objects than those that have
been provided with a <em>Log Statement</em>!
Those additional objects are <em>Prefix Logables</em>!

Before we explain the use cases for <em>Prefix Logables</em>, let us begin to elaborate how those are set by the
user of \b %ALox and how \b %ALox processes them.

\~Comment ####################################################################################### \~
# 2. Setting Prefix Logables #  {#alox_man_prefix_logables_setting}
## 2.1 Setting Prefix Logables According to the Scope ## {#alox_man_prefix_logables_setting_1}
For the first way of setting and removing <em>Prefix Logables</em> method
<b>%Lox.SetPrefix</b>
([C++] (@ref      #aworx::lox::Lox::SetPrefix(const Box&, Scope)),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetPrefix),
 [Java](@ref #com::aworx::lox::Lox::setPrefix)) is used. The method and its overloaded versions
is very similar to method
<b>%Lox.SetDomain</b>
([C++] (@ref      #aworx::lox::Lox::SetDomain(const String&, Scope)),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomain),
 [Java](@ref #com::aworx::lox::Lox::setDomain)) used for setting <em>Scope Domains</em>.
Besides the difference in the name, the only
difference is the first parameter, which is a \e Logable instead of a domain path string.

All that was said about setting <em>Scope Domains</em> in Chapter \ref alox_man_logdomains is true for setting <em>Prefix Logables</em> and this
should not be repeated here. The same rules for \e %Scopes apply, including the fact that with
\e %Scope.ThreadInner and \e %Scope.ThreadOuter, a subsequent setting of a <em>Prefix Logable</em> is added to
a list of <em>Prefix Logables</em> for these \e Scopes, while for other \e Scopes, the current <em>Prefix Logable</em> is replaced.

Passing \c null (C++: \c nullptr) as parameter \p logable, removes the <em>Prefix Logable</em> from the given \e Scope,
respectively, in the case of thread-related \e Scopes, removes the <em>Prefix Logable</em> most recently set.

The only small difference to the interface for setting <em>Log Domains</em> is that there is no method available
corresponding to
<b>%Lox.RemoveThreadDomain</b>
([C++] (@ref      #aworx::lox::Lox::RemoveThreadDomain),
 [C#]  (@ref  #cs::aworx::lox::Lox::RemoveThreadDomain),
 [Java](@ref #com::aworx::lox::Lox::removeThreadDomain)), which provides a little extra flexibility
of maintaining <em>Scope Domains</em> in contrast to maintaining <em>Prefix Logables</em>.

\~Comment ####################################################################################### \~
## 2.2 Setting Prefix Logables According to the Log Domain##  {#alox_man_prefix_logables_setting_2}
Besides binding <em>Prefix Logables</em> to a \e Scope, \b %ALox provides an alternative
and this is binding <em>Prefix Logables</em> to a <em>Log Domain</em>.
The method for doing this is
<b>%Lox.SetPrefix</b>
([C++] (@ref      #aworx::lox::Lox::SetPrefix(const Box&, const String&,lib::lang::Inclusion )),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetPrefix(Object,String,Inclusion ,int,String,String)),
 [Java](@ref #com::aworx::lox::Lox::setPrefix(Object,String,Inclusion))).

The method accepts a <em>Log Domain</em> path which may be absolute (starting with \c "/" or relative). If
relative the normal evaluation of a resulting domain path taking <em>Scope Domains</em> into account applies.<br>
A third optional parameter allows to make the setting exclusive in respect to <em>Prefix Logables</em> which are
set according to a \e Scope. By default, the exclusivity is not set.

\note
 Alternatively, <em>Prefix Logables</em> bound to a <em>Log Domain</em> can set using
 configuration variable [ALOX_LOXNAME_PREFIXES](group__GrpALoxConfigVars.html).
 Of-course, this allows only string-type-<em>Prefix Logables</em> to be set.<br>
 For general information on \b %ALox configuration variables consult \ref GrpALoxConfigVars.<br>
 For information on how to pass configuration data from custom sources to \b %ALox, refer to
 namespace documentation
 <b>%aworx::lib::config</b>
    ([C++] (@ref      #aworx::lib::config),
     [C#]  (@ref  #cs::aworx::lib::config),
     [Java](@ref #com::aworx::lib::config)).

\~Comment ####################################################################################### \~
## 2.3 Setting More than one Prefix Logable at a Time## {#alox_man_prefix_logables_setting_3}
While the <em>Log Statements</em> accept arbitrary amount of objects (in C++ "Boxes"), the methods
to set <em>Prefix Logables</em> have only one parameter. Nevertheless, more than one object can
be set! In Java and C# this is done by passing an an array of type \c Object[] with the "prefixes"
to the corresponding method. In C++ the objects have to be wrapped in an object of class
\ref aworx::lib::boxing::Boxes "aworx::Boxes", which is derived from
<c>std::vector<aworx::Box></c>. If this is done, \b %ALox will "flatten" the given arrays when the
<em>Prefix Logables</em> are passed to the \e Loggers. This means, instead of adding the array
to the overall list of \e Logables, the single objects contained in the array are added.

\note
  This technique of passing a whole list of objects trough one parameter is found several times with
  \b %ALox. For example, the various overloaded versions of method
  <b>%Lox.Once</b>
  ([C++] (@ref      #aworx::lox::Lox::Once),
   [C#]  (@ref  #cs::aworx::lox::Lox::Once),
   [Java](@ref #com::aworx::lox::Lox::once)) is using the same technique. The following code snippets
  sample how such object array are created right in the parameter list of the invocation.

\note
  C++:
  \snippet "ut_alox_lox.cpp"      DOX_ALOX_LOX_ONCE
  C#:
  \snippet "UT_alox_lox.cs"       DOX_ALOX_LOX_ONCE
  Java:
  \snippet "UT_alox_lox.java"     DOX_ALOX_LOX_ONCE



\~Comment ####################################################################################### \~
# 3. How ALox Processes Prefix Logables # {#alox_man_prefix_logables_processing}
With any sort of <em>Log Statement</em> in \b %ALox, the <em>Prefix Logables</em> are collected according
to the \e Scope and the <em>Log Domain</em> of that <em>Log Statement</em>.
In the same fashion as <em>Scope Domains</em> are concatenated, \b %ALox adds <em>Prefix Logables</em> to the list of \e Logables
that are passed to each \e Logger instance. Consequently, the list that a \e Logger receives
is filled as follows:

1. <em>Prefix Logable</em> of \e %Scope.Global
2. <em>Prefix Logables</em> of \e %Scope.ThreadOuter (can be more than one)
3. <em>Prefix Logable</em> of \e %Scope.Path (PACKAGE)
4. <em>Prefix Logable</em> of \e %Scope.Filename (CLASS)
5. <em>Prefix Logable</em> of \e %Scope.Method
6. The <em>Prefix Logables</em> of the parent <em>Log Domain</em> in the order of there setting (recursively prepended!)
7. The <em>Prefix Logables</em> of the <em>Log Domain</em> in the order of there setting
8. <b>The \e Logable of the <em>Log Statement</em> itself</b>
9. <em>Prefix Logables</em> of \e %Scope.ThreadInner (can be more than one)

If in \b 6. or \b 7. a <em>Prefix Logable</em> was passed with optional parameter \p otherPLs valued
\b %Inclusion.Exclude, then after adding this \e Logable, the collection of further <em>Prefix Logables</em> is stopped.
Because all objects are collected in reverse order, starting with objects of \e %Scope.ThreadInner,
this means that objects otherwise collected in \b 1. to \b 5. (respectively \b 6.) are not added.
This allows to have a setting of a <em>Prefix Logable</em> which is bound to a domain to 'overwrite' those bound to
a \e Scope.

As with any 'normal' \e Logable that is passed to the \e Logger, it is completely up to the
\e Logger what to do with this data.

Those \e Logables passed with \e %Scope.ThreadInner are appended to the list \e after
the <em>Log Statements</em>' \e Logable and therefore should be considered a 'suffix', not a prefix.
You might wonder why this whole feature is named 'prefix', especially as
this term is not applicable to objects in an ordered array. The answer to this is given in the
next section.

\~Comment ####################################################################################### \~
# 4. Use cases of Prefix Logables #  {#alox_man_prefix_logables_usecases}

Talking about the use cases of feature <em>Prefix Logables</em>, we have to distinguish between logging arbitrary
objects, what \b %ALox supports and logging textual (string) messages, what is by far the most widely
application for \b %ALox.

## 4.1 Textual Logging # {#alox_man_prefix_logables_usecases_textual}
When logging textual messages (more precisely: when using \e Loggers derived from abstract class
<b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)), just as all
textual \e Loggers delivered with \b %ALox are),  the impact of <em>Prefix Logable</em> is simple. Class \b %TextLogger
just passes all objects found in the list of \e Logables to its
<b>ObjectConverter</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::ObjectConverter),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::ObjectConverter),
   [Java](@ref #com::aworx::lox::core::textlogger::ObjectConverter)) which in turn (in its
default implementation) passes them to field
<b>StandardConverter::FormatterPS</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::StandardConverter::FormatterPS),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::StandardConverter::FormatterPS),
   [Java](@ref #com::aworx::lox::core::textlogger::StandardConverter::formatterPS)).
This formatter, has object
<b>StandardConverter::FormatterJS</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::StandardConverter::FormatterJS),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::StandardConverter::FormatterJS),
   [Java](@ref #com::aworx::lox::core::textlogger::StandardConverter::formatterJS)) attached.
This way, \b %TextLogger is well prepared to assemble a nicely formatted log output, by default
accepting Python formatter strings as well as the corresponding Java syntax.

\note
  As already explained in this manual and in the documentation of class
  \ref aworx::lib::strings::format::Formatter "Formatter", there is an important feature that supports
  the concept of <em>Prefix Logables</em> very nicely: While usually (in other libraries and languages)
  such formatting classes accept \b one format string and an arbitrary amount of objects, with
  this class the format string is included in the object list. The first object may or may not
  be a format string. If it is not, the object is just "applied" (appended in textual representation)
  to the log output.
  As soon as a format string with placeholders is detected, the formatting process starts. All
  arguments consumed by the format string are then skipped in the list and - if still arguments
  exist - the algorithm continues from the start.<br>
  As a consequence, prefix logables can contain a format string and arguments, while still the
  <em>Logables</em> which are collected from the <em>Log Statement</em> can themselves contain
  a format string and corresponding arguments.

\note
  For more information on \e Loggers and \e %TextLogger, see chapters \ref alox_man_colorful_loggers and
  \ref alox_man_ext_loggers.

This explains the term \e 'prefix': Apart from <em>Prefix Logables</em> of \e %Scope.ThreadInner, all
<em>Prefix Logables</em> are prefixes to the 'log message'. Those of \e %Scope.ThreadInner are suffixes. For the architects
of the \b %ALox API it was just too teasing to name the whole concept <em>Prefix Logables</em> and this way being able to
have - for the most obvious use case - the user code look like this:

\snippet "UT_dox_manual.cs"        Man_LogSetPrefix___1

The output will look similar to this:

\verbinclude ALox.CS/generated/Man_LogSetPrefix_1.txt


A next use case is recursively increasing 'indentation' of the log messages, as demonstrated
here:

\snippet "UT_dox_manual.cs"        Man_LogSetPrefix___2

Note that this sample is using \e Scope.ThreadOuter. If using \e %Scope.Method it would fail, because
only the thread-related \e Scopes allow to add multiple objects. With thread-related \e Scopes,
this works like a 'push and pull' mechanism.
Luckily, with using the thread-related \e Scopes, the whole indentation is
automatically \e thread-safe!

Indentation can also be useful when adding prefixes for different language-related \e Scopes.
For example classes of a nested namespace (in Java 'package'), might be considered core, helper
tools that usually have a low \b Verbosity setting.
It might be a good option to indent all their logging by setting a prefix for their namespace.
If they need to be debugged, and their \e Verbosity is increased, <em>Log Statement</em> of those are due to the
indentation still very easily distinguishable from the rest of the log output. Such structured
log output can help to increase the readability of a debug-log tremendously.

As an alternative to 'indentation', think about using the escape codes found in class
<b>ESC</b>
  ([C++] (@ref      #aworx::lox::ESC),
   [C#]  (@ref  #cs::aworx::lox::ESC),
   [Java](@ref #com::aworx::lox::ESC)). Prefixing those instead of normal strings or spaces,
leads to nicely colorized, bold and italic log output, at least with text-loggers supporting such
styles (ALox provides such \e Loggers e.g. for ANSI consoles or Windows OS command windows).

Use cases are depending on the application and situation. Let us touch
a last one here: Consider an application that causes errors in certain situations. Let's say, a
phone app seems to start logging errors 'randomly' which means, you do not know when. You suspect
it happens when the network connection drops. A first quick investigation could be to add
a <em>Prefix Logable</em> \b "Online:  ", respectively \b "Offline: " as soon as the devices' OS signals a change.
You simply set this using \e Scope.Global, or alternatively for the <em>Log Domain</em> where the error occurs.
In the next debug-runs, you have all messages prefixed
with the current state. You do not need to follow your log output \e 'backward' to find the most
recent log message giving you information about that status. Generally spoken: <em>Prefix Logables</em> allow
to add status information to log lines providing information collected elsewhere.

\~Comment ####################################################################################### \~
## 4.2 Arbitrary Object Logging #  {#alox_man_prefix_logables_usecases_binary}

The situation with \e Loggers designed to log arbitrary objects is different.
(How to create such custom, application specific \e Loggers is described in \ref alox_man_ext_loggers).

If only arbitrary objects were supported in  \b %ALox and the standard textual logging would not
exist as the predominant use-case, then the whole feature probably would have been named <b>Context Logables</b>.
Instead of providing the 'context' with each <em>Log Statement</em> to a custom \e Logger, or setting it explicitly
using a custom interface method of such custom \e Logger, arbitrary context data can be used
leveraging the various \e Scope options.

Imagine for example a custom \e Logger that logs into a database. A 'context' in this case
could be the database table to use. <em>Log Statements</em> of different \e Scopes would then 'automatically' direct
their \e Logables to different tables in the database, if different <em>Prefix Logables</em>
had been set for the \e Scopes.

Another sample could be logging application metrics to an online metrics-server. The parameters
and information passed to the server are probably encoded in a URL. Now, the bigger parts of such
parameters do not change within a context (aka \e Scope). Those would be passed only once per
\e Scope to \b %ALox using the feature of <em>Prefix Logables</em>. The metrics-<em>Log Statements</em> themselves would only carry the
rest of the detailed information specific to the metrics information that are supposed to be sent.

Use cases are endless and can not be named here, they depend the field of application that
ALox is used to support.

\~Comment ####################################################################################### \~
# 5. ALox for C++ specifics #    {#alox_man_prefix_logables_cppspecifics}

One of the design goals of the \b %ALox Logging Library is to avoid code clutter when using it.
In a perfect world, <em>Log Statements</em> would be as clear and easy to read as comment lines.
C++ does not provide life-cycle management for allocated data (as Java and C# do) and this
causes a potential problem when using <em>Prefix Logables</em>.

When logging <b>arbitrary objects</b>, the use cases
touched in the previous section make it obvious that \b %ALox can not be responsible for life-cycle
management of <em>Prefix Logables</em>. Therefore, if data is used as <em>Prefix Logable</em> which is exclusively created for that
purpose (and are no general long-living objects), there is no way to avoid some extra
code that creates and deletes such objects, probably enclosed by

        #if defined(ALOX_DBG_LOG) // alternatively ALOX_REL_LOG, or both
        ...
        #endif

or embedded in macro

        Log_Prune( ... )    // alternatively Lox_Prune()

We think with release logging and binary object logging, both considered a 'heavy' use
of \b %ALox anyhow, extra code should not be anything to be concerned about.

With <b>textual logging</b>, especially in the case of debug logging, this is different. Here,
the designers of \b %ALox are concerned about extra code which increases the 'intrusiveness' of \b %ALox!
Therefore, the following rule applies. For \e Logables of box type \c char[], \b %ALox internally creates
a \b copy of the string provided.
Of-course, when such <em>Prefix Logable</em> is removed, \b %ALox deletes it. The benefit of this is
huge: A user of \b %ALox does not need to care about keeping string-type
<em>Prefix Logables</em> 'alive' after setting them. This means, any locally assembled,
short-living string can be passed to method \b %Lox.SetPrefix and right afterwards, it can be deleted
or removed by C++ from the stack if the (C++ -)scope is left.

It is important to understand the impact:
- With string-type <em>Prefix Logables</em>, you do not need to worry about the life cycle of the string passed.
- With <em>Prefix Logables</em> of arbitrary type, it is the users' responsibility to keep objects intact
  as long as any <em>Log Statement</em> may be invoked that gets such <em>Prefix Logable</em> passed.
- Unlike, with \b %ALox for C#/Java, setting an \b %AString as <em>Prefix Logable</em> and afterwards
  changing the instance, such change is \b not reflected in the prefix object! This is because
  the contents of the \b %AString is copied.

The latter is of-course a disadvantage of this design: The <em>Prefix Logables</em> becomes a
static object that does not reflect changes of its origin object! But there is an easy way out.
Remember that only boxed objects of type \c char[] are copied. The trick to have changes of an
\b %AString instantly reflected in the logging, is to pass it wrapped in an object of type
\ref aworx::lib::boxing::BoxedAs "BoxedAs<AString>". If this is done, the contents is \b not copied.
Instead a reference to the \b %AString is boxed and any change of this object is reflected
in the <em>Prefix Logable</em>.

\note
  This approach is not only applicable to class \b %AString but to any custom string type
  that by default gets boxed as \c char[]. The only precondition is that along with the setup
  of \ref aworx::lib::boxing "ALib Boxing" in respect to the custom type, the type
  <b>%BoxedAs\<CustomString\></b> has to be equipped with boxing interface
  \ref aworx::lib::strings::boxing::IApply "IApply".<br>
  How to adopt custom string types to support %boxing, including this "trick" is described in the
  documentation of <b>%ALib %Boxing</b> in chapter
  \ref alib_namespace_boxing_strings_custom "6.5 Boxing Custom String Types".




\~Comment ####################################################################################### \~
# 6. Wrap-Up #  {#alox_man_prefix_logables_wrapup}

This is what this chapter has covered in respect to <em>Prefix Logables</em>:
- <em>Prefix Logables</em> are \e Logables that can be set according to the \e Scope mechanisms featured by \b %ALox, or
  according to a <em>Log Domain</em>.
- With every <em>Log Statement</em> executed by \b %ALox, all applicable <em>Prefix Logables</em> are collected in a list and passed to
  each \e Logger.
- The most prominent use case for <em>Prefix Logables</em> is adding a prefix, a color or (optionally recursive)
  indentation to textual log messages.
- With custom \e Loggers using arbitrary types of \e Logables, the use cases are different but
  not less powerful. Consider the feature to be named <em>Context Logables</em> rather than
  <em>Prefix Logables</em>.
- In <b>%ALox for C++</b> a copy of any string-type <em>Prefix Logable</em> set is created. Therefore, a user must not worry about
  the life-cycle of such <em>Prefix Logables</em>. If arbitrary objects are used, the user of \b %ALox has to ensure that
  <em>Prefix Logables</em> survive until the last corresponding <em>Log Statement</em> is executed.

As with other features using \b %ALox \e Scopes, on the first sight, this seems to be
a little complicated. Especially when looking at the list given in
\ref alox_man_prefix_logables_processing "How ALox Processes Prefix Logables".
But when you look at the use cases, it becomes clear, that from the nine options of that list,
mostly one is used in parallel, seldom two.
Once the concept of <em>Scope Domains</em> is fully understood, the use of this feature
and of others that leverage \b %ALox \e Scopes, should quickly become very intuitive.


--------------------------------------------------------------------
<center>Next chapter: \ref alox_man_log_data </center> <center> \ref manual "Back to index" </center>

*/
