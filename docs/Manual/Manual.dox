// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page manual    Contents

## Using ALox ##

\ref alox_man_intro                            <br>
\ref alox_man_features_and_limitations         <br>
\ref alox_man_terminology                      <br>
\ref alox_man_logdomains                       <br>
\ref alox_man_scopes                           <br>
\ref alox_man_log_once                         <br>
\ref alox_man_prefix_logables                  <br>
\ref alox_man_log_data                         <br>
\ref alox_man_multi_threaded                   <br>
\ref alox_man_debug_and_release_logging        <br>
\ref alox_man_internal_domains                 <br>
\ref alox_man_external_configuration           <br>
\ref alox_man_external_verbosity_configuration <br>
\ref alox_man_trim_source_path                 <br>
\ref alox_man_domain_substitution              <br>
\ref alox_man_colorful_loggers                 <br>

## Reference Appendix ##
\ref GrpALoxConfigVars                         <br>
\ref alox_man_apdx_auto_config                 <br>

## Extending ALox ##
\ref alox_man_ext_loggers                      <br>



<p>
<br>
<p>

# Notes #

This is the manual of the ALox Logging Ecosystem. This manual applies to all platforms and
programming languages that ALox supports. By nature, the different implementations of ALox
written in different programming languages, differ. Sometimes in details, sometimes differences
are more than that.

As a matter of fact, this manual provides a more abstract and high level view on ALox.
Such general understanding of the ALox architecture and design concepts, might
be important to maximize the use of ALox.

If you have not worked with ALox, yet, and have not read one of the tutorials, we <b>highly recommend to
walk through one of the language specific tutorials</b> found  in the corresponding programming language
specific documentation first. There, you also might find information on how to setup up ALox projects for
the platform you are using. The language specific documentation is always reachable through
the main menu of this book (above). They are:

- [ALox for C++](cpp_ref/alox_cpp_mainpage.html)
- [ALox for C#](cs_ref/alox_cs_mainpage.html)
- [ALox for Java](java_ref/alox_java_mainpage.html)

<b>Orthogonality of ALox and its API</b>:<br>
Reading this manual, you will see that some topics might become a little complex, maybe more
complex than what you might expect from a logging framework that you probably just want to use
for rather 'simple' debug-logging.<br>
The good news is that ALox' features and API is design are to a high degree 'orthogonal'.
Orthogonality in API design means that features that you do not use, do not know and that you might not be even
interested in, are not even visible when using %ALox. This is mainly reached by three things:
- Simplified method invocations by omitting all optional parameters (in Java overloaded methods omitting these parameters)
- Reasonable default values for optional parameters
- Automatic internal prerequisites when ALox 'detects' that a feature is not used.

This way, you can use ALox in an extremely simple way, just as if ALox <em>was</em> extremely simple.
And maybe just over time, you start reading this book and go into details that you need to conquer a
next, more complex use case. For productively using ALox, the tutorials should do!


<b>Differences of ALox for C++, C# and Java</b>:<br>
As ALox is available for C++, C# and Java, the class and member names within this document
may vary a little per language. Fore example, class **Log** does not provide a mirrored version
of the interface of class \b Lox in C++ as it has in C# and Java versions of ALox, where this is
used for pruning exactly this interface out of release code.
In contrast, in C++ the macros \b Log_xxx and \b Lox_xxx are used to provide pruned and non-pruned
access to methods of class Lox. Which means an underscore in C++ '_' replaces a dot '.' in Java/C#.

Also, in Java, interface methods generally start with a non-capital letter, while in C# and C++ the
same method starts with a capital one. Please remember, that such details are not an error in the
user manual, but we have just decided not to hint to this fact all of the time.

Wherever reasonable, language specific differences are named and briefly explained.

<b>Documentation of ALib</b>:<br>

General purpose classes (aka those that are not directly related to logging) are collected
under the name \alib. As the standard C++ class library is far less complete than the <b>.Net</b> and
\b Java class libraries, \b "ALib For C++" had to be much richer than the other language versions.
Historically, a goal of the C++ version was to provide a sort of "compatibility layer", hence to
mimic \b C# and \b Java classes in \b C++.

Since release version \b 1805 however, the C++ version of \alib has been launched as an own
project. With this launch, \b "ALox for C++" became a part of \b "ALib for C++".
It could be said, that the relationship between \alib and \alox has been reversed in that language version!

Consequently, all \b C++ source code including that of \b "ALox for C++" has been
[moved to this project](https://alexworx.github.io/ALib-Class-Library/) which includes all
reference documentation of \alib and \alox.

For \b C# and \b Java, underlying class library <b>%ALib</b> does not provide an own project
site and user manual. It is exclusively published as a part of the \alox project.

While for the \b C++ version, various \ref alib_manual_modules_overview "Programmer's Manuals for ALib Modules" exist,
for \b C# and \b Java, only reference manuals are given. Those are:

- <b>[com::|cs::]%aworx::lib</b>
 ([C#]  (@ref  #cs::aworx::lib),
  [Java](@ref #com::aworx::lib))
- <b>[com::|cs::]%aworx::lib::config</b>
 ([C#]  (@ref  #cs::aworx::lib::config),
  [Java](@ref #com::aworx::lib::config))
- <b>[com::|cs::]%aworx::lib::util</b>
 ([C#]  (@ref  #cs::aworx::lib::util),
  [Java](@ref #com::aworx::lib::util))
- <b>[com::|cs::]%aworx::lib::lang</b>
 ([C#]  (@ref  #cs::aworx::lib::lang),
  [Java](@ref #com::aworx::lib::lang))
- <b>[com::|cs::]%aworx::lib::strings</b>
 ([C#]  (@ref  #cs::aworx::lib::strings),
  [Java](@ref #com::aworx::lib::strings))
- <b>[com::|cs::]%aworx::lib::threads</b>
 ([C#]  (@ref  #cs::aworx::lib::threads),
  [Java](@ref #com::aworx::lib::threads))
- <b>[com::|cs::]%aworx::lib::time</b>
 ([C#]  (@ref  #cs::aworx::lib::time),
  [Java](@ref #com::aworx::lib::time))


For advanced users of ALox, reading and understanding the types provided with namespaces
<b>config</b>
    ([C++] (@ref      #aworx::lib::config),
     [C#]  (@ref  #cs::aworx::lib::config),
     [Java](@ref #com::aworx::lib::config)) and
<b>strings</b>
    ([C++] (@ref      #aworx::lib::strings),
     [C#]  (@ref  #cs::aworx::lib::strings),
     [Java](@ref #com::aworx::lib::strings))
is very recommended.
*/

