// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page man_external_verbosity_configuration  13 - External Verbosity Configuration

\tableofcontents

\~Comment ####################################################################################### \~
# 1. Introduction # {#man_external_verbosity_configuration_intro}

This Chapter brings us back to talking about <em>Log Domains</em> and their attribute <em>Verbosity</em>
which are associated with pairs of a <em>Log Domains</em> and a \e %Logger.
\note
  Please make sure that you have read and understood \ref man_logdomains before continue reading.

Setting such \e Verbosity by invoking
<b>%Lox.SetVerbosity</b>
([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)) is easy and straightforward. However, when
working in a team, different team members, working on different parts of a software, naturally
are interested in different information. Now, when the \e Verbosity is defined in the source
(preferably the bootstrap section of a software), then these would be randomly changed when
checking source files in and out of a source control system.
Therefore, ALox supports to read \e Verbosity settings from the command line, from environment
variables, from an INI file or from any other custom data source. This way, all personal changes
are outside the code - good for your team spirit!

But before we can explain how this is done, we first have to talk about <b>priorities of
Verbosity settings</b>. This is an important prerequisite to understanding how
external configuration works in ALox.


\~Comment ####################################################################################### \~
# 2. Priorities of Verbosity Settings # {#man_external_verbosity_configuration_prios}

In the
<b>Tutorials</b>
 ([C++] (@ref cpptutorial),
  [C#]  (@ref cstutorial),
  [Java](@ref javatutorial)), in chapter \ref man_logdomains and elsewhere in the
ALox documentation, so far, we have just ignored an optional parameter of overlaoded methods:
<b>%Lox.SetVerbosity</b>
([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)). The parameter is named \p priority.
We did so, because this parameter, while extending the flexibility of ALox, brings a new
new level of complexity to the table.
The good news is that (as explained in \ref man_apdx_auto_config) when the parameter
is omitted, ALox behaves as if this feature was not existing.

The parameter is of \c int type and defaults to constant
<b>%Configuration.PrioDefault</b>
([C++] (@ref      #aworx::lib::config::Configuration::PrioDefault),
 [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioDefault),
 [Java](@ref #com::aworx::lib::config::Configuration::PRIO_DEFAULT)). The value of the constant
is \c 100, but for now, this is not of further interest. When passing a higher value here, subsequent invocations
for the <em>Log Domain</em> in question (or for one of its parent domains!) which use the standard value, will
be ignored. See the following sample:

\snippet "UT_dox_manual.cs"        Man_ExtVerbosityConfig___1

And its output:

\verbinclude  docs/ALox.CS/generated/Man_ExtVerbosityConfig_1.txt

As you see, the second invocation of \b %Lox.SetVerbosity is ignored, because the first had a
higher priority.<br>
With ALox internal logging (see \ref man_internal_domains)
activated, ALox nicely reports what is going on. We add line:

\snippet "UT_dox_manual.cs"        Man_ExtVerbosityConfig___2

to the top of the sample. Now the output is:

\verbinclude  docs/ALox.CS/generated/Man_ExtVerbosityConfig_2.txt

ALox in its internal log messages tells us that the second request was ignored.

Why is that useful? Well, honestly it really becomes useful only in consideration of
external configuration data, described later in this chapter. However, when you think about it,
one field of application is in respect to sub-domain settings. Consider the following <em>Log Domain</em> tree:

        /UI
        /UI/MOUSE
        /UI/DIALOGS
        /UI/DIALOGS/MOUSE
        /UI/DIALOGS/KEYS

Imagine you are currently frequently switching the \e Verbosity of sub-domains of <em>Log Domain</em> <c>'/UI'</c>
because you are currently working on the UI. Now you have a random problem with mouse event
handling. As long as this problem occurs, <em>Log Statements</em> related to mouse event should stay \c Verbose.
Therefore, you enable them 'permanently' by invoking

\snippet "UT_dox_manual.cs"        Man_ExtVerbosityConfig___3

After that, any changes in parent domains, even for root-domain, will not disable <em>Log Statements</em> of
mouse events any more. When the mouse event handling is fixed, these settings can be deleted
again.

\note
  Once a priority of a \e Verbosity setting was increased, for the rest of the life-cycle
  of a process, this priority can not be changed back to a lower one. ALox does not provide
  an interface for that. The reason is simply, that the designers of ALox do not see any need
  in it. Honestly, if it was not so helpful for external configuration, the priority-feature
  of \e Verbosity settings would not have been implemented with ALox.

\~Comment ####################################################################################### \~
# 3. Priorities of External Configuration # {#man_external_verbosity_configuration_configprios}


As you have learned from the previous chapter, \ref man_external_configuration, the configuration system of
ALib (the utility library that ALox builds upon) works with priorities the same as ALox \e Verbosity settings
do. Now, you might guess what happens! ALox uses the same constants as ALib configuration does.
The following table gives an overview of these constants defined in class \b %Configuration:

Constant|Value
- - - - |- - - - - - - - - - - - - - - - -
<b>PrioProtected</b>   ([C++] (@ref #aworx::lib::config::Configuration::PrioProtected),    [C#](@ref #cs::aworx::lib::config::Configuration::PrioProtected),   [Java](@ref #com::aworx::lib::config::Configuration::PRIO_PROTECTED))   | \<max int\>
<b>PrioCmdLine</b>     ([C++] (@ref #aworx::lib::config::Configuration::PrioCmdLine),      [C#](@ref #cs::aworx::lib::config::Configuration::PrioCmdLine),     [Java](@ref #com::aworx::lib::config::Configuration::PRIO_CMD_LINE))    | 400
<b>PrioEnvironment</b> ([C++] (@ref #aworx::lib::config::Configuration::PrioEnvironment),  [C#](@ref #cs::aworx::lib::config::Configuration::PrioEnvironment), [Java](@ref #com::aworx::lib::config::Configuration::PRIO_ENVIRONMENT)) | 300
<b>PrioIniFile</b>     ([C++] (@ref #aworx::lib::config::Configuration::PrioIniFile),      [C#](@ref #cs::aworx::lib::config::Configuration::PrioIniFile),     [Java](@ref #com::aworx::lib::config::Configuration::PRIO_INI_FILE))    | 200
<b>PrioDefault</b>     ([C++] (@ref #aworx::lib::config::Configuration::PrioDefault),      [C#](@ref #cs::aworx::lib::config::Configuration::PrioDefault),     [Java](@ref #com::aworx::lib::config::Configuration::PRIO_DEFAULT))     | 100

When a \e Verbosity setting is read by ALox from external configuration, the priority of the plug-in
that provided the data is used as the priority of the setting, just as if this value was
passed to method
<b>%Lox.SetVerbosity</b>
([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)) using optional parameter \p priority.

As a programmer, you need nothing special to do. The same as ALox creates <em>Log Domains</em> on the fly as soon
as you are using them, the same it reads configuration data for these <em>Log Domains</em> without having
an explicit mandate for that. It just always does. If no configuration plug-ins are set, nothing
is read, ALox will not complain. However, if it finds configuration data that influences
the \e Verbosity setting of <em>Log Domains</em> you are using, then you will get noted by ALox as soon as
you have activated \ref man_internal_domains "Internal Logging".

Before it is explained how the format of configuration looks like, lets talk about two important
topics in respect to the priority values given in the table above.

1. <b>%PrioDefault</b><br>
As we have learned, constant <b>%Configuration.PrioDefault</b> is the default value for optional
parameter \p priority of method <b>%Lox.SetVerbosity</b>. Having the lowest value of all constants,
this shows that any external configuration by default overwrites what is defined as
for the \e Verbosity "in the source code".<br>
When you consider what was said in the introduction section of this chapter, then this makes
perfect sense: Once you have defined your \e Verbosities externally, you do not need to care
if team members put their own preferred "temporary" <c>%Lox.SetVerbosity</c> invocations into
the source. Your setup is just not affected by this!<br>
Consider settings made in the source code as pure default values - at least as long as you do
not explicitly provide a different priority when invokeing the method.
<br>

2. <b>%Configuration.PrioProtected</b><br>
We have not talked about this one, although there are situations when using this might become
very important:
\attention
  In some use cases, logging may become a critical key feature of an application. For example
  when collection metrics from the field with deployed applications.
  In this case, a programmer may want
  to disallow to disable such logging. This can be achieved using priority constant
  <b>%Configuration.PrioProtected</b> with method
  <b>%Lox.SetVerbosity</b>
  ([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
   [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
   [Java](@ref #com::aworx::lox::Lox::setVerbosity)). A <em>Log Domain</em> can not be "deactivated" with
  command line parameters or environment variables, as soon as this priority value is used.


\~Comment ####################################################################################### \~
# 4. Variable LOXNAME_LOGGERNAME_VERBOSITY # {#man_external_verbosity_configuration_variable}

This was a lot of theory, before we now finally come to to the definition of the configuration
variable itself. When a \e %Logger is registered with an instance of class \b %Lox, ALox tries
to read configuration variable \b ALOX_LOXNAME_LOGGERNAME_VERBOSITY.
(This is done also whenever a new <em>Log Domain</em> is used and hence created on the fly.)

The portions <c>'LOXNAME'</c> and <c>'LOGGERNAME'</c> of the variable name have to be replaced by
the names of the instances of \b %Lox and \b %Logger in question.

Its format is:

<c> ALOX_\<LOXNAME\>_\<LOGGERNAME\>_VERBOSITY = [ writeback [ VAR_NAME ] ; ]  [*]domainpath[*] = verbosity [ ; &hellip; ] </c>

Let quickly forget about the optional argument 'writeback' (we come back to this in the
necht section) and just concentrate on:

<c> [*]domainpath[*] = verbosity </c>

which can appear repeatedly separated by a semicolon <c>';'</c>.
The pairs of  \p domainpath and \p verbosity have the following meaning:

- <c>domainpath</c> denotes the path of the <em>Log Domain</em> whose \e Verbosity
  is to be set. Optionally the value may contain wildcard character <c>'*'</c>
  at the beginning or end of the string or at both places.<br>

- <b>Parameter verbosity</b><br>
  The verbosity value as listed in enum class
  <b>%Verbosity</b>
  ([C++] (@ref      #aworx::lox::Verbosity),
   [C#]  (@ref  #cs::aworx::lox::Verbosity),
   [Java](@ref #com::aworx::lox::Verbosity)). The names given here are treated case insensitive.

With having the ability to provide wildcards, the possibilities to define the \e Verbosity
is a little different than when using method
<b>%Lox.SetVerbosity</b>
  ([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
   [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
   [Java](@ref #com::aworx::lox::Lox::setVerbosity))! The differences are:

- Using configuration variables it is possible to fetch <em>Log Domains</em> which are residing in different
  sub-domain trees. For example, setting <c>'*ERRORS*'</c>, affects any <em>Log Domain</em> with this substring
  in the path, like

        /ERRORS
        /UI/DIALOGS/ERRORS
        /COMM/ERRORS/SEVERE

  This is not possible with using method \b %Lox.SetVerbosity which always modifies exactly
  one <em>Log Domain</em> and its sub-domains..

- Using method \b %Lox.SetVerbosity, it is possible to use "relative path addressing", which
  means, a <em>Log Domain</em> or sub-domain of the evaluated, currently applicable domain resulting from
  <em>Scope Domains</em>, set can be addressed. Although it is not often recommended to do so, sometimes
  this possibility might be very helpful. For example to do a quick, temporary setting or for
  settings that are made explicitly "programatically", meaning those  who are depending on state
  conditions of a software)

In general, as already described, controlling the \e Verbosity using configuration variables
is preferred over using method <b>%Lox.SetVerbosity</b>. This is the reason why ALox
does not provide an interface method to set "rules", similar to those coming from configuration
variables from within the source code.

\note
  If you really, urgently want to have the same flexibility of setting the \e Verbosity for
  \b patterns of <em>Log Domain</em> paths from within your code, then your way to go is to save
  a corresponding configuration variable into the in-memory configuration plug-in
  found in field
    <b>%Configuration.DefaultValues</b>
     ([C++] (@ref      #aworx::lib::config::Configuration.DefaultValues),
      [C#]  (@ref  #cs::aworx::lib::config::Configuration.DefaultValues),
      [Java](@ref #com::aworx::lib::config::Configuration.defaultValues)) of the public static
  singleton of class \b %Configuration found in field
    <b>%ALIB.Config</b>
     ([C++] (@ref      #aworx::lib::ALIB::Config),
      [C#]  (@ref  #cs::aworx::lib::ALIB::Config),
      [Java](@ref #com::aworx::lib::ALIB::config)).
  Of-course,you do this instead of invoking \b %Lox.SetVerbosity.

\note
  Source code samples of how this is concretely done in the programming language of your choice
  can be found in the unit tests of ALox.

<p>
\note
  To address the internal domain tree (see \ref man_internal_domains), provide string
  \b "INTERNAL_DOMAINS" for parameter \c domainpath. This can also be used as a prefix e.g.

        INTERNAL_DOMAINS/REPORT = verbose ;
  However, a \e Logger that is not configured to log on internal <em>Log Domain</em>, can not
  be enabled for doing so using this configuration variable. A \e Logger
  has to be 'added' to the internal <em>Log Domain</em> tree once by the
  software itself. This behavior is wanted and similiar to the fact that a <em>Logger</em>
  can not be added to a different \b %Lox instance by just adding the verbosity setting
  variable on the command line!


\~Comment ####################################################################################### \~
# 5. Let ALox Write the Variable  # {#man_external_verbosity_configuration_variable_writeback}

We had so far ignored the portion <c> [ writeback [ VAR_NAME ] ; ] </c>
of configuration variable

<c> ALOX_\<LOXNAME\>_\<LOGGERNAME\>_VERBOSITY = [ writeback [ VAR_NAME ] ; ]  [*]domainpath[*] = verbosity [ ; &hellip; ] </c>


The \b 'writeback' option tells ALox to write all verbosities back to the
configuration as soon as a \e Logger is removed from a \b %Lox object.

\note
  Of-course, a write-enabled configuration plug-in needs to be attached to public static singleton
  <b>%ALIB.Config</b>
    ([C++] (@ref      #aworx::lib::ALIB::Config),
     [C#]  (@ref  #cs::aworx::lib::ALIB::Config),
     [Java](@ref #com::aworx::lib::ALIB::config)). The simplest type is found with class
  <b>%IniFile</b>
    ([C++] (@ref      #aworx::lib::config::IniFile),
     [C#]  (@ref  #cs::aworx::lib::config::IniFile),
     [Java](@ref #com::aworx::lib::config::IniFile)).
  See the ALox samples on how to create and attach an ALib INI file to your
  software on bootstrap with just two lines of code. The following snippet is taken
  from C#:
  \snippet "../alox.samples/ALoxSamples.cs"        DOXYGEN_CREATE_INIFILE
  \snippet "../alox.samples/ALoxSamples.cs"        DOXYGEN_REMOVE_INIFILE


Having ALox writing back the verbosities to your configuration is quite useful,
for example, if you have an empty INI file and you want to start
configuring ALox using this. Instead of manually building the variable, all you
need to do is adding section and variable:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = writeback

The variable name addresses the default debug \e Logger which is called
\b DEBUG_LOGGER and the default debug \b %Lox wich is called \b LOG.

Now after your next run of your application, ALox will have written back
the current configuration and your INI might look like this:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = writeback;         \
                                     /                   =Info;        \
                                     /ACTION             =Info;        \
                                     /AWAX               =Info;        \
                                     /CMDLINE            =Info;        \
                                     /TILE               =Info;        \
                                     /WMI                =Info;        \
                                     /WMI/XLIB           =Info;        \
                                     /WMI/XLIB/RANDR     =Info;        \
                                     /WMI/XLIB/X11       =Info;        \


This of-course saves you some work. But there are more benefits. As you see,
ALox preserves the attribute \p writeback in the variable. And you should
keep this in. This way, on the next run of your software, the list might get
extended by <em>Log Domains</em> that had not been registered on the previous
runs. The reason is that ALox recognizes only those domains that are actually
used (independend from their \e Verbosity setting). Subsequent runs may
have different execution paths and this way might "touch" other <em>Log Domains</em>.

As ALox reads the the variable during the runs, any change you make in the
INI-file is well kept.

\note
    When manually changing \e Verbosities it is OK to just use one character
    for the setting. E.g. change an "Info" to "w". Next time you run the
    application, ALox will write "Warning" and format the string accurately.


Let's imagine the developer of the application sampled above has some
problems with interfacing the XWindow library. Hence, he or she would focus
on the relevant domains and change the \e Verbosities to this:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = writeback;         \
                                     /                   =Warning;     \
                                     /ACTION             =Warning;     \
                                     /AWAX               =Info;        \
                                     /CMDLINE            =Off;         \
                                     /TILE               =Off;         \
                                     /WMI                =Info;        \
                                     /WMI/XLIB           =Verbose;     \
                                     /WMI/XLIB/RANDR     =Warning;     \
                                     /WMI/XLIB/X11       =Verbose;     \

Now, the X11 problems were fixed. However, the developer likes the detailing of
the settings and aims to preserve them for the future. All he/she needs to
do, is to add optional parameter \b VAR_NAME of the write back argument
<c> [ writeback [ VAR_NAME ] ; ] </c>. The arbitrary variable name
\b MYSTUFF_X11_DEBUG_VERB is added as shown here:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = writeback MYSTUFF_X11_DEBUG_VERB; \
                                     /                   =Warning;     \
                                     /ACTION             =Warning;     \
                                     /AWAX               =Info;        \
                                     /CMDLINE            =Off;         \
                                     /TILE               =Off;         \
                                     /WMI                =Info;        \
                                     /WMI/XLIB           =Verbose;     \
                                     /WMI/XLIB/RANDR     =Warning;     \
                                     /WMI/XLIB/X11       =Verbose;     \

After the next run, the INI file will contain:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = writeback MYSTUFF_X11_DEBUG_VERB; \
                                     /                   =Warning;     \
                                     /ACTION             =Warning;     \
                                     /AWAX               =Info;        \
                                     /CMDLINE            =Off;         \
                                     /TILE               =Off;         \
                                     /WMI                =Info;        \
                                     /WMI/XLIB           =Verbose;     \
                                     /WMI/XLIB/RANDR     =Warning;     \
                                     /WMI/XLIB/X11       =Verbose;     \


        [MYSTUFF]

        # Created at runtime through config option 'writeback' in variable "ALOX_LOG_DEBUG_LOGGER_VERBOSITY".
        X11_DEBUG_VERB=              /                   =Warning;     \
                                     /                   =Warning;     \
                                     /ACTION             =Warning;     \
                                     /AWAX               =Info;        \
                                     /CMDLINE            =Off;         \
                                     /TILE               =Off;         \
                                     /WMI                =Info;        \
                                     /WMI/XLIB           =Verbose;     \
                                     /WMI/XLIB/RANDR     =Warning;     \
                                     /WMI/XLIB/X11       =Verbose;     \



As you see, ALox created INI file section \b MYSTUFF and added the variable
we specified.
You can still fine-tune the verbosity setting in \b LOG_DEBUG_LOGGER_VERBOSITY
or chose different execution paths of your software. On each run, ALox will
save what is found in variable \b ALOX_LOG_DEBUG_LOGGER_VERBOSITY to
variable \b MYSTUFF_X11_DEBUG_VERB! Once you think that
the setting is OK, you can stop the \p writeback feature by changing the
\e Loggers \e Verbosity setting in the INI file to:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = $MYSTUFF_X11_DEBUG_VERB

        [MYSTUFF]
        ...
        ...

Now we are using a feature of the ALib configuration system called
<b>Variable Substitution</b>
  ([C++] (@ref  cpp_alib_namespace_config_substitution),
   [C#]  (@ref   cs_alib_namespace_config_substitution),
   [Java](@ref java_alib_namespace_config_substitution)):
With the preceding \c '$' symbol (this is
the default and can be changed), class \b Configuration substitutes what is
\b "$MYSTUFF_X11_DEBUG_VERB" with the corresponding variable.

To conclude, lets take some further notes on what was said above:

- What was done above, of-course might be repeated and different sets of \e Verbosities might
  be saved in different custom variables. Once this is done, switching the
  verbosities between different "debug use-cases", is a matter of changing
  the substitution variable in variable \b LOXNAME_LOGGERNAME_VERBOSITY.

- Of-course, the configuration sets stored can be shortened easily to
  contain only non-redundant information. ALox, when writing the variable,
  includes all sub-domains in the list of settings, even
  those that have the same \e Verbosity as their parent domain.
  This is intentionally done to support the user and decrease typing.

  Once a setting is fixed, all redundant lines can be deleted easily - but again
  this is not necessary even, it might just increase readability and shorten
  the configuration file.

- When execution paths are changing between different runs, ALox will remove
  \e Verbosity information provided, if a <em>Log Domain</em> was not used.
  The advantage of this is, that when <em>Log Domains</em> are renamed in
  the source code, no "garbage" remains in the config file - at least for
  freshly written variables. If you want to compare an 'old' variable with what
  the difference would be using the newest version of your software,
  variable \b ALOX_LOG_DEBUG_LOGGER_VERBOSITY can be set as follows:

        [ALOX]
        LOG_DEBUG_LOGGER_VERBOSITY = writeback MY_NEW_VAR ; $MY_OLD_VAR

  After running the software \b MY_NEW_VAR will not contain <em>Log Domains</em>
  that are not existing any more (or have not been touched by the execution path!)
  but will contain new domains (or those that previously had not been touched
  by the execution path).

- For the variable name optionally provided with argument \p writeback,
  if in anonymous category, the same rules on using the underscore
  character \c '_' apply as it is described in
  <b>Variable Substitution</b>
   ([C++] (@ref  cpp_alib_namespace_config_substitution),
    [C#]  (@ref   cs_alib_namespace_config_substitution),
    [Java](@ref java_alib_namespace_config_substitution)).

- With more complex use cases, there are even new options: For example,
  when having different configuration files like system-wide and user specific
  files, with a deployed application, substituted variables might reside
  "fixed" in the system-wide configuration, while each user locally
  can address these variables and use them. Or, a command line parameter could
  use a variable substitution with the substitute residing in a configuration file.

- The whole concept can also be used 'in code'. As a sample think of
  a command line application that provides different "own verbosities"
  with a command line parameter like <c>\-\-verbosity \<val\></c>.
  Now, the software could write a variable of e.g. \b ALOX_REL_CONSOLE_VERBOSITY
  (a release logger responsible for the software's standard output)
  into either
  <b>%Configuration.DefaultValues</b>
    ([C++] (@ref      #aworx::lib::config::Configuration::DefaultValues),
     [C#]  (@ref  #cs::aworx::lib::config::Configuration::DefaultValues),
     [Java](@ref #com::aworx::lib::config::Configuration::defaultValues)) or
  <b>%Configuration.ProtectedValues</b>
    ([C++] (@ref      #aworx::lib::config::Configuration::ProtectedValues),
     [C#]  (@ref  #cs::aworx::lib::config::Configuration::ProtectedValues),
     [Java](@ref #com::aworx::lib::config::Configuration::protectedValues))
  (use the latter to disallow the user to hack in).
  The value of the variable set 'in code' would either contain
  substituted system-wide external variables, or hard-coded strings (again, depending
  on the necessary protection level of the software).


\~Comment ####################################################################################### \~
# 6. Wrap-up # {#man_external_verbosity_configuration_wrapup}

As a summary, these are the takeaways of this chapter:

- ALox has an optional \p priority with method \b %Lox.SetVerbosity which is fully orthogonal
  in its use. This means, when omitted ALox works as if this feature was not existing.
- The priority of \e Verbosity settings taken by itself is not a fundamental game changer in
  respect to the flexibility and overall value of ALox. Nevertheless in some situations,
  some tricky things might be performed. (OK, here is another sample: an external library periodically
  changes the \e Verbosity of certain <em>Log Domains</em> - which by design it should not do. As we do not
  have access to the source code of that library, using a higher \p priority for a setting
  from outside the library fixes this)
- The recommended way to set \e Verbosities - especially when working in a team - is to use
  external configuration variables.
- It is possible to overwrite different data sources, e.g. use an environment variable to
  overwrite what is given in an iniFile. Or to have two INI files, one local, user dependent
  and one general, public instance. The user-dependent INI file may modify (overwrite) settings
  of the general one.
- In special situations it is recommended to protect certain <em>Log Domains</em> from being changed
  at run-time. This is done by explicitly providing
  <b>%Configuration.PrioProtected</b>
  ([C++] (@ref      #aworx::lib::config::Configuration::PrioProtected),
   [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioProtected),
   [Java](@ref #com::aworx::lib::config::Configuration::PRIO_PROTECTED)) to method \b %Lox.SetVerbosity.
  A similar issue is described for <em>Domain Substitution</em>
  \ref man_domain_substitution_config_prevent "here".
- External setting of \e Verbosity has different (partly more, partly less) possibilities
  in comparison to "programatically" setting. A way to extend the programatical setting
  to work the same as external configuration is by usin an in-memory INI file.

--------------------------------------------------------------------
<center>Next chapter: \ref man_trim_source_path </center> <center> \ref manual "Back to index" </center>

*/
