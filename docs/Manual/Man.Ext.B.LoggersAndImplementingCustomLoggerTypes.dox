// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page man_ext_loggers        B - Loggers and Implementing Custom Types

\tableofcontents


\~Comment ####################################################################################### \~
# 1. Class Logger # {#man_loggers_logger}

ALox is designed to support different log streams. A log stream is a destination of log messages
and can be the IDE console, the terminal console, a file, a web service or anything that accepts
data streams. The abstract class
<b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
represents such a log stream. While some implementations of class \e Logger are provided with the ALox package,
the system allows custom implementations of \e Loggers that log information to any 'data drain' in
any format you like.

\dot
digraph logger
{
    node [shape=record, fontname=Courier];
    edge [shape=record, fontname=Helvetica];
    logger  [ label="Logger (Abstract)"            URL="\ref com.aworx.lox.core.Logger"];
    cl      [ label="ConsoleLogger"     URL="\ref com.aworx.lox.loggers.ConsoleLogger"];
    ml      [ label="MemoryLogger"      URL="\ref com.aworx.lox.loggers.MemoryLogger"];
    tf      [ label="TextFileLogger"    URL="\ref com.aworx.lox.loggers.TextFileLogger"];
    my      [ label="MyCustomLogger"  ];
    logger -> cl   [ arrowhead="open", style="dashed" ];
    logger -> ml   [ arrowhead="open", style="dashed" ];
    logger -> tf   [ arrowhead="open", style="dashed" ];
    logger -> my   [ arrowhead="open", style="dashed" ];
}
\enddot

Abstract class \b %Logger has a very lean interface, in fact it is basically method
\c Log() which in specialized classes needs to be implemented to execute a log. The log contents is
not really a \e 'message' because it is not a string type. Instead its of type \c Object (Java, C#)
respectively
<c>void*</c> with an associated type value in C++. This allows to create \e Loggers that take binary
data, resource locators (URLs) or whatever a programmer has in mind. Of-course, tailored \e Loggers may
'log' such data however they prefer.

While all ALox code tries to be short and simple, class
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
is particularly simple!
So, let us quickly walk through the class by looking at its members.

\~Comment ####################################################################################### \~
## 1.1 The fields of class Logger ## {#man_loggers_logger_fields}
There are just a few fields in class
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger)):

\~Comment ####################################################################################### \~
### 1.1.1 Name and TypeName ### {#man_loggers_logger_fields_name}
class \b %Logger has two members,
<b>name</b>
  ([C++] (@ref #aworx::lox::core::Logger::name),
   [C#]  (@ref #cs::aworx::lox::core::Logger::name),
   [Java](@ref #com::aworx::lox::core::Logger::name)) and
<b>typeName</b>
  ([C++] (@ref #aworx::lox::core::Logger::typeName),
   [C#]  (@ref #cs::aworx::lox::core::Logger::typeName),
   [Java](@ref #com::aworx::lox::core::Logger::typeName)) that can be read using.
<b>GetName</b>
  ([C++] (@ref #aworx::lox::core::Logger::GetName),
   [C#]  (@ref #cs::aworx::lox::core::Logger::GetName),
   [Java](@ref #com::aworx::lox::core::Logger::getName)) and
<b>GetTypNamee</b>
  ([C++] (@ref #aworx::lox::core::Logger::GetTypeName),
   [C#]  (@ref #cs::aworx::lox::core::Logger::GetTypeName),
   [Java](@ref #com::aworx::lox::core::Logger::getTypeName)).

Field \b name is defined by the user and provided with the constructor. Field \b typeName is
'hard-coded' by each derived classes constructor. If the user of a \e Logger does not provide a name
in the constructor, then field \b name defaults to the hard-coded \b typeName.
Both fields are not used internally but only provided to be used by classes managing multiple \e Loggers
(which generally is class
  <b>Lox</b>
  ([C++] (@ref #aworx::lox::Lox),
   [C#]  (@ref #cs::aworx::lox::Lox),
   [Java](@ref #com::aworx::lox::Lox))).

If multiple \e Loggers are attached to a \b Lox, they need to to have unique \e Names.

\~Comment ####################################################################################### \~
### 1.1.2 TimeOfCreation and TimeOfLastLog ### {#man_loggers_logger_fields_TimeOf}
These are two time stamps that contain the time of the creation of the
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
(or the time this timestamp was reset to) and the time of the last log. These two members
are normally used to calculate the elapsed time (the cumulated time an application is running)
and the time difference between two log calls. The latter is especially interesting for
log outputs on a debug console, as it allows to get for a first quick impression about your
software's performance, lock states, bottlenecks, etc.

### 1.1.3 CntLogs ### {#man_loggers_logger_fields_CntLogs}
This is a simple counter of the number of logs processed so far. Feel free to
reset it as you like, it is not used anywhere internally, other than as an option
to output with each log line.


\~Comment ####################################################################################### \~
## 1.2 Methods of class Logger ## {#man_loggers_logger_methods}

Besides the protected constructor, which just initializes some default values for the \e Loggers'
fields, abstract method
<b>Log</b>
  ([C++] (@ref      #aworx::lox::core::Logger::Log),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::Log),
   [Java](@ref #com::aworx::lox::core::Logger::log)) is the most important.

Derived classes only need to implement this abstract method and within that no checks, setting of
timestamps or anything else but executing the <em>Log Statement</em> needs to happen. Class \b Lox already
set such fields and checked the \b Verbosity before invoking method \b Log.

## 1.3 Implementing a custom *Logger* ## {#man_loggers_logger_customloggers}
As an experienced programmer after reading the previous sections, it is certainly fully obvious
to you which steps need to be taken to create your own variation of class
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
that directs your logged objects to a certain data drain in a specific format.
Nevertheless, let us quickly name these steps explicitly:

- Create your own class derived from class \e Logger.
- Add a constructor that takes a user-defined name and pass this name along with a hard-coded
  string representing the type of your \e %Logger, to the base constructor.
- Implement the abstract method \b Log by
  converting and streaming the given objects into a custom data 'drain'.
- In the main code entity add an instance of your custom \e %Logger type to the
  <b>Lox</b>
  ([C++] (@ref #aworx::lox::Lox),
   [C#]  (@ref #cs::aworx::lox::Lox),
   [Java](@ref #com::aworx::lox::Lox)) of your choice.

But before you now go ahead and implement your own \e Logger type class, you should first continue reading
through this chapter.


\~Comment ####################################################################################### \~
# 2. Abstract class TextLogger # {#man_loggers_textlogger}

When you think about debug log output you think about logging textual messages that
get displayed on your debug console. We think using any logging ecosystem for this
quite simple purpose should be mandatory to all software projects that goes beyond
two pages of code!

While ALox wants to be a perfect tool for quick, easy and comfortable debug logging,
the goals of ALox go beyond that. This is why ALox logging interface methods
are not restricted to string types, but accept any object to be passed to any derived
\e Logger type.

It is very important to understand this. The result is twofold:

- For textual (e.g. debug) logging, any object that is logged needs to get converted into a textual
  representation (a human readable format).
- Custom \e Logger types are enabled to log data of an application in a very custom
  way, as these \e Loggers get the original object passed.

The class
<b>TextLogger</b>
  ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
which is described in this chapter, is exactly about the first thing: Log any object that
is passed to it as a textual representation, hence into a character stream.
All of the provided ALox \e Loggers that produce text output, derive from this base
class instead of deriving directly from \e Logger. Among these classes are
<b>ConsoleLogger</b>
  ([C++] (@ref #aworx::lox::loggers::ConsoleLogger),
   [C#]  (@ref #cs::aworx::lox::loggers::ConsoleLogger),
   [Java](@ref #com::aworx::lox::loggers::ConsoleLogger))
and
<b>MemoryLogger</b>
  ([C++] (@ref #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)).
Hence, the class diagram above is a little simplified.
It rather looks like this:

\dot
digraph TextLoggers
{
    node [shape=record, fontname=Helvetica];
    edge [shape=record, fontname=Helvetica];
    logger  [ label="Logger"            URL="\ref cs.aworx.lox.core.Logger"];
    tlogger [ label="TextLogger"        URL="\ref cs.aworx.lox.core.textlogger.TextLogger"];
    cl      [ label="ConsoleLogger"     URL="\ref cs.aworx.lox.loggers.ConsoleLogger"];
    ml      [ label="MemoryLogger"      URL="\ref cs.aworx.lox.loggers.MemoryLogger"];
    my      [ label="MyCustomTextLogger"  ];
     logger   -> tlogger [ arrowhead="open", style="dashed" ];
     tlogger  -> cl      [ arrowhead="open", style="dashed" ];
     tlogger  -> ml      [ arrowhead="open", style="dashed" ];
     tlogger  -> my      [ arrowhead="open", style="dashed" ];
}
\enddot

\note
 - Even this diagram is simplified. Refer to the language specific reference documentation of class
   <b>TextLogger</b>
    ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
     [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
     [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) to get the full picture.
 - Of-course you can also derive your own *Logger* types without using the TextLogger class
   and still do pure textual logging.

\~Comment ####################################################################################### \~
## 2.1 Helper classes for TextLogger ## {#man_loggers_textlogger_helpers}
Class
  <b>TextLogger</b>
  ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
contains two helper classes as public fields.
The advantage of using helpers is that they can be replaced at runtime by your own, tailored
versions of these helpers and this way you can change the default behavior of existing \e Logger types, like
  <b>AnsiLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::AnsiLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::AnsiLogger),
   [Java](@ref #com::aworx::lox::loggers::AnsiLogger)) or
  <b>MemoryLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)) without deriving new ones.

The helper classes are described in the following two paragraphs.

\~Comment ####################################################################################### \~
### 2.1.1 Class MetaInfo ### {#man_loggers_textlogger_MetaInfo}
Class
  <b>MetaInfo</b>
  ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::MetaInfo),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo))
is used by
class
  <b>TextLogger</b>
  ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
to  assemble the meta information of each log line, which incorporates things like date and time,
thread information, \e Verbosity and <em>Log Domain</em>.
MetaInfo provides a public format string that defines the start (prefix) of each
log line. A sample of such format string (in ALox for C#) is:

    "%SF(%SL):%SM()%A3[%DD] [%TD][%TC +%TL][%tN]%V[%D]<%#>: "

The format string contains variables, marked by a leading '\%' sign.
The set of these format variables available are:

<center>Variable</center>| Description
- - - - - - - - - - - - -| - - - - - - - -
 <center> SP </center>   | The full path of the source file (in Java: The callers' package name).
 <center> Sp </center>   | The trimmed path of the source file (in Java not available).
 <center> SF </center>   | The callers' source file name.
 <center> Sf </center>   | The callers' source file name without extension (in Java not available).
 <center> SC </center>   | The callers' class name (Java only!).
 <center> SL </center>   | The line number in the callers' source file.
 <center> SM </center>   | The callers' method name.
 <center> TD </center>   | The date the log call was invoked.
 <center> TT </center>   | Time of day the log call was invoked.
 <center> TC </center>   | Time elapsed since the \e Logger was created or its timer was reset.
 <center> TL </center>   | Time elapsed since the last log call. Note: These time values do not sum up correctly. This is not only because of rounding errors, but also because the time between the "end" of the last log call and the "beginning" of this log call is measured. This has the advantage that a quite accurate value of "elapsed time since the last log call" is displayed and hence a very good performance indicator is provided.
 <center> tN </center>   | Thread name
 <center> tI </center>   | Thread ID.
 <center> V  </center>   | The \e Verbosity. For the display of the different values, \b %MetaInfo exposes four public fields containing string definitions.
 <center> D  </center>   | The <em>Log Domains</em>' full path.
 <center> #  </center>   | The log call counter (like a line counter, but counting multi-line log output as one).
 <center> An </center>   | An auto-adjusted tabulator. This grows whenever it needs to grow, but never shrinks. The mandatory number n (a character between 0 and 9) specifies how much extra space is added when tab is adjusted. This is useful to achieve very clean column formatting.
 <center> LG </center>   | The name of the \e Logger. This might be useful if multiple loggers write to the same output stream (e.g. the console).
 <center> LX </center>   | The name of the \e Lox.
 <center> P  </center>   | The name of the process / application.

\note The available format variables vary slightly across programming languages and platforms supported by
      ALox. The details are documented in the corresponding class reference of
      <b>MetaInfo.Format</b>
      ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo::Format),
       [C#]  (@ref #cs::aworx::lox::core::textlogger::MetaInfo::Format),
       [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo::format)).
<p>
\note Class \b TextLogger prepends the meta information to the decoded log object
      and therefore, the message itself is not provided as a format string variable.
      This restriction is a mandatory for the multi-line features of TextLogger (see below).

Changing the format string
<b>MetaInfo.Format</b>
 ([C++] (@ref      #aworx::lox::core::textlogger::MetaInfo::Format),
  [C#]  (@ref  #cs::aworx::lox::core::textlogger::MetaInfo::Format),
  [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo::format))
provides an easy way to change the look of your log output. For example, if you are not interested
in thread information, just remove the "[%tN] " part from the original string.

If you want to modify the output of a certain variable or if you want to add your own variables,
you can derive your on implementation of *MetaInfo* and overwrite the virtual method
<b>MetaInfo.processVariable</b>
  ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo::processVariable),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo::processVariable),
  [Java] (@ref #com::aworx::lox::core::textlogger::MetaInfo::processVariable))
Within the implementation, just fetch your own variables and/or modify existing and call
the original method for the rest that you do not want to modify.

Finally, if you really want to customize the logging of meta information in the class *TextLogger*
completely and maybe do not want to even rely on a format string, then feel free to derive
your on implementation of *MetaInfo* and overwrite the virtual method
<b>MetaInfo.Write</b>
  ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo::Write),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo::Write),
  [Java] (@ref #com::aworx::lox::core::textlogger::MetaInfo::write))!

\~Comment ####################################################################################### \~
### 2.1.2 Class ObjectConverter ### {#man_loggers_textlogger_ObjectConverter}
Class
<b>ObjectConverter</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::ObjectConverter),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::ObjectConverter),
   [Java](@ref #com::aworx::lox::core::textlogger::ObjectConverter))
is used by class
<b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
to convert the *message object* that gets passed by the user through the ALox API to the
\e %Logger into a String representation. If you look at the code, you see that the default
implementation handles language specific string type objects and ALib string types, e.g.
  <b>AString</b>
  ([C++] (@ref #aworx::lib::strings::AString),
   [C#]  (@ref #cs::aworx::lib::strings::AString),
   [Java](@ref #com::aworx::lib::strings::AString)).
In addition, null values get translated to a (configurable) string constant.

In the <em> Java and \e C# versions </em> of ALib, all other objects are translated using method
\b toString, respectively \b ToString.
Now, if you want to provide a custom log format for your own classes, you might not want to
overload the *ToString()* methods of these classes, because this is considered debug code that
does not belong to your core classes! The solution is to create a class derived from
  <b>%ObjectConverter</b>
  ([C++] (@ref #aworx::lox::core::textlogger::ObjectConverter),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::ObjectConverter),
   [Java](@ref #com::aworx::lox::core::textlogger::ObjectConverter))
and provide a special treatment for your classes. Just attach your custom *ObjectConverter*
to the field
<b>%TextLogger.ObjectConverters</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger.ObjectConverters),
  [C#]   (@ref  #cs::aworx::lox::core::textlogger::TextLogger.ObjectConverters),
  [Java] (@ref #com::aworx::lox::core::textlogger::TextLogger.objectConverters))
after you created a \e Logger of type class *TextLogger* (specialized type).


In the <em>C++ version</em> of ALib, things are a little more complicated but for the main use case,
which is logging strings, this sorts out nicely. Here, the log object is defined as a <em>void*</em>
and is accompanied by an \e int value that defines the objects' type. There is only one type
predefined (type value \e '0') and this is type
\ref aworx::lib::strings::TString "aworx::TString (C++)". Class
\ref aworx::lox::Lox "Lox (C++)" provides overloaded methods for either logging such strings or
for logging arbitrary objects of type <em>void*</em>. The good news is, that \b aworx::TString
is implicitly created from standard C++ string types like <em>char*</em> or <em>std::string</em>
as well as from user defined string types. This makes it very convenient to log strings and opens
two different ways to log third party string types:
- Provide an own implementation of class \b ObjectConverter and log custom strings using the
  corresponding interface methods of class \b Lox with providing a custom object type identifier, or
- Add specializations of dedicated template methods as described in
  \ref aworx::lib::strings "Namespace 'aworx::lib::strings' in ALib for C++" that enable the implicit (!)
  conversion of user defined string types into objects of type \b aworx::TString.

Certainly, the second option is preferred, as the implicit conversion is fast and the <em>Log Statements</em>
keep being very convenient and easily readable. In addition, it is possible to make any other
user defined type (that is not a typical string type) compatible with the \b Apply method of
type \b aworx::AString. This then allows to \e 'embed' user defined objects in concatenated
string creations just within the <em>Log Statements</em>' parameter list.

<p>
\note  In <em>C# and Java versions</em> of ALox, the logging of arbitrary complex objects is additionaly
       supported with class
       <b>LogTools</b>
       ([C#]   (@ref #cs::aworx::lox::tools::LogTools),
        [Java] (@ref #com::aworx::lox::tools::LogTools)).<br>
       This class makes use of the reflection APIs of these languages and creates a
       nicely formatted output.
       Using this class is an alternative to the creation of a dedicated \b ObjectConverter for such types.

\~Comment ####################################################################################### \~
## 2.2 The multi-line features of class TextLogger ## {#man_loggers_textlogger_multiline}
Class
  <b>%TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
provides a feature to log a message into multiple lines.
This is useful for example, if you want to log a string that contains XML text.
Instead of one very wide log line, *TextLogger* is configured by default to separate the text
into multiple lines in a very controlled way.

Multi-line output behavior of class *TextLogger* is configured by the field
<b>%TextLogger.MultiLineMsgMode</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::MultiLineMsgMode),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::MultiLineMsgMode),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineMsgMode)).

The following modes are available:

- 0: Multi-line mode off<br>
  In this mode, the text is not split into multiple lines. However, certain log streams, for example
  a system console window, will split the msg autonomously if the message contains line end characters
  (CR, LF or CRLF).
  Therefore, using this mode, it is recommended to set the fields
  <b>%TextLogger.MultiLineDelimiter</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineDelimiter))
  and
  <b>%TextLogger.MultiLineDelimiterRepl</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::MultiLineDelimiterRepl),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::MultiLineDelimiterRepl),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineDelimiterRepl))
  in a way that your log file does not get cluttered.

- 1: Multi-line mode with all meta information repeated in each log line<br>

- 2: Multi-line mode with blanked meta information starting with second log line.<br>
  This is the default, because this setting makes it easy to visually recognize, that a log
  is continued in the next line and hence it is the best for debug window purposes!

- 3: Multi-line mode which writes a (configurable) headline message in the first log line.<br>
  All text lines of the multi-line text is logged starting in column zero.

- 4: Like multi-line mode 3, but without writing the headline.

\~Comment ####################################################################################### \~
## 2.3 Deriving your own \e Logger from class TextLogger ## {#man_loggers_textlogger_derive}
As mentioned above, class
<b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) is still abstract.
While it implements the abstract interface method
<b>Logger.Log</b>
  ([C++] (@ref      #aworx::lox::core::Logger::Log),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::Log),
   [Java](@ref #com::aworx::lox::core::Logger::log)) it introduces a new abstract interface method in turn!
This method is
<b>%TextLogger.logText</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::logText),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::logText),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::logText)).
Class \b TextLogger takes care to build the complete textual representation of the log line,
including meta information and the log message itself.

Now, the only thing that a simple derivate of *TextLogger* needs to do is to
overwrite this method and just copy (write) the provided buffer to its final destination.

Those custom \e Loggers that wish to ignore any special formatting and colorizing codes of class
<b>%ESC</b>
  ([C++] (@ref      #aworx::lox::ESC),
   [C#]  (@ref  #cs::aworx::lox::ESC),
   [Java](@ref #com::aworx::lox::ESC)) might rather want to extend abstract class
<b>PlainTextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::PlainTextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::PlainTextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::PlainTextLogger)) which takes care of the removal
of such codes. Class \b PlainTextLogger implements <b>%TextLogger.logText</b> and introduces
in turn other abstract methods. As a simple sample of how \b PlainTextLogger can be derived,
see the source code of class
<b>MemoryLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)).

On this topic, see also chapter \ref man_colorful_loggers.

\~Comment ####################################################################################### \~
## 2.4 Locking the Standard Output Streams ## {#man_loggers_textlogger_stdio_lock}

Class
<b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) optionally uses a facility
of ALib to avoid concurrent access to the <em>standard output stream</em> and
<em>standard error stream</em> available to most applications.

This feature is described in the reference documentation of
<b>%ALIB.StdOutputStreamsLock</b>
  ([C++] (@ref      #aworx::lib::ALIB::StdOutputStreamsLock),
   [C#]  (@ref  #cs::aworx::lib::ALIB::StdOutputStreamsLock),
   [Java](@ref #com::aworx::lib::ALIB::stdOutputStreamsLock)).

To enable the use of this locker for a custom types, all that has to be done is providing
value \c true for parameter \p usesStdStreams of the protected constructor of class \b TextLogger.

If an application writes to those streams in parallel to ALox (e.g. using \b std::cout in C++,
\b Console.WriteLine in C# or \b System.out.println in Java), then to avoid mixing such output
with ALox output, such direct writes should be performed only after the \b ALIB.StdOutputStreamsLock
was 'acquired'. Also, such application has to register once with \b ALIB.StdOutputStreamsLock.
Then, together with the \e Logger, the critical number of two 'acquirers' are reached and the
<b>%SmartLock</b>
  ([C++] (@ref      #aworx::lib::threads::SmartLock),
   [C#]  (@ref  #cs::aworx::lib::threads::SmartLock),
   [Java](@ref #com::aworx::lib::threads::SmartLock)) gets activated.

\~Comment ####################################################################################### \~
# 3. Logger implementations provided by ALox # {#man_loggers_implementations}

While the abstract classes \b % Logger, \b %TextLogger and \b %PlainTextLogger are located in the
namespaces (packages)
- <b>\[com.|cs.\]%aworx.lox.core</b>
 ([C++](@ref      #aworx::lox::core),
 [C#]  (@ref  #cs::aworx::lox::core),
 [Java](@ref #com::aworx::lox::core)) and
- <b>\[com.|cs.\]%aworx.lox.core::textlogger</b>
 ([C++](@ref      #aworx::lox::core::textlogger),
 [C#]  (@ref  #cs::aworx::lox::core::textlogger),
 [Java](@ref #com::aworx::lox::core::textlogger))

you can checkout which 'ready to use' \e %Logger implementations are available today for your
preferred language version of ALox, by referring to the reference documentation of namespace (package)

- <b>\[com.|cs.\]%aworx.lox.loggers</b>
 ([C++](@ref #aworx::lox::loggers),
 [C#]  (@ref #cs::aworx::lox::loggers),
 [Java](@ref #com::aworx::lox::loggers)).

For convenience, method
<b>%Lox.CreateConsoleLogger</b>
  ([C++] (@ref      #aworx::lox::Lox::CreateConsoleLogger ),
   [C#]  (@ref  #cs::aworx::lox::Lox::CreateConsoleLogger ),
   [Java](@ref #com::aworx::lox::Lox::createConsoleLogger )) is provided. This method chooses, dependent
on the runtime environment of a process, an appropriate implementation of class \b %Logger suitable
for human readable log output. E.g. for Linux and Windows console applications, different
\e %Loggers that are able to do colorful log output are chosen.

Furthermore, method
<b>%Log.AddDebugLogger</b>
  ([C++] (@ref      #aworx::lox::Log::AddDebugLogger ),
   [C#]  (@ref  #cs::aworx::lox::Log::AddDebugLogger ),
   [Java](@ref #com::aworx::lox::Log::addDebugLogger )) may even choose and add additional \e %Loggers
that are tailored to different IDEs.

A noteworthy, predefined implementation is found with class
 <b>MemoryLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)). It uses an internal character buffer of ALib-type
 <b>AString</b>
  ([C++] (@ref      #aworx::lib::strings::AString),
   [C#]  (@ref  #cs::aworx::lib::strings::AString),
   [Java](@ref #com::aworx::lib::strings::AString))
and just appends each log entry to this buffer, separated by a <em>new line</em> sequence.

As \b MemoryLogger does not log to the console or any other slow thing, is extremely fast. The latest
record was over on million log entries per second in a single-thread!
(Achieved on Intel(R) Haswell Core(TM) i7 CPU @4.0GHz, using ALox for C++, doing release logging.)

This gives an indication that the ALox ecosystem in combination with its \b MemoryLogger is extremely
useful in performance critical sections of your code. If you would do 100 log entries per second,
the performance loss for your application would be a maximum of 0.01%. (Yes, that is why
we love Bauhaus coding style.)

\~Comment ####################################################################################### \~
# 4. Summary and outlook # {#man_loggers_summary}

The following summarizes the takeaways of this chapter:
- We learned about class \b %Logger and its simple structure and few fields.
- Class *TextLogger* was introduced an explained in detail. We learned that TextLogger aims
  to be the abstract parent class of all \e Logger types that log messages in a human readable
  fashion.
- We saw how the output format of class *TextLogger* can be manipulated without introducing
  new code and also, more complex but powerful, with introducing new code.
- Furthermore, it was explained that ALox, with the help of underlying ALib provides a mechanism
  to lock standard output streams and protect against 'clashing' of output coming from different loggers
  or the application itself.
- Then we briefly looked at the currently existing \e Logger types in the ALox ecosystem.

If you developed an interesting \e %Logger, like one that
- is supporting a specific IDE with 'clickable' log lines
- is sending Emails
- is reporting to an analytics/metrics server
- is logging into the Linux journal or Windows OS event log

then please do not hesitate to propose the code to us as an extension of the open source project ALox!
<p>

--------------------------------------------------------------------
<center>Next chapter: \ref man_ext_namespaces </center> <center> \ref manual "Back to index" </center>

*/
