// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_man_external_configuration  12 - External Configuration

\tableofcontents

\~Comment ####################################################################################### \~
# 1. Introduction # {#alox_man_external_configuration_intro}

With the term <em>"external configuration"</em>, we are addressing any type of configuration
data that an application might have access to. The most common types of such configuration data
are:
- Command line parameters
- Environment variables and
- Configuration files, e.g. "INI files"

For reading such configuration data, \alox relies on the facilities provided by underlying utility
library \alib. Configuration mechanics of \alib are gathered in namespace
<b>[com::|cs::]%aworx::lib::config</b>. It is advisable to read the
<b>reference documentation</b>
 ([C++] (@ref      #aworx::lib::config),
  [C#]  (@ref  #cs::aworx::lib::config),
  [Java](@ref #com::aworx::lib::config)) of that namespace and its few classes.

<b>In short, the features of the %ALib configuration system are:</b>

- A public static singleton of class
  <b>%Configuration</b>
   ([C++] (@ref      #aworx::lib::config::Configuration),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration),
    [Java](@ref #com::aworx::lib::config::Configuration)) is found in field
  <b>%ALIB.Config</b>
   ([C++] (@ref      #aworx::lib::ALib::Config),
    [C#]  (@ref  #cs::aworx::lib::ALIB::Config),
    [Java](@ref #com::aworx::lib::ALIB::config)).

- Class \b %Configuration supports \b 'plug-ins' that read configuration data from different sources.

- Default plug-ins are those for reading <b>command-line parameters</b> and
  <b>environment variables</b>. In addition, a class to read (and write) INI files is provided
  and an instance of that class can easily be created and attached.
  \note
    But instead, \alib proposes to attach custom configuration file processing - use your own standard!
    What is need to be done is to write a small plug-in that translates requests to read (and
    if possible, also write) variables into your custom configuration system.

- The different \b plug-ins are asked for configuration data in a sequence defined by their
  \b priority. For example, command-line parameters have a higher priority than variables
  defined in an INI file. This way, command-line parameters 'overwrite' INI file entries.

- Variables can contain references to other variables. This concept named <b> variable substitution</b>,
  allows even more flexible configuration possibilities .

\~Comment ####################################################################################### \~
# 2. Relationship of ALox, Applications and Configuration Data # {#alox_man_external_configuration_relationship}

It may be very obvious to the reader, but lets spend a minute and think about the relationship
of \alox and applications using it.

- \alox is embedded as a library in applications, they live in one process.
- \alox longs to read external configuration data
- The application itself probably does this as well and probably disposes of a system to maintain and read such
  data already
- \alox may want to write default values into the configuration (if a variable was not found)


In most use cases, the goal now is to enable \alox to access (read and write) the configuration that is
already in place with the application. The huge benefit of this approach is, that no second configuration file or
database is needed. And this is exactly what \alib - and therewith \alox - allows to achieve.

Then, other use cases and variants are:
- Having separated configuration systems for the application and \alox. For documentation on
  how to do this, see method
    <b>%ALox::Init</b>
    ([C#]   (@ref  #cs::aworx::lox::ALox::Init(String[] args)),
     [Java] (@ref #com::aworx::lox::ALox::init(String[] args))).) respectively class
    \cpp_alib{lang,Library}
- Have \b no configuration system for %ALox: The most obvious reason why this might be wanted is that a
  developer of an %ALox enabled software might not want to allow the end user to reconfigure \alox (i.e. switching
  a \e Logger off that collects telemetric data).
- A mixed approach: Some \alox features should be configurable (from either configuration system) while
  other features should not be configurable from outside.
- Similar to this, some default values (that \alox creates on the fly) should automatically appear and be saved in
  the configuration. The benefit of this is that the user gets a fully filled configuration with maybe
  automatically commented entries that hints him/her to what is adjustable - all without reading manuals.
  Other of such \alox options probably should not automatically be saved. If not saved, these are regenerated as
  default values on the next run and again not be saved. A simple reason to disallow saving default values
  might be to avoid that the external configuration is being 'bloated' with \alox options that the user of an application is not
  interested in.

Finally, as \alox is a library, there might be more than one \alox enabled software running on the
same system. Now, for configuration sources like INI files and command line parameters, this is
not problematic. In the case of environment variables, it might become a problem: A variable
setting here could influence more than one application if variables are not renamed on a per
application basis.


\~Comment ####################################################################################### \~
# 3. How ALox Uses the ALib Configuration System  # {#alox_man_external_configuration_alox}

Well, as \alib and \alox are developed by the same team, of-course \alox uses the configuration system
of \alib exactly as the \alib developers expect their users to do!

\note For details consult the
   <b>reference documentation</b>
       ([C++](@ref      #aworx::lib::config),
       [C#]  (@ref  #cs::aworx::lib::config),
       [Java](@ref #com::aworx::lib::config)) provided with \alib.

\b In the JAVA and C# Version, %ALox leaves field
  <b>%ALIB::ConfigCategory</b>
    ([C#]  (@ref  #cs::aworx::lib::ALIB::ConfigCategory),
     [Java](@ref #com::aworx::lib::ALIB::configCategoryName)) untouched (it remains default "ALIB")
while exposing an own, similar field
  <b>%ALox::ConfigCategory</b>
    ([C#]  (@ref  #cs::aworx::lox::ALox::ConfigCategory),
     [Java](@ref #com::aworx::lox::ALox::configCategoryName)) defaulting to "ALOX".
This allows a user of the library to change the category names
In the C++ version such change is supported due to the declaration of all variables using
\cpp_alib{lang,T_EnumMetaDataDecl,enum meta data} defined with macro \ref ALIB_CONFIG_VARIABLES.

All configuration variables are declared in one place.
(In Java and C# versions with static initializations of object of type class (struct)
<b>%VariableDecl</b>
   ([C#]  (@ref  #cs::aworx::lib::config::VariableDecl),
    [Java](@ref #com::aworx::lib::config::VariableDecl), in C++ with enumeration
\cpp_alox{Variables}.)

When using interface method
<b>%Configuration::Store</b>
   ([C++] (@ref      #aworx::lib::config::Configuration::Store),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration::Store),
    [Java](@ref #com::aworx::lib::config::Configuration::store))
to write configuration data, new variables are exclusively created within a plug-in
set up at or below priority
<b>PrioDefaultValues</b>
 ([C++] (@ref      #aworx::lib::config::Priorities::DefaultValues),
  [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioDefaultValues),
  [Java](@ref #com::aworx::lib::config::Configuration::PRIO_DEFAULT_VALUES)). By default, this
is of type \ccj_aworx{config,InMemoryPlugin}.

Finally, \alox leverages the flexibility that the priorities of the \alib configuration
system brings by exposing parameter \p{priority} in methods
<b>%Lox.SetVerbosity</b>
([C++] (@ref aworx::lib::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)) and
<b>%Lox.SetSourcePathTrimRule</b>
([C++] (@ref aworx::lib::lox::Lox::SetSourcePathTrimRule),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetSourcePathTrimRule)).
On the one hand, these methods are fully aligned with the configuration system, as
parameter \p{priority} defaults to
<b>%PrioDefaultValues</b>
    ([C++] (@ref     #aworx::lib::config::Priorities::DefaultValues),
     [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioDefaultValues),
     [Java](@ref #com::aworx::lib::config::Configuration::PRIO_DEFAULT_VALUES)).

This way, what is set 'in code' is (by default) overruled by any type of external configuration.
On the other hand, a programmer may specify a different priority and this way either allow only certain,
higher prioritized external sources to overwrite, or just disallow it.

\note
  Of-course, by just writing the corresponding values into the plug-in found with priority
  <b>%PrioProtectedValues</b>
      ([C++] (@ref      #aworx::lib::config::Priorities::ProtectedValues),
       [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioProtectedValues),
       [Java](@ref #com::aworx::lib::config::Configuration::PRIO_PROTECTED_VALUES))
  such protection could be reached as well, but by exposing the parameter with the methods,
  an alternative, maybe more natural and less error prone way of implementing such protection
  is offered.

<b>For the user of \alox, the benefits of the approach \alox takes are:</b>

- \alox does not impose new requirements to the \alib configuration system. In respect to the
  plug-ins installed, everything remains untouched
- \alib allows to have its external variables modified in the following respect
  - Variable names can be changed
  - Category can be changed: either for a subset of the variables or for all. Even different
    category names can be chosen
  - Default values of \alox variables can be changed
  - Variable comments can be changed. Especially, those may come from a pool of externalized strings.
- Single \alox variables (or all) can be excluded from the possibility to be modified from outside.
- \alox will not bloat an applications' external configuration system with own variables, unless
  explicitly demanded:
  - An application may also choose to expose only selected variables to the outside.
  - An application may store \alib and \alox configuration data in a separated configuration
    file. (See method
    <b>%ALox::Init</b>
    ([C++] (@ref      #aworx::lib::lang::Library::Init)),
    [C#]   (@ref  #cs::aworx::lox::ALox::Init(Configuration)),
    [Java] (@ref #com::aworx::lox::ALox::init(Configuration))).)
- A custom configuration plug-in will not only work in respect to prioritizing values of external
  variables, but also in respect to consistency with \alox verbosity settings.



\~Comment ####################################################################################### \~
# 4. Concrete Steps on Integrating ALox Configuration in your Software# {#alox_man_external_configuration_concrete}

After the discussion of the previous sections it should be quite straightforward to understand how \alox is to be
integrated to your software in respect to external configuration data. Here are some hints:

- Create a custom plug-in (using your custom config system) and attach it to singleton
  <b>%ALox.Config</b>
   ([C++] (@ref aworx::lib::lox::ALox::Config),
    [C#]  (@ref  #cs::aworx::lox::ALox::Config),
    [Java](@ref #com::aworx::lox::ALox::config)).

    - Create a class that has access to your config system
    - implement the interface ConfigurationPlugin within this class
    - Plug it in

- Alternatively: create an instance of
    <b>IniFile</b>
      ([C++](@ref      #aworx::lib::config::IniFile),
      [C#]  (@ref  #cs::aworx::lib::config::IniFile),
      [Java](@ref #com::aworx::lib::config::IniFile)) and attach this instead.

      The following code samples this in C#:
      \snippet "../alox.samples/ALoxSamples.cs"        DOXYGEN_CREATE_INIFILE
      \snippet "../alox.samples/ALoxSamples.cs"        DOXYGEN_REMOVE_INIFILE


- Set \alib::ConfigCategory and \alox::ConfigCategory to preferred values, e.g. your own
  application name (to avoid clashing of environment variables when two \alib enabled
  applications exist.

- If wanted, change the definitions of the various configuration variables, like:
  - <b>%ALIB.LOCALE</b>
    ([C++] (@ref      #aworx::lib::ALib::LOCALE))
  - <b>%ALIB.WAIT_FOR_KEY_PRESS</b>
    ([C++] (@ref      #aworx::lib::ALib::WAIT_FOR_KEY_PRESS),
     [C#]  (@ref  #cs::aworx::lib::ALIB::WAIT_FOR_KEY_PRESS))
  - <b>%ALIB.HAS_CONSOLE_WINDOW</b>
    ([C++] (@ref      #aworx::lib::ALib::HAS_CONSOLE_WINDOW))
  - <b>%ALox.CONSOLE_TYPE</b>
    ([C++] (@ref aworx::lib::lox::ALox::CONSOLE_TYPE),
     [C#]  (@ref  #cs::aworx::lox::ALox::CONSOLE_TYPE),
     [Java](@ref #com::aworx::lox::ALox::CONSOLE_TYPE))
  - <b>%ALox.VERBOSITY</b>
    ([C++] (@ref aworx::lib::lox::ALox::VERBOSITY),
     [C#]  (@ref  #cs::aworx::lox::ALox::VERBOSITY),
     [Java](@ref #com::aworx::lox::ALox::VERBOSITY))
  - <b>%ALox.PREFIXES</b>
    ([C++] (@ref aworx::lib::lox::ALox::PREFIXES),
     [C#]  (@ref  #cs::aworx::lox::ALox::PREFIXES),
     [Java](@ref #com::aworx::lox::ALox::PREFIXES))
  - <b>%ALox.FORMAT</b>
    ([C++] (@ref aworx::lib::lox::ALox::FORMAT),
     [C#]  (@ref  #cs::aworx::lox::ALox::FORMAT),
     [Java](@ref #com::aworx::lox::ALox::FORMAT))
  - ...

- Set values that result from own application logic.
  A simple sample is command line parameter \-\-verbose which might lead to
  'programatically' changes in the domains' verbosities.

- Protect values that must not be changed from outside by storing a fixed value with priority
  <b>%PrioProtectedValues</b>
      ([C++] (@ref      #aworx::lib::config::Priorities::ProtectedValues),
       [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioProtectedValues),
       [Java](@ref #com::aworx::lib::config::Configuration::PRIO_PROTECTED_VALUES))

- Apply the previous two steps to one variable to redefine configuration behavior.
  Let's stick to the sample of having the \-\-verbose switch. Imagine this option
  should get three possible values: 'silent', 'normal' and 'verbose'. The approach to take
  is the following:
  - Programmatically add three new custom variables stored as protected values.
    Their names might be <c>MYAPP_VERBOSITY_1[2|3]</c> .
    These custom variables contain the verbosity settings for all <em>Log Domains</em>
    for each of the three switchable verbosities
  - Depending on the command line switch, set the value of variable
    <b>%ALox.VERBOSITY</b>
    ([C++] (@ref aworx::lib::lox::ALox::VERBOSITY),
     [C#]  (@ref  #cs::aworx::lox::ALox::VERBOSITY),
     [Java](@ref #com::aworx::lox::ALox::VERBOSITY)) to <c>"$MYAPP_VERBOSITY_1[2|3]"</c>,
    also in protected mode. The \c '$' sign here substitutes the variables' value with
    the contents of named variable.

  What is achieved here, is that there are custom 'presets' defined for the verbosities
  and those are all that the end-user can set! <br>

  Furthermore, if the substitution would be set to
  <c>"$MYAPP_UNDOCUMENTED_SWITCH ; $MYAPP_VERBOSITY_1[2|3]"</c> then, in addition, a
  hidden new configuration variable is exposed. This might be used in "the field" when
  something goes wrong with a deployed application and more logging is wanted, because
  with this new undocumented variable each <em>Log Domain</em> is switchable again.

- Finally, before the termination of a process, copy those auto-generated \alox variables
  that you are interested in to your write-enabled configuration plug-in.
  This way, the user sees variables with comments and learns how to leverage those.
  The sample above uses method
  <b>%Configuration.FetchFromDefault</b>
   ([C++] (@ref      #aworx::lib::config::Configuration::FetchFromDefault),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration::FetchFromDefault),
    [Java](@ref #com::aworx::lib::config::Configuration::fetchFromDefault)) to do so. This method
  copies all values not found in the given plug-in from the default values plug-in.
  Instead of using this simple method, a selective approach can be taken to copy
  exactly the values wanted.

\~Comment ####################################################################################### \~
# 5. C++ Language Version Specifics # {#alox_man_external_configuration_cpp_specifics}
What was said above is generally true for the C++ version of \alib/\alox. However, there are
some differences:
- The library initialization process is a little more complex. It is done in different phases.
  To add a user-defined configuration plug-in, a first phase of initialization has to be performed.
  The details are documented with class \cpp_alib{lang,Library}.
- Variable names, their defaults and  help texts may be changed using external resources.
  For changing the resources, the library initialization has to be invoked in different phases.
  Details are documented with class \cpp_alib{lang,Resources}.


--------------------------------------------------------------------
<center>Next chapter: \ref alox_man_external_verbosity_configuration </center> <center> \ref manual "Back to index" </center>

*/
