// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page man_domain_substitution  14 - Log Domain Substitution


\~Comment ####################################################################################### \~
<br>
# 1. Introduction # {#man_domain_substitution_intro}

<em>Domain Substitution</em> is a concept of ALox that allows to manipulate the effective domain of <em>Log Statements</em> without changing
neither these statements nor the <em>Scope Domains</em> that apply to them. Therefore, <em>Domain Substitution</em> is useful when
those changes can not be performed (e.g. because the corresponding ALox code is residing in
a library) or because a temporary "redirect" of certain domains is wanted.

As with <em>Scope Domain</em> settings, the concept of <em>Domain Substitution</em> in general should not be 'overused'. Otherwise, things
might get complicated.

The rules are set and removed with method
<b>%Lox.SetDomainSubstitutionRule</b>
([C++] (@ref      #aworx::lox::Lox::SetDomainSubstitutionRule),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomainSubstitutionRule),
 [Java](@ref #com::aworx::lox::Lox::setDomainSubstitutionRule)), which accepts two parameters:
- \p domainPath:<br>
  The domain path (substring) that is to be searched and replaced. For the search, a simple
  \e 'wildcard' mechanism is aplied: It is allowed to use character <c> '*'</c> at the beginning and/or
  the end of the search string. As a result, four \e 'types' of rules can be created
  - Exact match (no \c * given)
  - Prefix match (\c * at the end of \p domainPath)
  - Suffix match (\c * at the start of \p domainPath)
  - Substring match (\c * at both, start and the end of \p domainPath)

- \p replacement:<br>
  This is the string that replaces the string in \p domainPath when the rule matches.
  If this is empty (or nulled), the rule is removed from the \b %Lox.

If for any reason, all rules should be deleted at once, invoke method \b %Lox.SetDomainSubstitutionRule
with providing a nulled or empty string for \p domainPath. There is no explicit other method
for clearing the rules given, because the designers of ALox do not see a use case for doing this.


\~Comment ####################################################################################### \~
# 2. How Class Lox Processes the Rules # {#man_domain_substitution_processing}

Rules for <em>Domain Substitution</em> are applied after any other evaluation of the resulting domain is performed.
The rules are applied in the order of their definition. Therefore, rules that are passed from
configuration files (or command line, etc.) are applied first.
Rules might influence each other, hide each oder or even be circular. When setting the rules,
ALox does not check for such (sometimes wanted) dependencies of the rules. It might happen,
that a rule that was defined earlier than a different one, would be effective only after
the second rule was applied. Therefore, ALox repeats the application of all rules
as long as at least one of the rules matched. Because of the possibility of having circular
dependencies, a maximum amount of ten loops is performed.
After that, ALox stops processing <em>Domain Substitution</em> and writes a <em>Log Statement</em> of \e %Verbosity.Error to the
internal domain. The error message is only issued once. However the flag is reset
when all rules are cleared (by providing a nulled string value for parameter \p domainPath
of method
<b>%Lox.SetDomainSubstitutionRule</b>
([C++] (@ref      #aworx::lox::Lox::SetDomainSubstitutionRule),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomainSubstitutionRule),
 [Java](@ref #com::aworx::lox::Lox::setDomainSubstitutionRule))).

This amount of loops should be more than enough for all major use cases. Even a third
loop is necessary very seldom.

\~Comment ####################################################################################### \~
# 3. Substitution Rules and External Configuration # {#man_domain_substitution_config}

## 3.1 Using External Configuration ## {#man_domain_substitution_config_using}

Setting <em>Domain Substitution Rules</em> <em>'from within the source code'</em> is easy and straightforward. However, when
working in a team such changes might not be appreciated by other team members. In this and
other situations it is advisable to retrieve <em>Domain Substitution Rules</em> from external configuration data, command-line
parameters or other sources at run-time.

For <em>Domain Substitution Rules</em> and also other configuration data, ALox leverages the configuration facility provided
by underlying utility library ALib.

\note
 For general information on ALox configuration variables consult \ref GrpALoxConfigVars.<br>
 For information on how to pass configuration data from custom sources to ALox, refer to
 namespace documentation
 <b>%aworx::lib::config</b>
    ([C++] (@ref      #aworx::lib::config),
     [C#]  (@ref  #cs::aworx::lib::config),
     [Java](@ref #com::aworx::lib::config)).

The constructor of class \b %Lox tries to read a configuration variable named
\c ALOX_LOXNAME_DOMAIN_SUBSTITUTION.
When setting the variable, the substring <c>'LOXNAME'</c> needs to be replaced by the name of
the \b %Lox in question.
The variable itself may contain a list of <em>Domain Substitution Rules</em> separated by semicolons <c> ';'</c>.
Each rule consists of two strings which correspond to the two parameters of method
<b>%Lox.SetDomainSubstitutionRule</b>
([C++] (@ref      #aworx::lox::Lox::SetDomainSubstitutionRule),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomainSubstitutionRule),
 [Java](@ref #com::aworx::lox::Lox::setDomainSubstitutionRule)).
These two strings are to be separated by <c>'->'</c>.

As an example, an INI file of an application might have the following sub-section:

\snippet "UT_alox_domains.cs"        Man_DomSubst_Config

With variable \c ALOX_MYLOX_DOMAIN_SUBSTITUTION set in the INI file, a \b %Lox named <c>'MYLOX'</c>
would receive the two rules specified.



\~Comment ####################################################################################### \~
## 3.2 Preventing The Use Of External Configuration ## {#man_domain_substitution_config_prevent}

Sometimes it might be wanted that <em>Domain Substitution Rules</em> are not manipulatable externally. A reason could be that
by the nature of these rules, unauthorized users are enabled to change the <em>Log Domains</em> and hence
also to change their \e Verbosity, which otherwise can be prevented for protection
(see \ref man_external_verbosity_configuration).

ALox does not provide an explicit interface to prevent reading the rules
from the configuration. The simple way out, is to delete all rules after the creation of the
\b %lox:

\snippet "UT_alox_domains.cs"        Man_DomSubst_Config_Prevent


\~Comment ####################################################################################### \~
# 4. Final Remarks # {#man_domain_substitution_wrapup}

<em>Domain Substitution</em> rules are always applied to all \e %Loggers within a \b %Lox.

As noted already, <em>Domain Substitution</em> should be used with care and in case of doubt, thought well.
Different alternatives to setting a <em>Domain Substitution</em> exist.
For example, to manipulate the domain of methods executed within a library, a thread-related
<em>Scope Domain</em> setting may be set prior to invoking library methods.

<em>Prefix Logables</em> that have been set for a domain that gets substituted, of-course do \e not apply to the
substitution domain. In contrast, a <em>Log Statement</em> whose resulting domain gets substituted works
just as it was using the new domain within its invocation and <em>Scope Domain</em> setting.
Therefore, <em>Domain Substitution</em> settings - if at all - should be made at the beginning of a processes life-cycle
and then should not be altered. In this case, also <em>Prefix Logables</em> will be 'transferred' to the substitution
domain, providing that the commands that are setting them use relative domain paths.

<em>Domain Substitution</em> may not be used to substitute <em>Log Domains</em> of the standard
domain tree with those of the internal tree or vice versa.


--------------------------------------------------------------------
<center>Next chapter: \ref man_colorful_loggers </center> <center> \ref manual "Back to index" </center>
*/

