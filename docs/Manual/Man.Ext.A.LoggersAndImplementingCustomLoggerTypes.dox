// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2017 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page man_ext_loggers        A - Loggers and Implementing Custom Types

\tableofcontents


\~Comment ####################################################################################### \~
# 1. Class Logger # {#man_loggers_logger}

\b %ALox is designed to support different log streams. A log stream is a destination for the \e Logables
and can be the IDE console, the terminal console, a file, a web service or anything that accepts
data streams. Abstract class
<b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
represents such a log stream. While some specializations of the class are provided with \b %ALox,
custom specializations may log information to any 'data drain' in any format you like.

\dot
digraph logger
{
    node [shape=record, fontname=Courier];
    edge [shape=record, fontname=Helvetica];
    logger  [ label="Logger (Abstract)"            URL="\ref com.aworx.lox.core.Logger"];
    cl      [ label="ConsoleLogger"     URL="\ref com.aworx.lox.loggers.ConsoleLogger"];
    ml      [ label="MemoryLogger"      URL="\ref com.aworx.lox.loggers.MemoryLogger"];
    tf      [ label="TextFileLogger"    URL="\ref com.aworx.lox.loggers.TextFileLogger"];
    my      [ label="MyCustomLogger"  ];
    logger -> cl   [ arrowhead="open", style="dashed" ];
    logger -> ml   [ arrowhead="open", style="dashed" ];
    logger -> tf   [ arrowhead="open", style="dashed" ];
    logger -> my   [ arrowhead="open", style="dashed" ];
}
\enddot

Abstract class
<b>Logger</b>
 ([C++] (@ref #aworx::lox::core::Logger),
  [C#]  (@ref #cs::aworx::lox::core::Logger),
  [Java](@ref #com::aworx::lox::core::Logger))
has a very lean interface, in fact it is basically just one method, which in specialized classes
needs to be implemented to execute a log. The data to log is provided as an array of
class \c Object in C# and Java, respectively in C++ an instance of class
\ref aworx::lib::boxing::Boxes "Boxes", which is a container of arbitrary objects.
\note
  C++ programmers that seek to implement a custom logger should be familiar with
  \ref aworx::lib::boxing "ALib Boxing" classes.

This allows to create \e Loggers that take any type of (binary) data and use the data for writing
a log entry in any custom way.

While all \b %ALox code tries to be short and simple, class \b %Logger is particularly simple!
So, let us quickly walk through the class by looking at its members.

\~Comment ####################################################################################### \~
## 1.1 The fields of class Logger ## {#man_loggers_logger_fields}
There are just a few fields in class
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger)):

\~Comment ####################################################################################### \~
### 1.1.1 Name and TypeName ### {#man_loggers_logger_fields_name}
class \b %Logger has two members,
<b>Name</b>
  ([C++] (@ref      #aworx::lox::core::Logger::Name),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::Name),
   [Java](@ref #com::aworx::lox::core::Logger::name)) and
<b>TypeName</b>
  ([C++] (@ref      #aworx::lox::core::Logger::TypeName),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::TypeName),
   [Java](@ref #com::aworx::lox::core::Logger::typeName)) that can be read using.
<b>GetName</b>
  ([C++] (@ref      #aworx::lox::core::Logger::GetName),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::GetName),
   [Java](@ref #com::aworx::lox::core::Logger::getName)) and
<b>GetTypName</b>
  ([C++] (@ref      #aworx::lox::core::Logger::GetTypeName),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::GetTypeName),
   [Java](@ref #com::aworx::lox::core::Logger::getTypeName)).

Field \b name is defined by the user and provided with the constructor. Field \b typeName is
'hard-coded' by each derived classes constructor. If the user of a \e Logger does not provide a name
in the constructor, then field \b name defaults to the hard-coded \b typeName.
Both fields are not used internally but only provided to be used by classes managing multiple \e Loggers
(which generally is class
  <b>Lox</b>
  ([C++] (@ref #aworx::lox::Lox),
   [C#]  (@ref #cs::aworx::lox::Lox),
   [Java](@ref #com::aworx::lox::Lox))).

If multiple \e Loggers are attached to a \b Lox, they need to to have unique \e Names.

\~Comment ####################################################################################### \~
### 1.1.2 TimeOfCreation and TimeOfLastLog ### {#man_loggers_logger_fields_TimeOf}
These are two time stamps that contain the time of the creation of the
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
(or the time this timestamp was reset to) and the time of the last log. These two members
are normally used to calculate the elapsed time (the cumulated time an application is running)
and the time difference between two log calls. The latter is especially interesting for
log outputs on a debug console, as it allows to get for a first quick impression about your
software's performance, lock states, bottlenecks, etc.

### 1.1.3 CntLogs ### {#man_loggers_logger_fields_CntLogs}
This is a simple counter of the number of logs processed so far. Feel free to
reset it as you like, it is not used anywhere internally, other than as an option
to output with each log line.


\~Comment ####################################################################################### \~
## 1.2 Methods of class Logger ## {#man_loggers_logger_methods}

Besides the protected constructor, which just initializes some default values for the \e Loggers'
fields, abstract method
<b>Log</b>
  ([C++] (@ref      #aworx::lox::core::Logger::Log),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::Log),
   [Java](@ref #com::aworx::lox::core::Logger::log)) is the most important.

Derived classes only need to implement this abstract method with code that is executing the
<em>Log Statement</em>.
When the method is invoked, class \b Lox already performed various checks, including that the
\b %Verbosity justifies the execution.

## 1.3 Implementing a custom *Logger* ## {#man_loggers_logger_customloggers}
As an experienced programmer after reading the previous sections, it is certainly fully obvious
to you which steps need to be taken to create your own variation of class
  <b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
that directs your \e Logables to a certain data drain in a specific format.
Nevertheless, let us quickly name these steps explicitly:

- Create your own class derived from class \e Logger.
- Add a constructor that takes a user-defined name and pass this name along with a hard-coded
  string representing the type of your \e %Logger, to the base constructor.
- Implement the abstract method \b Log by
  converting and streaming the given objects into a custom data 'drain'.
- In the main code entity add an instance of your custom \e %Logger type to the
  <b>Lox</b>
  ([C++] (@ref #aworx::lox::Lox),
   [C#]  (@ref #cs::aworx::lox::Lox),
   [Java](@ref #com::aworx::lox::Lox)) of your choice.

But before you now go ahead and implement your own \e Logger type class, you should first continue reading
through this chapter.


\~Comment ####################################################################################### \~
# 2. Abstract class TextLogger # {#man_loggers_textlogger}

When you think about debug log output you think about logging textual messages that
get displayed on your debug console. We think the use of a logging ecosystem for this
quite simple purpose is advisable as soon as a software project bigger than
two pages of code!

While \b %ALox wants to be a perfect tool for quick, easy and comfortable debug logging,
the goals of \b %ALox go beyond that. This is why \b %ALox logging interface methods
are not restricted to string types, but accept any object to be passed to any derived
\e Logger type.

It is very important to understand this. The result is twofold:

- For textual (e.g. debug) logging, any object that is logged needs to get converted into a textual
  representation (a human readable format).
- Custom \e Logger types are enabled to log data of an application in a very custom
  way, as these \e Loggers get the original object passed.

Class
<b>TextLogger</b>
  ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)),
which is described in this chapter, is exactly about the first thing: Log any object that
is passed to it as a textual representation, hence into a character stream.
All of the provided \b %ALox \e Loggers that produce text output, derive from this base
class instead of deriving directly from \e Logger. Among these classes are
<b>ConsoleLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::ConsoleLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::ConsoleLogger),
   [Java](@ref #com::aworx::lox::loggers::ConsoleLogger)),
<b>MemoryLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)) and
<b>AnsiLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::AnsiLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::AnsiLogger),
   [Java](@ref #com::aworx::lox::loggers::AnsiLogger)).
Hence, the class diagram above is a little simplified. It rather looks like this:

\dot
digraph TextLoggers
{
    node [shape=record, fontname=Helvetica];
    edge [shape=record, fontname=Helvetica];
    logger  [ label="Logger"            URL="\ref cs.aworx.lox.core.Logger"];
    tlogger [ label="TextLogger"        URL="\ref cs.aworx.lox.core.textlogger.TextLogger"];
    cl      [ label="ConsoleLogger"     URL="\ref cs.aworx.lox.loggers.ConsoleLogger"];
    ml      [ label="MemoryLogger"      URL="\ref cs.aworx.lox.loggers.MemoryLogger"];
    my      [ label="MyCustomTextLogger"  ];
     logger   -> tlogger [ arrowhead="open", style="dashed" ];
     tlogger  -> cl      [ arrowhead="open", style="dashed" ];
     tlogger  -> ml      [ arrowhead="open", style="dashed" ];
     tlogger  -> my      [ arrowhead="open", style="dashed" ];
}
\enddot

\note
 - Even this diagram is simplified. Refer to the language specific reference documentation of class
   <b>TextLogger</b>
    ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
     [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
     [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) to get the full picture.
 - Of-course you can also derive your own *Logger* types without using class \b %TextLogger
   and still do pure textual logging.

\~Comment ####################################################################################### \~
## 2.1 Helper classes for TextLogger ## {#man_loggers_textlogger_helpers}
Class
  <b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
contains two helper classes as public fields.
The advantage of using helpers is that they can be replaced at runtime by your own, tailored
versions of these helpers and this way you can change the default behavior of existing \e Logger types, like
without deriving new ones.

The helper classes are described in the following two paragraphs.

\~Comment ####################################################################################### \~
### 2.1.1 Class MetaInfo ### {#man_loggers_textlogger_MetaInfo}
Class
  <b>MetaInfo</b>
  ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::MetaInfo),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo))
is used by
class
  <b>TextLogger</b>
  ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
to  assemble the meta information of each log line, which incorporates things like date and time,
thread information, \e Verbosity and <em>Log Domain</em>.
MetaInfo provides a public format string that defines the start (prefix) of each
log line. A sample of such format string (in <b>%ALox for C#</b>) is:

    "%SF(%SL):%SM()%A3[%DD] [%TD][%TC +%TL][%tN]%V[%D]<%#>: "

The format string contains variables, marked by a leading '\%' sign.
The set of these format variables available are:

<center>Variable</center>| Description
- - - - - - - - - - - - -| - - - - - - - -
 <center> SP </center>   | The full path of the source file (in Java: The callers' package name).
 <center> Sp </center>   | The trimmed path of the source file (in Java not available).
 <center> SF </center>   | The callers' source file name.
 <center> Sf </center>   | The callers' source file name without extension (in Java not available).
 <center> SC </center>   | The callers' class name (Java only!).
 <center> SL </center>   | The line number in the callers' source file.
 <center> SM </center>   | The callers' method name.
 <center> TD </center>   | The date the log call was invoked.
 <center> TT </center>   | Time of day the log call was invoked.
 <center> TC </center>   | Time elapsed since the \e Logger was created or its timer was reset.
 <center> TL </center>   | Time elapsed since the last log call. Note: These time values do not sum up correctly. This is not only because of rounding errors, but also because the time between the "end" of the last log call and the "beginning" of this log call is measured. This has the advantage that a quite accurate value of "elapsed time since the last log call" is displayed and hence a very good performance indicator is provided.
 <center> tN </center>   | Thread name
 <center> tI </center>   | Thread ID.
 <center> V  </center>   | The \e Verbosity. For the display of the different values, \b %MetaInfo exposes four public fields containing string definitions.
 <center> D  </center>   | The <em>Log Domains</em>' full path.
 <center> #  </center>   | The log call counter (like a line counter, but counting multi-line log output as one).
 <center> An </center>   | An auto-adjusted tabulator. This grows whenever it needs to grow, but never shrinks. The mandatory number n (a character between 0 and 9) specifies how much extra space is added when tab is adjusted. This is useful to achieve very clean column formatting.
 <center> LG </center>   | The name of the \e Logger. This might be useful if multiple loggers write to the same output stream (e.g. the console).
 <center> LX </center>   | The name of the \e Lox.
 <center> P  </center>   | The name of the process / application.

\note
  The available format variables vary slightly across programming languages and platforms supported by
  \b %ALox. The details are documented in the corresponding class reference of
  <b>MetaInfo.Format</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::MetaInfo::Format),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::MetaInfo::Format),
   [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo::format)).

<p>
\note
  Class \b TextLogger prepends the meta information to the decoded \e Logables
  and therefore, the message itself is not provided as a formatted string variable.
  This restriction (that the meta information is always prepended) is a result of the otherwise
  smart and helpful multi-line features of TextLogger (see below).

Changing the format string
<b>MetaInfo.Format</b>
 ([C++] (@ref      #aworx::lox::core::textlogger::MetaInfo::Format),
  [C#]  (@ref  #cs::aworx::lox::core::textlogger::MetaInfo::Format),
  [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo::format))
provides an easy way to change the look of your log output. For example, if you are not interested
in thread information, just remove the "[%tN] " part from the original string.

If you want to modify the output of a certain variable or if you want to add your own variables,
you can derive your on implementation of *MetaInfo* and override the virtual method
<b>MetaInfo.processVariable</b>
  ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo::processVariable),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo::processVariable),
  [Java] (@ref #com::aworx::lox::core::textlogger::MetaInfo::processVariable))
Within the implementation, just fetch your own variables and/or modify existing and call
the original method for the rest that you do not want to modify.

Finally, if you really want to customize the logging of meta information in the class *TextLogger*
completely and maybe do not want to even rely on a format string, then feel free to derive
your on implementation of *MetaInfo* and override the virtual method
<b>MetaInfo.Write</b>
  ([C++] (@ref #aworx::lox::core::textlogger::MetaInfo::Write),
  [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo::Write),
  [Java] (@ref #com::aworx::lox::core::textlogger::MetaInfo::write))!

\~Comment ####################################################################################### \~
### 2.1.2 Class ObjectConverter ### {#man_loggers_textlogger_ObjectConverter}
Class
<b>ObjectConverter</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::ObjectConverter),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::ObjectConverter),
   [Java](@ref #com::aworx::lox::core::textlogger::ObjectConverter))
is used by class
<b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
to convert the \e Logables that get passed by the user through the <em>Log Statements</em> to the
\e %Logger into a string representation.
While \b %ObjectConverter is abstract and declares only one simple interface method, the standard
implementation used with the built-in loggers is provided with type
<b>StandardConverter</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::StandardConverter),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::StandardConverter),
   [Java](@ref #com::aworx::lox::core::textlogger::StandardConverter)).

This class is still is extremely simple, as it transfers this responsibility
to objects of type derived from class \b %Formatter! This abstract class and corresponding
implementations are provided with \b %ALib, the utility library that \b %ALox builds upon.

Please consult the \b %ALib documentation of classes
<b>Formatter</b>
  ([C++] (@ref      #aworx::lib::strings::Formatter),
   [C#]  (@ref  #cs::aworx::lib::strings::Formatter),
   [Java](@ref #com::aworx::lib::strings::Formatter)),
<b>FormatterPythonStyle</b>
  ([C++] (@ref      #aworx::lib::strings::FormatterPythonStyle),
   [C#]  (@ref  #cs::aworx::lib::strings::FormatterPythonStyle),
   [Java](@ref #com::aworx::lib::strings::FormatterPythonStyle)) and
<b>FormatterJAVAStyle</b>
  ([C++] (@ref      #aworx::lib::strings::FormatterPythonStyle),
   [C#]  (@ref  #cs::aworx::lib::strings::FormatterPythonStyle),
   [Java](@ref #com::aworx::lib::strings::FormatterPythonStyle)) to learn more about how
these classes work.

Again, there are different "levels" of possibility on how to change and implement custom
functionality in respect to converting the \e Logables while using class \b %TextLogger:
- A straight forward approach is to overload methods \b [T|t]oString (Java/C#), respectively
  \ref aworx::lib::boxing "ALib Boxing" interfaces
  \ref aworx::lib::strings::boxing::IApply  "IApply" or
  \ref aworx::lib::strings::boxing::IFormat "IFormat".
- Own formatters may be implemented and attached to the instance of \b %StandardConverter.
- Alternatively an own object converter might be implemented.

<p>
\note
  In <em>C# and Java versions</em> of \b %ALox, the logging of arbitrary complex objects is additionally
  supported with class
  <b>LogTools</b>
  ([C#]   (@ref #cs::aworx::lox::tools::LogTools),
   [Java] (@ref #com::aworx::lox::tools::LogTools)).<br>
  This class makes use of the reflection APIs of these languages and creates a
  nicely formatted output.
  Using this class is an alternative to the creation of a dedicated \b ObjectConverter for such types.

\~Comment ####################################################################################### \~
## 2.2 The multi-line features of class TextLogger ## {#man_loggers_textlogger_multiline}
Class
  <b>%TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger))
provides a feature to log a message into multiple lines.
This is useful for example, if you want to log a string that contains XML text.
Instead of one very wide log line, *TextLogger* is configured by default to separate the text
into multiple lines in a very controlled way.

Multi-line output behavior of class *TextLogger* is configured by the field
<b>%TextLogger.MultiLineMsgMode</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::MultiLineMsgMode),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::MultiLineMsgMode),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineMsgMode)).

The following modes are available:

- 0: Multi-line mode off<br>
  In this mode, the text is not split into multiple lines. However, certain log streams, for example
  a system console window, will split the msg autonomously if the message contains line end characters
  (CR, LF or CRLF).
  Therefore, using this mode, it is recommended to set the fields
  <b>%TextLogger.MultiLineDelimiter</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::MultiLineDelimiter),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineDelimiter))
  and
  <b>%TextLogger.MultiLineDelimiterRepl</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::MultiLineDelimiterRepl),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::MultiLineDelimiterRepl),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::multiLineDelimiterRepl))
  in a way that your log file does not get cluttered.

- 1: Multi-line mode with all meta information repeated in each log line<br>

- 2: Multi-line mode with blanked meta information starting with second log line.<br>
  This is the default, because this setting makes it easy to visually recognize, that a log
  is continued in the next line and hence it is the best for debug window purposes!

- 3: Multi-line mode which writes a (configurable) headline message in the first log line.<br>
  All text lines of the multi-line text is logged starting in column zero.

- 4: Like multi-line mode 3, but without writing the headline.

\~Comment ####################################################################################### \~
## 2.3 Deriving your own Logger from class TextLogger ## {#man_loggers_textlogger_derive}
As mentioned above, class
<b>%TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) is still abstract.
While it implements the abstract interface method
<b>%Logger.Log</b>
  ([C++] (@ref      #aworx::lox::core::Logger::Log),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::Log),
   [Java](@ref #com::aworx::lox::core::Logger::log)) it introduces a new abstract interface method in turn!
This method is
<b>%TextLogger.logText</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::logText),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::logText),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::logText)).
Class \b TextLogger takes care to build the complete textual representation of the log line,
including meta information and the log message itself.

Now, the only thing that a simple derivate of *TextLogger* needs to do is to
override this method and just copy (write) the provided buffer to its final destination.

Those custom \e Loggers that wish to ignore any special formatting and colorizing codes of class
<b>%ESC</b>
  ([C++] (@ref      #aworx::lox::ESC),
   [C#]  (@ref  #cs::aworx::lox::ESC),
   [Java](@ref #com::aworx::lox::ESC)) might rather want to extend abstract class
<b>PlainTextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::PlainTextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::PlainTextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::PlainTextLogger)) which takes care of the removal
of such codes. Class \b PlainTextLogger implements <b>%TextLogger.logText</b> and introduces
in turn other abstract methods. As a simple sample of how \b PlainTextLogger can be derived,
see the source code of class
<b>MemoryLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)).

On this topic, see also chapter \ref man_colorful_loggers.

\~Comment ####################################################################################### \~
## 2.4 Locking the Standard Output Streams ## {#man_loggers_textlogger_stdio_lock}

Class
<b>TextLogger</b>
  ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
   [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
   [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) optionally uses a facility
of ALib to avoid concurrent access to the <em>standard output stream</em> and
<em>standard error stream</em> available to most applications.

This feature is described in the reference documentation of
<b>%ALIB.StdOutputStreamsLock</b>
  ([C++] (@ref      #aworx::lib::ALIB::StdOutputStreamsLock),
   [C#]  (@ref  #cs::aworx::lib::ALIB::StdOutputStreamsLock),
   [Java](@ref #com::aworx::lib::ALIB::stdOutputStreamsLock)).

To enable the use of this locker for a custom types, all that has to be done is providing
value \c true for parameter \p usesStdStreams of the protected constructor of class \b TextLogger.

If an application writes to those streams in parallel to \b %ALox (e.g. using \b std::cout in C++,
\b Console.WriteLine in C# or \b System.out.println in Java), then to avoid mixing such output
with \b %ALox output, such direct writes should be performed only after the \b ALIB.StdOutputStreamsLock
was 'acquired'. Also, such application has to register once with \b ALIB.StdOutputStreamsLock.
Then, together with the \e Logger, the critical number of two 'acquirers' are reached and the
<b>%SmartLock</b>
  ([C++] (@ref      #aworx::lib::threads::SmartLock),
   [C#]  (@ref  #cs::aworx::lib::threads::SmartLock),
   [Java](@ref #com::aworx::lib::threads::SmartLock)) gets activated.

\~Comment ####################################################################################### \~
## 2.5 Recursive Log Statements ## {#man_loggers_textlogger_recursive}

ALox supports recursive log calls. Recursion occurs when log statements are executed during the
evaluation of the logables of an already invoked log statement. A user might think that recursive
log calls are seldom and exotic, however, in reality, recursive calls might occur quite quickly.

To allow and properly treat recursion, each class and method involved in the execution of a
log statement has to be prepared for it. The execution must be free of dependencies to member
variables or such members need to be created per recursion.

Hence, not only class class
<b>%Lox</b>
([C++](@ref      #aworx::lox::Lox),
[C#]  (@ref  #cs::aworx::lox::Lox),
[Java](@ref #com::aworx::lox::Lox)) needs to support recursion, but also the logger classes
themselves.

Class
<b>%TextLogger</b>
([C++](@ref      #aworx::lox::core::textlogger::TextLogger),
[C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
[Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) and its utility class
<b>%StandardConverter</b>
([C++](@ref      #aworx::lox::core::textlogger::StandardConverter),
[C#]  (@ref  #cs::aworx::lox::core::textlogger::StandardConverter),
[Java](@ref #com::aworx::lox::core::textlogger::StandardConverter)) are well prepared and as long
as custom loggers are built on those, recursion should not be a problem. This is because abstract method
\ref man_loggers_textlogger_derive "TextLogger.logText" will \b not be invoked recursively.

When implementing own variants of class \b %ObjectConverter or otherwise a "deeper" use of provided
classes is done, the possibility of recursion of log calls has to be taken into account.



\~Comment ####################################################################################### \~
# 3. Logger implementations provided by ALox # {#man_loggers_implementations}

While the abstract classes \b %Logger, \b %TextLogger and \b %PlainTextLogger are located in the
namespaces (packages)
- <b>\[com.|cs.\]%aworx.lox.core</b>
 ([C++](@ref      #aworx::lox::core),
 [C#]  (@ref  #cs::aworx::lox::core),
 [Java](@ref #com::aworx::lox::core)) and
- <b>\[com.|cs.\]%aworx.lox.core::textlogger</b>
 ([C++](@ref      #aworx::lox::core::textlogger),
 [C#]  (@ref  #cs::aworx::lox::core::textlogger),
 [Java](@ref #com::aworx::lox::core::textlogger))

you can checkout which 'ready to use' \e %Logger implementations are available today for your
preferred language version of \b %ALox, by referring to the reference documentation of namespace (package)

- <b>\[com.|cs.\]%aworx.lox.loggers</b>
 ([C++](@ref #aworx::lox::loggers),
 [C#]  (@ref #cs::aworx::lox::loggers),
 [Java](@ref #com::aworx::lox::loggers)).

For convenience, method
<b>%Lox.CreateConsoleLogger</b>
  ([C++] (@ref      #aworx::lox::Lox::CreateConsoleLogger ),
   [C#]  (@ref  #cs::aworx::lox::Lox::CreateConsoleLogger ),
   [Java](@ref #com::aworx::lox::Lox::createConsoleLogger )) is provided. This method chooses
an appropriate implementation of class \b %Logger suitable for human readable log output.
The \e %Logger chosen depends on the platform and configuration settings.

For debug logging, method
<b>%Log.AddDebugLogger</b>
  ([C++] (@ref      #aworx::lox::Log::AddDebugLogger ),
   [C#]  (@ref  #cs::aworx::lox::Log::AddDebugLogger ),
   [Java](@ref #com::aworx::lox::Log::addDebugLogger )) is provided. This may even choose and attach
more than one \e %Logger, depending on language, platform and IDE.

A noteworthy, built-in specialization of \b %Logger is found with class
 <b>MemoryLogger</b>
  ([C++] (@ref      #aworx::lox::loggers::MemoryLogger),
   [C#]  (@ref  #cs::aworx::lox::loggers::MemoryLogger),
   [Java](@ref #com::aworx::lox::loggers::MemoryLogger)). It uses an internal character buffer of ALib-type
 <b>AString</b>
  ([C++] (@ref      #aworx::lib::strings::AString),
   [C#]  (@ref  #cs::aworx::lib::strings::AString),
   [Java](@ref #com::aworx::lib::strings::AString))
and just appends each log entry to this buffer, separated by a <em>new line</em> sequence.

As \b MemoryLogger does not log to the console or any other slow thing, is extremely fast. The latest
record was over on million log entries per second in a single-thread!
(Achieved on Intel(R) Haswell Core(TM) i7 CPU @4.0GHz, using <b>ALox for C++</b>, doing release logging.)

This gives an indication that the \b %ALox ecosystem, in combination with its \b MemoryLogger is extremely
useful in performance critical sections of your code. If you would do 100 log entries per second,
the performance loss for your application would be around 0.01%. (Yes, that is why
we love Bauhaus coding style.)

\~Comment ####################################################################################### \~
# 4. Summary and outlook # {#man_loggers_summary}

The following summarizes the takeaways of this chapter:
- We learned about class \b %Logger and its simple structure and few fields.
- Class \b %TextLogger was introduced and explained in detail. We learned that TextLogger aims
  to be the abstract parent class of all \e %Logger types that are supposed to process \e %Logables
  in a human readable format.
- We saw how the output format of class \b %TextLogger can be manipulated without introducing
  new code and also, more complex but powerful, with introducing new code.
- Furthermore, it was explained that \b %ALox, with the help of underlying utility library \b %ALib,
  provides a mechanism to lock standard output streams and protect against 'clashing' of output
  coming from different loggers or the application itself.
- Then we briefly looked at the currently existing \e Logger types in the \b %ALox ecosystem.

If you developed an interesting \e %Logger, like one that
- is supporting a specific IDE with 'clickable' log lines
- is sending Emails
- is reporting to an analytics/metrics server
- is logging into the Linux journal or Windows OS event log

then please do not hesitate to propose the code to us as an extension of the open source project \b %ALox!
<p>

--------------------------------------------------------------------
<center> \ref manual "Back to index" </center>

*/
