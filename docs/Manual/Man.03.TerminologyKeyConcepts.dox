// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_man_terminology   03 - Terminology and Key Concepts



\tableofcontents

This chapter introduces to the major concepts of \alox.

Before we explain those, we want to start with defining terms used by this manual and by the
<b>reference documentation</b>
  ([C++] (cpp_ref/alox_cpp_mainpage.html),
   [C#]  (cs_ref/alox_cs_mainpage.html),
   [Java](java_ref/alox_java_mainpage.html)).


\~Comment ####################################################################################### \~
# 1. Terminology # {#alox_man_alox_tak_terminology}


\~Comment ####################################################################################### \~
## 1.1 Loggers ## {#alox_man_alox_tak_terminology_logger}

ALox is designed to support different log streams. A log stream is a destination of log messages
and can be the IDE console, the terminal console, a file, a web service or anything that accepts
data streams. Abstract class
<b>Logger</b>
  ([C++] (@ref #aworx::lox::core::Logger),
   [C#]  (@ref #cs::aworx::lox::core::Logger),
   [Java](@ref #com::aworx::lox::core::Logger))
represents such a log stream. While some implementations of class \b %Logger are provided with the \alox package,
the system allows custom implementations of \e Loggers that log information to any 'data drain' in
any format you like.


When using \alox, there is not much interaction with classes of type \e %Logger, though. The
reason for this is, that the data that is logged, should optionally be directed into multiple
\e Loggers at once. Therefore, the API interface for executing the logging itself, is residing somewhere
else and internally, \alox dispatches the log data to the list of \e Loggers in question.

The interaction with a class \b %Logger (and its derived types) is therefore limited to the
following:
- Creation of a \e %Logger
- Optional configuration of a \e %Logger (e.g. details on the output format, etc.)
- Registration of the \e %Logger with \alox.

## 1.2. Logables ## {#alox_man_alox_tak_terminology_logables}


What can be described as "the data that is logged", is called a \b 'Logable' or, as it may be more
than one, <em>the Logables</em> in \alox. While most logging APIs are restricted to logging
text messages, \alox is not. Still, the usual case is logging text messages, but the architecture
of \alox allows to log an arbitrary amount of objects of arbitrary type.

For technical reasons, the interfaces to pass the \e Logables to \alox are slightly different
in the different language versions:

- <b>ALox for Java</b>:<br>
  Here, parameters of \e Logables are of type \c Object. \e Loggers that process such
  object are using runtime-type information capabilities of Java (e.g keyword \c instanceof) to
  interpret what was dispatched to them as a \e Logable.<br>
  Many methods use variadic arguments (ellipsis syntax, \c '...') to be able to accept
  an arbitrary amount of \e Logables. In some cases this is not possible (e.g. due to overloaded
  methods and ambiguities with those), only one \e Logable of type \c Object is accepted. In this
  case, the object passed may be of type \c Object[] which is then internally "flattened" into
  a list of \e Logables  as if each object of the list was passed.

- <b>ALox for C#</b>:<br>
  Similar to Java, in C#, parameters accepting \e Logables are of type \c Object.
  However, in C# it is not possible to use variadic arguments (ellipsis syntax, \c '...') to
  allow an arbitrary amount of logables. The reason is that most interface methods have
  "hidden" parameters that are filled automatically by the compiler with caller information (the
  actual source code, method name and line number). Therefore, the number of parameters that
  denote the \b Logables is limited to four.<br>
  The good news is, that any of these four parameters may be of type \c Object[]. Arrays are
  "flattened" internally and added to the list of \e Logables. With this "trick", <b>ALox for C#</b>
  manages to provide a simple interface, where only in the case that more than four logables are
  to be passed those have to be placed in an array. Such placement is usually done "inline", right
  within the invocation parameter list.

- <b>ALox for C++</b>:<br>
  For C++, the situation is slightly different due to the fact that this language (for good reasons)
  does not support "runtime type information" and no unique parent class \c Object exists that is the
  natural origin of all classes.
  Nevertheless, the logging interface provides the same seamless and natural way of passing any
  type of argument as provided in the other language implementations!

  This is reached by using \ref aworx::lib::boxing "ALib Boxing". This (underlying) library uses
  [template meta programming](https://en.wikipedia.org/wiki/Template_metaprogramming) to automatically
  wrap whatever a user passes as an argument into an object of type \b %Box
  (e.g. \c char, \c int, \c double or pointers, values, references to and even arrays of objects of any type).
  Once a parameter is boxed, it can be passed further (in our case to the \e Loggers) and
  then processed in a type-safe way.
  Besides the ability of getting type information from the "boxes" and to "unbox" their values,
  <b>%ALib %Boxing</b> allows to define and invoke some sort of "virtual interface methods" on
  boxed values. And all this can be done on arbitrary types, without modifying (preparing) the types for that.

  In short, <b>%ALib %Boxing</b> allows a user of \alox to pass just any type of objects to the
  logging system without prior conversion. Also it is irrelevant if pointers or references are
  passed, just anything may be "thrown in"!  An \alox user does not need to know how this works,
  it is all hidden behind the scenes. Only for very advanced use, the knowledge of the
  \ref aworx::lib::boxing "details of ALib Boxing" may become relevant.

In the case of textual logging (the standard case, including 'simple' debug logging), all \e Logables
are processed by instances of derived types of class
<b>%Formatter</b>
 ([C++](@ref      #aworx::lib::strings::Formatter),
 [C#]  (@ref  #cs::aworx::lib::strings::Formatter),
 [Java](@ref #com::aworx::lib::strings::Formatter)). This abstract class is defined in underlying
library \alib.
This is why \alox logging optionally allows to pass format strings which include placeholders
and formatting options, like field width, alignment, tabulators, quotes, and much more.
If no format string is detected, string representations of the  \e Logables will be just
concatenated and logged. This way, formatting the output is just an option.

And the flexibility goes even beyond that: By default, \b two built-in incarnations of this class
are used:
<b>%FormatterPythonStyle</b>
 ([C++](@ref      #aworx::lib::strings::FormatterPythonStyle),
 [C#]  (@ref  #cs::aworx::lib::strings::FormatterPythonStyle),
 [Java](@ref #com::aworx::lib::strings::FormatterPythonStyle)) and
<b>%FormatterJavaStyle</b>
 ([C++](@ref      #aworx::lib::strings::FormatterJavaStyle),
 [C#]  (@ref  #cs::aworx::lib::strings::FormatterJavaStyle),
 [Java](@ref #com::aworx::lib::strings::FormatterJavaStyle)). The two types are used in parallel!
This means, that the already optional and auto-detected format strings may follow either the
[Python String Fromat Syntax](https://docs.python.org/3.5/library/string.html#format-string-syntax),
which is also similar to what C# offers, or the
[formatting standards of the Java language](http://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html),
which in turn are a little like good old \c printf, but of-course much more powerful and also type-safe.

It can be concluded that \alox logs just anything a user passes to it as \e Logables:
Textual or binary data and if textual, optionally accepting auto-detected formatting strings of
different syntactical type!


\~Comment ####################################################################################### \~
## 1.3. Log Statements ## {#alox_man_alox_tak_terminology_statements}

When this manual and the reference documentation of \alox are referring to a <b>'Log Statement'</b>,
this means a piece of (user) code that invokes an %ALox interface method that potentially performs
log output.

Of-course, each <em>Log Statement</em> incorporates the provision of one or more \e Logables to \alox.
Hence, those interface methods of the \alox API that carry a parameter named \p{logable} (or a list
of those, named \p{logables} can easily be identified as methods that comprise <em>Log Statement</em>.


\~Comment ####################################################################################### \~
## 1.4. Log Domains ## {#alox_man_alox_tak_terminology_domains}
The term <b>'Log Domain'</b> in \alox denotes a sort of 'key' that is used to group
<em>Log Statements</em> into different sets. Each <em>Log Statement</em> belongs to exactly one
specific set of <em>Log Statements</em> by having a <em>Log Domain</em> associated.

Such association can be made by using an \b optional parameter named \p{domain} which
is available in each interface method of the %ALox API which comprises a <em>Log Statement</em>.

\note
  To be precise: There are no such things as 'optional parameters' in Java and also in C# and
  C++ parameters that are followed by non-optional parameters can not have a default value
  in a methods declaration and therefore can not be 'optional' in the sense of the language definition.
  Therefore, when we talk about 'optional parameters', this means that an alternative, overloaded
  method with the same name exists, but excluding this parameter from the list.

\note
  Furthermore, important <em>Log Statements</em> do not have an explicit \p{domain} parameter. Instead
  \alox uses a mechanism to auto-detect <em>Log Domains</em> at the first position in the the list
  of parameters that otherwise are the \e Logables of the statement. This is done to further ease
  the use of log statements.

A typical sample for a <em>Log Domain</em> might using name \c "UI" with all <em>Log Statements</em>
that concern the user interface of an application. A developer may switch <em>Log Statements</em> of
<em>Log Domain</em> \c "UI" completely off in the moment he/she is not interested in UI development.
Alternatively, warning and error messages might get allowed. Later, when working on UI related
code again, that <em>Log Domain</em> may be re-enabled.
If a team of developers is working on a project, each team member may configure %ALox to enable
those <em>Log Domains</em> that he/she is currently working on.

Although parameter \p{domain} is optional, still each <em>Log Statement</em> is associated with a <em>Log Domain</em>.
The way how \alox 'magically' associates <em>Log Statements</em> with 'the right' <em>Log Domain</em>,
without the need for the user to be explicit about it, is one of the features that makes \alox quite unique.
More about this will be explained in later chapters of this manual.


## 1.5. Verbosity# {#alox_man_terminology_verbosity}

It is very common for logging eco-systems, to implement the concept of 'verbosity levels',
and \alox is no exclamation to this. First of all, the term <b>%Verbosity</b> denotes an attribute
of <em>Log Statements</em>. The values of this attribute are defined in enum class
<b>%Verbosity</b>
([C++] (@ref aworx::lib::lox::Verbosity),
 [C#]  (@ref  #cs::aworx::lox::Verbosity),
 [Java](@ref #com::aworx::lox::Verbosity))

Some of the interface methods that comprise <em>Log Statements</em> carry the \e %Verbosity in their
method name, e.g. \c %warning() or \c %verbose(). Other, specialized methods offer a parameter
named \p{verbosity} of type \b %Verbosity.

Besides <em>Log Statements</em>, \e Verbosity is also an attribute of <em>Log Domains</em>.
As every <em>Log Statement</em> has a <em>Log Domain</em> and a \e Verbosity
associated with it, \alox is able to match both values against each other to decide whether a
<em>Log Statement</em> is executed or not.

When you think about this for a second, what is gained by this concept becomes obvious: The
overall verbosity of the log output is not controlled globally but on a 'per <em>Log Domain</em> basis'.
This allows to just switch the topic that an application is logging about. When interested in
user interface things, a <em>Log Domain</em> called \c "UI" might be set to a 'more verbose' level, while
other <em>Log Domains</em> are switched off or are reduced to real error messages.

As described later in this manual, the possibilities of \alox to filter the log output
are even more granular and flexible.

## 1.6. Scopes ## {#alox_man_terminology_scopes}
The \b '%Scope' is a next attribute any <em>Log Statement</em> possesses. The different types of scopes are nested into
each other and some of the possible values are similar to what the programming languages that
%ALox is written in provide. For example \e %Scope.Method is similar to what a variable that
is defined in a method has as a scope from a language perspective: it is visible only in exactly this method.
But still, in \alox, \e Scopes are different and the main reason is that \alox is not able to detect scopes in the
same way as a compiler of a programming language is. Therefore, we are talking about <b>language
related scopes</b>. In C++ and C# those are:

- \e %Scope.Path<br>
  The file path that a source file which contains the <em>Log Statement</em> in question is located
  in. As this can be also parent directories, this \e Scope type represents in fact on its own
  already a nested set of scopes!

- \e %Scope.Filename<br>
  The name of the source file in which a <em>Log Statement</em> is located in

- \e %Scope.Method<br>
  The name of a class method (in C++ also 'global' function names are detected) that a <em>Log Statement</em> is
  located in.

In Java, they are slightly different and named 'Package', 'Class' and 'Method'.

Besides these <em>language-related Scopes</em>, \alox in addition defines <em>thread-related Scopes</em>.
Those are relating to the thread that is executing a <em>Log Statement</em>. There are two of them, one defined as
an 'outer' \e Scope of the language-related set of \e Scopes, the other is an 'inner' \e Scope
of those.

All information about this topic is found in chapter
\ref alox_man_scopes. The corresponding enum type in the reference documentation is
<b>%Scope</b>
([C++] (@ref aworx::lib::lox::Scope),
 [C#]  (@ref  #cs::aworx::lox::Scope),
 [Java](@ref #com::aworx::lox::Scope)).

## 1.7. Scope Domains ## {#alox_man_terminology_scopedomains}
Attention: now it becomes tricky! Each <em>Log Statement</em> belongs to
a \e Scope, precisely, even to a set of nested \e Scope values. The grouping of the statements
into \e Scopes is done automatically by \alox. The \e Scope is detected from the position
of the <em>Log Statement</em> within the source code and from the thread that is executing it.
Now, a <b>Scope Domain</b> is a default domain set by the user of %ALox for a specific \e %Scope.
Once such default value is set, %ALox uses this domain for each <em>Log Statement</em> located within that \e %Scope.
This way, <em>Log Statements</em> get their <em>Log Domain</em> associated 'automatically'.

As a sample, a <em>Scope Domain</em> \c "DB" could be set as the default <em>Log Domain</em> for \e %Scope.Filename
(In ALox for Java: \e %Scope.CLASS) that contains code that stores and retrieves data from a
database management system. Now, all <em>Log Statement</em> within this source file (class) get this <em>Log Domain</em> automatically
associated, without explicitly specifying \c "DB" with every <em>Log Statement</em>.
Therefore - although each <em>Log Statement</em> needs to refer to a <em>Log Domain</em> - such domain is not needed to be
added to each statement into the source code. This has several advantages: less typing, less
code clutter by <em>Log Statements</em>, copied <em>Log Statements</em> magically switch their domain when
'pasted' into a different scope, and so forth.

As you see, there are two ways to assign a <em>Scope Domain</em> to a <em>Log Statement</em>: Either
by providing optional parameter \p{domain} with a <em>Log Statement</em>, or by setting a <em>Scope Domain</em>
and omitting the parameter.

## 1.8. Tree of Log Domains and Domain Path ## {#alox_man_terminology_logdomaintree}
By having <em>Scope Domains</em> which associate a 'default domain' with a <em>Log Statement</em> that resides in a certain \e Scope
and knowing that the \e Scopes are nested into each other, the question is what happens if multiple
<em>Scope Domains</em> apply to the same <em>Log Statement</em>? Or, a similar question: what happens if a <em>Scope Domain</em> is set for a \e Scope that a
<em>Log Statement</em> resides in and in addition, the <em>Log Statement</em> uses optional parameter \p{domain} to explicitly specify
a <em>Log Domain</em>?

The answer is: %ALox concatenates all <em>Scope Domain</em> to a <b>Domain Path</b>, separated by character <c> '/'</c>.
This means that %ALox organizes <em>Log Domains</em> hierarchically, hence this can be seen as a <b>tree of Log Domains</b>.
The concatenation starts from the most 'outer' \e Scope and ends at the most 'inner'. The value of optional
parameter \p{domain} is appended close to the end - but not completely at the end.

Besides 'mixing' <em>Scope Domains</em> and parameter \p{domain}, \alox also allows to 'overwrite'
<em>Scope Domains</em> with parameter \p{domain}.

Using the techniques in the right manner, is one of the keys to efficiently use \alox.
The details of how this is done is explained in a dedicated chapter: \ref alox_man_logdomains.


\~Comment ####################################################################################### \~
# 2. Class Lox - Managing it all# {#alox_man_alox_tak_lox}

The definitions and terminology that were introduced in this chapter so far should be
quickly summarized. We have:

- <b>Loggers and Logables:</b><br>
  \e Loggers are responsible for writing the contents of \e Logables to dedicated output 'drains' like the
  console, a text file or a remote server. Multiple \e Loggers might exist even in quite simple
  applications.
- <b>Log Statements and associated attributes:</b><br>
  A <em>Log Statement</em> is the user code that invokes the interface API of %ALox and pass a \e Logable, e.g. a
  text message to %ALox.
  Each <em>Log Statement</em> has three attributes besides the \e Logable:
  1. A \e Verbosity, defining the 'importance' or 'severeness' of the statement.
  2. A <em>Log Domain</em> that makes the <em>Log Statement</em> belong to a certain set of <em>Log Statements</em>. <em>Log Domains</em> can be considered to specify
     the 'topic' that a <em>Log Statement</em> is 'talking' about.
  3. A \e Scope, which gives a different, automatic way of grouping <em>Log Statements</em>.
- <b>Scope Domains:</b>
  Those are acting as 'default domains' and are collected and concatenated by %ALox to form,
  together with parameter \p{domain} of a <em>Log Statement</em>, a 'domain path' identifying the resulting, final
  <em>Log Domain</em> of a <em>Log Statement</em>.

Now, the most prominent class of %ALox which acts almost like a "single point of contact" comes
into the game: Class
<b>Lox</b>
  ([C++] (@ref aworx::lib::lox::Lox),
   [C#]  (@ref  #cs::aworx::lox::Lox),
   [Java](@ref #com::aworx::lox::Lox)).

This class keeps it all together! This is what class  \b %Lox does:

- It provides the most important parts of the %ALox API, especially those interface methods that comprise <em>Log Statements</em>.
- It manages a set of <em>Loggers</em> which write the \e Logables of <em>Log Statements</em>.
- It maintains a tree of hierarchically organized <em>Log Domains</em>.
- It stores a \e Verbosity value for <em>Log Domains</em>, which
  is the counter-value of a <em>Log Statements</em>' \e Verbosity and determines if a <em>Log Statement</em> is executed or not.
  This is done on a per-\e Logger basis.
- It automatically determines the \e Scope of a <em>Log Statement</em> and manages the associated
  nested <em>Scope Domains</em>.
- It provides other nice features related to \e Scopes, like \ref alox_man_log_once, \ref alox_man_prefix_logables
  or \ref alox_man_log_data
- It collects some meta information like timestamps or counters.
- It provides a dictionary to translate thread IDs in human readable (logable) thread names.

It becomes clear that this class is an \alox users' main interface into logging. After \alox was
set-up once (probably in the bootstrap section of a software), and <em>Loggers</em> are created,
configured and attached to a \b %Lox, this class is almost all that is needed across all other parts of
a software. All main \alox functionality, especially the interface for the logging statements themselves
is comprised in this class.

One important detail of the internal management of class \b Lox is the fact that it
associates a separated <em>Verbosity</em>  value for each combination of <em>Log Domain</em> and
<em>Logger</em>.<br>
The rational behind that is easy to understand: An application that supports different \e Loggers
at once (which happens quite quickly when using \alox), might want to log different subsets of the
log messages with a different \e Verbosity to each of theses \e Loggers. For example, a \e Logger
dedicated for debug-logging that streams into an output window of an IDE, would be desired to
be generally more verbose and also switch \e Verbosity more frequently, than a
<em>Logger</em> that in parallel logs into a file which is storing also logs of earlier debug sessions.

## 2.1 Prefix Logables ## {#alox_man_alox_tak_lox_prefixlogables}
While those interface methods in class
<b>Lox</b>
  ([C++] (@ref aworx::lib::lox::Lox),
   [C#]  (@ref  #cs::aworx::lox::Lox),
   [Java](@ref #com::aworx::lox::Lox)) which comprise a <em>Log Statement</em> already accept an
arbitrary amount of \e Logables as parameters, this list can even be extended by further objects
which are then all together passed to method
<b>%Logger.Log</b>
  ([C++] (@ref aworx::lib::lox::core::Logger::Log),
   [C#]  (@ref  #cs::aworx::lox::core::Logger::Log),
   [Java](@ref #com::aworx::lox::core::Logger::log)) of each \e Logger attached.

Such additional objects are called <b>Prefix Logables</b>.
In short, \alox allows to associate \e Logables to \e Scopes. This way, all <em>Log Statements</em> 'collect'
such <em>Prefix Logables</em> which were defined to any of the nested \e Scopes  in a list and passes
them to the \e %Logger. We could have named them <em>Scope Logables</em> or <em>Context Logables</em>,
however, the word 'prefix' makes perfect sense with the most important type of \e Logables, namely strings!
With logging text messages, <em>Prefix Logables</em> act like a prefix to a log message.
All about this topic is found in chapter \ref alox_man_prefix_logables.

## 2.2 Log Once ## {#alox_man_alox_tak_lox_logonce}
Another feature of \alox which leverages the concept of \e Scopes, is found with overloaded methods
<b>%Lox.Once</b>
  ([C++] (@ref aworx::lib::lox::Lox::Once),
   [C#]  (@ref  #cs::aworx::lox::Lox::Once),
   [Java](@ref #com::aworx::lox::Lox::once)).

They are really 'heavily' overloaded, therefore the most simple version just accepts a \e Logable.
With this version \alox hides the use of \e Scopes and offers what you would expect from the methods'
name: logging a statement only the first time it is executed. The different parameters allow to
cover more complex uses cases than this. All about this <em>Log Statement</em> is found in chapter  \ref alox_man_log_once.

## 2.2 Log Data ## {#alox_man_alox_tak_lox_logdata}
As being able to 'prune' \alox debug-<em>Log Statements</em> from release code, a low hanging fruit for the \alox
feature list is to offer a concept for storing and using data, that otherwise would be
temporary debug variables during the development process. Again, \alox \e Scopes are leveraged
which makes the otherwise simple methods
<b>%Lox.Store</b>
  ([C++] (@ref aworx::lib::lox::Lox::Store),
   [C#]  (@ref  #cs::aworx::lox::Lox::Store),
   [Java](@ref #com::aworx::lox::Lox::store)) and
<b>%Lox.Retrieve</b>
  ([C++] (@ref aworx::lib::lox::Lox::Retrieve),
   [C#]  (@ref  #cs::aworx::lox::Lox::Retrieve),
   [Java](@ref #com::aworx::lox::Lox::retrieve)) quite powerful.

All about <em>Log Data</em> is found in chapter  \ref alox_man_log_data.



\~Comment ####################################################################################### \~
# 3. Using Multiple Lox Instances # {#alox_man_alox_tak_multiple_loxes}

While \alox claims to be lean, easy and [Bauhaus code style](\ref faq_bauhaus),
besides these concepts explained in this chapter, it was decided that a next
level of complexity is supported. The good news is: for simple use case scenarios, you do not
need to know about that.

So, this new 'level of complexity' is simply introduced by the fact that it is possible, and sometimes
very attractive, to create and use more than one instance of class \b Lox in a software.
Each class is populated with \e Loggers and of-course uses an own dedicated tree of domains.

The following paragraphs gives use cases and further background on using multiple \e Loggers.

## 3.1 A Dedicated Lox Singleton for Debug Logging ## {#alox_man_alox_tak_multiple_loxes_dbg_rel_log}

There are two fundamental logging scenarios that we call **debug logging** and **release logging**.
(For information, see \ref faq_debug_vs_release_logging.)

For various reasons (performance, code size, security, etc), debug <em>Log Statements</em> should be disabled
and removed (pruned) from the release version of a software.

To achieve all goals and provide a very simple interface into debug logging, the \alox ecosystem
provides class
<b>Log</b>
  ([C++] (@ref #aworx::lox::Log),
   [C#]  (@ref #cs::aworx::lox::Log),
   [Java](@ref #com::aworx::lox::Log))
This class is a 100% static interface into
class Lox. In other words, class Log creates and holds exactly one static instance of class Lox and
mimics the complete interface of that instance into corresponding static methods.

\dot
digraph example
{
    node [shape=record, fontname=Courier,   fontsize=12];
    edge [shape=record, fontname=Helvetica, fontsize=10];
    log  [ label="{Log|1:1 static prunable interface into Lox}"     URL="\ref cs.aworx.lox.Lox"];
    lox  [ label="Lox"                                              URL="\ref cs.aworx.lox.Lox"];
    logrs[ label="Loggers"                                          URL="\ref cs.aworx.lox.core.Logger"];
    doms [ label="Domains" ];
    cfg  [ label="Configuration Data"];
    log -> lox  [ label= "Contains 1 singleton" arrowhead="open", style="solid" ];
    lox -> logrs[ label= "manages"              arrowhead="open",               ];
    lox -> doms [ label= "manages"              arrowhead="open",               ];
    lox -> cfg  [ label= "manages"              arrowhead="open",               ];
}
\enddot

The assumption (restriction) that is taken here, is that debug logging is implemented by using
one dedicated Lox. This should be sufficient for most scenarios, because, as described above, within that Lox
instance various \e Loggers with own <em>Log Domain</em> settings will provide a lot of flexibility to log different
types of messages into different streams and manipulate the verbosity for
each stream accordingly.

\note
  Differences of language implementations:
  - In C# and Java, the only reason to introduce class \b Log and to mimic the interface of \b Lox
    with it, was that this opened the possibility for efficient pruning of debug <em>Log Statements</em>.
  - In C++, pruning is realized by preprocessor macros. Hence, class \b Log there does not mimic
    any interface method of \b Lox as said above. Still class \b Log exists and provides
    the remaining methods specific to debug-logging.
\note
  For more details on pruning and the use of class *Log*, consult the language specific
  documentation:
  [C++] (@ref alox_cpp_prepro),
  [C#]  (@ref alox_cs_pruning) and
  [Java](@ref alox_java_setup_pruning).<br>
  For a more details on debug and release logging see chapter \ref alox_man_debug_and_release_logging.


## 3.2 Separating Mission Critical Log statements ## {#alox_man_alox_tak_multiple_loxes_missioncritical}

Another motivation for using separated instances of class \b Lox may be understood when thinking
about use cases where things start getting critical from different point of views. For example:

- A Lox is supposed to collect runtime data from <em>the field</em>, hence metrics, which are
  transferred using a tailored \e %Logger that contacts a metrics server at runtime. The team
  that implements such metrics collection, may, for good reason, not want to share 'their' \b Lox
  with other parts of a software maintained by another team. Accidental mis-configuration of the
  Lox and its domain may lead to uncontrolled server communication.
- A Lox is supposed to collect critical runtime errors from deployed software. Such log information
  should be separated from other log streams, e.g. much more 'verbose' standard release-logging
  that goes to a rolling log file
- A local software want to support writing messages to the \e Linux or <em> Windows OS</em> specific
  system journal. Also in this case, a mis-configured Lox might 'spam' into such system journals
  in an inappropriate manner, and it would be advised to use a separated Lox that is not touched
  outside its scope of activity.

## 3.3 Multiple Registration of a Logger ## {#alox_man_alox_tak_multiple_logger_registration}

It is explicitly allowed  to attach a \e %Logger to more than one \b Lox object.
class \b %Logger implements a mechanism to protect
against race conditions in multi-threaded environments as soon as such double-registration occurs.
The obvious use case is again the mission-critical, separated \b Lox described in the previous
paragraphs. A \e %Logger that is responsible for 'standard' release logging, e.g. logging into a rolling
release log file, can be attached to the 'mission-critical' \b Lox which holds the corresponding
'mission-critical' \e %Logger. Now, the standard release log automatically receives a copy of the
'mission-critical' <em>Log Statements</em>.

# 4. Class ALox and Registration of Lox Instances # {#alox_man_alox_tak_lox_registration}

Pure static class
<b>%ALox</b>
  ([C++] (@ref aworx::lib::lox::ALox),
   [C#]   (@ref #cs::aworx::lox::ALox),
   [Java](@ref #com::aworx::lox::ALox)) keeps a list of all instances of class \b %Lox that
were registered with it. Registration is done by default when constructing a Lox.
The advantage of that registration is that a \b %Lox can be retrieved statically using
<b>%ALox.Get</b>
  ([C++] (@ref aworx::lib::lox::ALox::Get(const NString&, Create)),
   [C#]   (@ref #cs::aworx::lox::ALox::Get(String, Create)),
   [Java](@ref #com::aworx::lox::ALox::get(String, Create))). This is convenient because this way, references
of a \b %Lox do not be passed around or otherwise made public.

But there might be situations, when the this <em>'public availability'</em> of a \b %Lox
instance is not wanted. For this case, optional parameter \p{doRegister} may be set to \c false
when invoking constructor
<b>%Lox.Lox</b>
  ([C++] (@ref aworx::lib::lox::Lox::Lox),
   [C#]   (@ref #cs::aworx::lox::Lox::Lox),
   [Java](@ref #com::aworx::lox::Lox::Lox)).

\note
  Descriptions of other \e 'protection' mechanisms against unwanted manipulation of
  class \b %Lox are described in:
  - Section \ref alox_man_domain_substitution_config and
  - Section \ref alox_man_external_verbosity_configuration


<p>

--------------------------------------------------------------------
<center>Next chapter: \ref alox_man_logdomains </center> <center> \ref manual "Back to index" </center>

*/
