// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_man_scopes  05 - Scopes in ALox

\tableofcontents

\~Comment ####################################################################################### \~
# 1. Introduction #  {#alox_man_scopes_intro}

ALox uses the concept of \e Scopes in different ways. The most important and prominent use is to set
so called <em>Scope Domains</em>. Those can be registered and then are used as a 'default' domain
path with each <em>Log Statement</em> placed within the according \e %Scope. The concept of
<em>Scope Domains</em> has been explained already in the previous chapter (see \ref alox_man_logdomains). But to keep it simple,
the full variety of ALox \e Scopes was not yet, explained there. This is what this chapter
aims to do.

So, be sure, that you have read and understood chapter \ref alox_man_logdomains, before working yourself
through this chapter. Using the more complex possibilities of scopes is optional when using ALox, so you can
consider this chapter as an advanced topic.

Furthermore, there are other features in ALox that use \e Scopes. Those are elaborated in chapters
- \ref alox_man_log_once,
- \ref alox_man_prefix_logables and
- \ref alox_man_log_data.


\note
  When talking about \e Scopes, it is not easy to use a precise wording. (Therefore, we do not even
  try in this manual and other documentation of ALox!) The reason for this is that the \e Scope
  is not one value but is defined as a nested list of values. For example, when we say that
  two <em>Log Statements</em> that reside in the same file (Java: CLASS) have the same \e Scope, then this is true
  for \e %Scope.Filename, but maybe not for \e %Scope.Method. Also, it is not easy in English language
  to denote exactly what the difference of the \e Scope of a <em>Scope Domain</em> is in contrast to the \e Scope
  of a <em>Log Statement</em>. So, please excuse the imprecise use of that word, we are still sure you will understand
  what we talk about.

ALox \e Scopes are enumerated in enum-class
<b>%Scope</b>
([C++] (@ref aworx::lib::lox::Scope),
 [C#]  (@ref  #cs::aworx::lox::Scope),
 [Java](@ref #com::aworx::lox::Scope)). The \e Scopes found here are separated in two sets:

- <b>Scopes related to the programming language:</b><br>
  These scopes are identified 'automatically' at compile time with each invocation to a method of class \b Lox
  (as well as of class \b Log in ALox for C# and Java). In Java, for technical reasons, they are
  identified at runtime, but this does not affect their behavior.
- <b>Scopes related to the execution thread:</b><br>
  These scopes are identified at runtime, by examining the thread that is executing a method of class \b Lox.



\~Comment ####################################################################################### \~
# 2. Language-Related Scopes #  {#alox_man_scopes_language}

ALox adopts the concept of \e Scopes from each programming language of its implementation
(currently C++, C# and Java).
A variable declared in one of these languages belongs to a certain scope, e.g. to the
\e class when it is a <em>member variable</em>.

\e Scopes are \b nested into each other. We talk about 'outer' and 'inner' scopes.
For example the \e Scope of a method is nested into the \e Scope of the class that the method belongs to.

The language-related \e Scopes that ALox supports are (from outer to inner):

- \b %Scope.Global,
- \b %Scope.Path (in Java: \b Scope.PACKAGE),
- \b %Scope.Filename (in Java: \b Scope.CLASS) and
- \b %Scope.Method.

Apart from \e %Scope.Global, to evaluate the actual \e Scope of an invocation to class \b Lox,
ALox needs to 'automatically' collect information of the calling entity.
The techniques are different in each implementation:
- In ALox for C++ is this is achieved using preprocessor macros for all <em>Log Statements</em>.
- In ALox for C# the method annotations '[CallerFilePath]', [CallerLineNumber] and [CallerMemberName] are leveraged.
- In ALox for Java, the detection is performed at runtime by examining the 'stack trace' of an object of
  type Exception which is solely created for this purpose. (This implies a quite huge performance
  overhead, which roughly triples the execution time of a <em>Log Statement</em> in Java. However, as soon
  as such runtime information is not used, e.g. in typical release-logging, the overhead is
  avoided. And: ALox is fast still!).


As explained in detail in chapter \ref alox_man_debug_and_release_logging, for release-logging, such
automatic collection is not wanted. Without repeating the reasons for this here, let us emphasize
the consequence:

\attention
    The \e Scopes.Path (in Java Scope.PACKAGE), \e %Scope.Filename (in Java Scope.CLASS) and \e %Scope.Method can be
    used for debug-logging only! While it is possible to set <em>Scope Domains</em> and use other
    features of ALox which rely on \e Scopes,
    in release-logging, scope information values will be empty and hence not distinguishable from each other.<br>
    In ALox for Java, if a release application is obfuscated, such missing scope information is not
    detected and the result of its use is undefined.

The good news is: This is absolutely OK! The rational for claiming this is:
- In respect to <em>Scope Domains</em>:<br>
  Release-logging statements are quite rare compared to those of debug logging. Furthermore, they
  should be very well thought, clear and meaningful. It is advisable to not use <em>Scope Domains</em>
  in release logging anyhow (apart from thread-related and Scope.Global as explained below).
  Instead, <em>Log Statements</em> that comprise release-logging should specify the <em>Log Domains</em> they refer
  to \b explicitly.
- In respect to <em>Log Data</em>:<br>
  Well, the whole concept of <em>Log Data</em> provided by ALox is merely a tool to support the process
  of debugging, e.g. to explore the location of an exception in the log output. It is not deemed
  to be used to implement any functionality of an application, for example to store thread-local
  information.
- In respect to method
  <b>%Lox.Once</b>
    ([C++] (@ref aworx::lib::lox::Lox::Once),
     [C#]  (@ref  #cs::aworx::lox::Lox::Once),
     [Java](@ref #com::aworx::lox::Lox::once)):<br>
  For release logging, the optional parameter \p{group} certainly does the job. It should be used
  because, this makes release logging statements to be more explicit and readable.
- In respect to <em>Prefix Logables</em>:<br>
  The most important use case for them are to make the output better readable, e.g. by adding
  recursive indentation. Again, something that should not be too important for release logging.
  If it still is, a thread-related \e Scope can be used.

The following sections describe each of the language-related \e Scopes in detail.

\~Comment ####################################################################################### \~
## 2.1 Scope.Global ##  {#alox_man_scopes_language_global}
As the name of this \e Scope indicates, this is the 'most outer' \e Scope of ALox. It is always
there and only one single 'instance' of it exists per Lox. In other words, all <em>Log Statements</em> or other
invocations of ALox are executed 'within' this singleton scope.

\note
  Because scopes are managed by class \b Lox, each instance of this class provides its own \e Global
  scope, the same as a \e Lox has different \e Loggers, <em>Log Domains</em>, <em>Scope Domains</em>,
  <em>Log Data</em>, etc. Well, and this makes perfect sense!

When setting <em>Scope Domains</em> for the \e Global \e Scope, all <em>Log Statements</em> have such domain
as their root-domain. (Of-course, unless one inner <em>Scope Domain</em> or the statement itself
is using an absolute domain path!).


One use case of setting a <em>Scope Domain</em> for \e %Scope.Global  could be described as follows:
A \b Lox used for release-logging of special and sparse <em>Log Statements</em> (e.g. logging into the operating
systems' journal, aka event log). Now, in debug versions of the executable a debug-\e Logger is
attached to the release lox (in addition to attaching it to the debug-lox), within this debug log output, all
of these special <em>Log Statements</em> would be nicely sorted into the <em>Scope Domain</em> of \e %Scope.Global,
while non of the <em>Log Statements</em> to this release lox need to specify that domain path.

Another use case are special debug situations. Imagine a dubious behavior of a software
is observed rather seldom. A programmer could register a debug \e Logger with \e Verbosity \e All
for domain '/DEBUG'. Now, when a certain first indication for the start of the dubious behavior
occurs, a setting of the <em>Scope Domain</em> '/DEBUG' for \e %Scope.Global can be activated.
From this point in time, all <em>Log Statements</em> would be activated, because all <em>Log Statements</em> of all
code would be gathered beyond that temporary <em>Log Domains</em> '/DEBUG' and all sub-domains inherit its \e Verbosity.


\~Comment ####################################################################################### \~
## 2.2 Scope.Path (In Java Scope.PACKAGE)  ##  {#alox_man_scopes_language_path}

This \e Scope has a different name and meaning in ALox for C++/C# and ALox for Java.
Let's start with the Java side of things - well, but, even as a C++ or C# programmer, please continue
reading here!

The scope information collected by ALox for each <em>Log Statement</em> incorporates the
'package' name of the class and method that is executing it.
Therefore, using method
<b>%Lox.SetDomain</b>
([C++] (@ref aworx::lib::lox::Lox::SetDomain(const NString&, Scope)),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomain),
 [Java](@ref #com::aworx::lox::Lox::setDomain)) with \e Scope PACKAGE
in Java instructs ALox to use the given <em>Scope Domain</em> for all <em>Log Statements</em> residing in any
class of the package.
Now, method <b>%Lox.SetDomain</b> optionally offers a parameter \p{packageLevel} which defaults
to \c 0. This parameter is ignored with other \e Scopes. For \e %Scope.PACKAGE, however it
allows to refer to an 'outer package'. If this parameter is set to \c 1, ALox searches the last '.'
in the package name and cuts this and the rest of the name off. This way, \e %Scope.PACKAGE can
be considered to not denoting just a single \e Scope, but rather <b>a set of nested scopes</b> itself! Consequently,
when executing a <em>Log Statement</em> within a method of a class residing in a nested package for which
a <em>Scope Domain</em> is set, then, if any of the 'parent' packages of this package has also set
a <em>Scope Domain</em>, each of them is applied!

The corresponding concept of Java 'packages', in C++ and C# are 'namespaces'. Unfortunately,
ALox is not able to automatically gather information about the namespace that a <em>Log Statement</em>
resides in.
To achieve a similar functionality in these languages, the way out, is using the path
in the file system of the source file that embeds a <em>Log Statement</em>. The prerequisite for
this is that all source files are <b>sorted properly into sub-directories</b> according to the
namespace they they belong to. For example, a directory tree could look like this:

        /home/user/myproject/src/main.cpp
        /home/user/myproject/src/ui/menu/menu.cpp
        /home/user/myproject/src/ui/dialogs/about.cpp
        /home/user/myproject/src/io/sockets/http.cpp
        /home/user/myproject/src/io/database/mysql.cpp

With a directory structure similar to the one given above, <b>%Scope.Path</b> available in
ALox for C++/C# works exactly the same as \e %Scope.PACKAGE in Java.
A <em>Log Statement</em> which resides in file

        /home/user/myproject/src/ui/dialogs/about.cpp

would have path

        /home/user/myproject/src/ui/dialogs

as associated \e %Scope.Path. Instead of optional paramter \ packageLevel of method
<b>%Lox.SetDomain</b>, in C++ and and C# the outer directories can simply be reached by adding
an integer value specifying the number of directories to cut, to the enumeration element
\b %Scope::Path.

\note
  This differences in the interface is caused by the fact that Java does not allow to do arithmetics
  with elements of enumerations. C# allows this and in C++ we use the concept of
  \ref aworx::lang::T_EnumIsArithmetical "ALib arithmetical enums".).

If this is used, for values greater than \c 0, the corresponding amount of directories are cut
from the end of the source files' path to determine the parent directory that a <em>Scope Domain</em> should
be set for. As with Java packages, \e %Scope.Path can be considered being not just a single \e Scope, but
rather a set of nested scopes itself. All <em>Scope Domains</em> set for a path of a file as well as
those set for parent directories within this path, are applied - from the inner path to the outer
path.

\note
  In general, the organization of the source code in a well structured tree of directories
  corresponding to the tree of nested namespaces, is a good idea.<br>
  If a project using ALox is \e not organized this way, and there is no possibility to restructure
  the source tree for this purpose, then the \e %Scope.Path still can be used. It just will
  not match and reflect the namespace but (quite as its name indicates) the structure of the
  source tree.<br>
  However, if all sources of a project simply reside just in one single directory, then the use of \e %Scope.Path
  is not advisable. Its effect would be similar to  \ref alox_man_scopes_language_global "Scope.Global", with the
  only difference that a thread-related \e Scope is applied after \e %Scope.Path but before \e %Scope.Global.
  (Thread-related \e Scopes are discussed later in this chapter).

<p>

\note
  Because ALox is designed to tolerate errors as much as possible, the use of values for
  parameter \p{packageLevel} (in Java, respectively in C++/C# the use of adding interger values to enum element \b %Scope::Path)
  that are higher than the number of sub-packages (respectively directories) that can be cut, does *not* result in an error.
  Instead, an empty package/path name is registered and consequently, a registration
  with, lets say level \c 42 would simply be overwritten by a subsequent registration with level \c 43
  and the effect would be nearly similar to using \e %Scope.Global.<br>
  In C++/C# on Windows OS, still the drive letter would remain and such setting would apply to
  all source files residing on the corresponding drive.


\~Comment ####################################################################################### \~
## 2.3 Scope.Filename (In Java Scope.CLASS)  ##  {#alox_man_scopes_language_filename}

Like \e Scopes \e Path/PACKAGE, this  \e %Scope.Filename/CLASS has a different name and meaning
in ALox for C++/C# and ALox for Java. But here it is quite simple.

In Java, \e %Scope.CLASS simply refers to all statements used within a class.

Again, in C++/C# ALox is unable to automatically identify a class name that a <em>Log Statement</em>
resides in. Furthermore, in C++ a <em>Log Statement</em> may not even reside within a class.
Therefore, the corresponding \e %Scope.Filename in those languages refer to the name of the source
file that a <em>Log Statement</em> resides in. In the usual case when each classes' code resides within a dedicated
source file, the effect of both \e Scopes are the same.

Files with the same name, but residing in different directories are treated as different files.

In C++, if the file name has an extension (like .cpp, .hpp, .h, .hxx, etc.), such extension is
ignored. This way, by setting a <em>Scope Domain</em> of \e %Scope.Filename e.g. from within a '.cpp' file,
such setting also applies to <em>Log Statements</em> occurring in the corresponding '.hpp' file.
Again, this is only true if both files reside in the same directory!


\~Comment ####################################################################################### \~
## 2.4 Scope.Method ##  {#alox_man_scopes_language_method}

\e %Scope.Method (in Java Scope.METHOD) comprises all <em>Log Statements</em> which are
residing in a certain method. This is the 'most inner' of the language-related set of \e Scopes
supported by ALox. But it is not the most inner of all ALox \e Scopes, as we will learn later
in this chapter.

As \e %Scope.Method is 'language-related', its behavior is like in the programming language in respect
to nested method calls: Same as a method variable is not 'visible' within other methods
that are invoked from this method, a <em>Scope Domain</em> set in a method is not 'active' within
nested, invoked methods. This of-course makes a lot of sense, otherwise <em>Scope Domains</em> of methods
would be overwritten or at least redirected by <em>Scope Domains</em> of a calling method.

\note
  ALox also provides a feature of adding a <em>Scope Domain</em> for a method and all
  methods it invokes! The way how to achieve this is described later in this chapter.


\~Comment ####################################################################################### \~
## 2.5 Anonymous Scopes ##  {#alox_man_scopes_language_anonymous}
The programming languages C++, C# and Java, allow to open and close 'anonymous scopes' using
curly braces '{' and '}'. For example, a variable declared in such anonymous scope is not visible to the rest
of the method. Unfortunately, these anonymous scopes can not be 'detected' by ALox
automatically. In C++, with the help of its concept of strict 'stack-unwinding', it would be
possible to extend ALox to support inner \e Scopes for nested blocks that automatically get
unset as soon as program execution leaves an anonymous scope. In favor of keeping the different
language versions compatible (and also in favor to not overcomplicate things!), this is not offered by ALox.

But there is an obvious way to reach the goal of setting  sub-domains for <em>Log Statements</em> within a
block of code: Simply equip each <em>Log Statement</em> of an anonymous source scope with a relative path
using parameter \p{domain}. Such relative domain paths provided with
a <em>Log Statement</em> are placed by ALox within the evaluated, resulting domain path, as if they
resulted from a <em>Scope Domain</em> setting of an inner \e Scope of \e %Scope.Method.

\~Comment ####################################################################################### \~
## 2.6 How To Set Scope Domains for Language-Related Scopes ##  {#alox_man_scopes_language_setting}

When reading earlier chapter \ref alox_man_logdomains and the later chapters
(\ref alox_man_log_once, \ref alox_man_prefix_logables and \ref alox_man_log_data),
you might be surprised, that the only way to use a specific \e Scope is to do this with an
invocation of a corresponding method of class \b Lox <b>from within</b> that \e Scope itself.

Why does ALox not provide alternative interfaces that makes it possible to
explicitly address a \e Scope with an invocation from 'outside' of this scope? E.g. why is it not
possible to set the scope for a method by naming the class and method, e.g. in the bootstrap
section of an application?

The reason is to avoid ambiguities and misconfigurations. If such possibility existed, even if a
method class names were given, the same class and method name, might exist in a library, probably
using a different namespace. This makes it obvious that the full 'outer' scope has to be provided.
Still, adding the namespace in Java would be easily possible, however
in C++/C# we are working with the source files' paths and these are quite volatile things.
When working in a team, or already when one person is working in parallel on two different machines
(at work and at home) the paths may vary.
Furthermore any sort of code refactoring in any respect would enforce a 'manual' change of scope
specifications.<br>
The errors and hassle that would quickly occur when the explicit naming of \e Scopes was
supported by ALox would not justify the benefits.

But we do not consider this as a restriction. The responsibility for <em>Log Domains</em> names
is deemed to rely in 'the hands' of the code that is defining the <em>Log Statements</em> using these
<em>Log Domains</em>. The maintainer of
a certain subset of a code within a project should know best which domains and sub-domains are
to be used. As an exclamation, the use of rather 'global' domains that collect certain information,
e.g. "/CONFIG_ERRORS", should be aligned across the team. Usually those domains are addressed
using an absolute path within a <em>Log Statement</em> - and hence are not impacted by
the \e Scope and potentially associated <em>Scope Domains</em> anyhow.

\note There is one obvious use case, that might let you think about changing <em>Scope Domains</em> set
      in scopes not reachable by your code: This is when for some reason you want to change
      the domains that a library (or part of the project you do not have access to) uses.
      To do this, ALox provides a concept called <em>Domain Substitution</em>,
      described in \ref alox_man_domain_substitution. The huge advantage of this approach is, that this
      feature substitutes \b all <em>Log Domains</em>, regardless whether they are evaluated by ALox from
      <em>Scope Domains</em> or if they are given as parameters of the <em>Log Statement</em>.

Having said this, it is agreed and and understood that the definition of <em>Scope Domains</em> of
language-related \e Scopes has to appear in source code within the \e Scope itself - optionally
within an 'inner' \e Scope of the \e %Scope.
For example, within a method of a class, both \e %Scope.Method and \e %Scope.Filename (in Java \e Scope.CLASS)
can be set.

What should be avoided are <b>Contrary settings</b>.
If the same \e Scope is set with different values, the second invocation just replaces the first
one. Therefore, some random behavior might appear when the settings of <em>Scope Domains</em> are
contrary. For example, a <em>Scope Domain</em> for a package name (Java) or source folder (C++/C#) could
be set from different classes belonging to this package, respectively source folder.
As a rule of thumb (to avoid double definitions), it is advised to put the registration code to
the most central (important) class of such package.

A snapshot of all current settings can be logged using
<b>%Lox.State</b>
([C++] (@ref aworx::lib::lox::Lox::State),
 [C#]  (@ref  #cs::aworx::lox::Lox::State),
 [Java](@ref #com::aworx::lox::Lox::state)) to investigate which settings have been performed.
Alternatively, if the snapshot is not enough to understand what is set, overwritten and used where,
a live log of ALox' internal messages can be activated to identify exactly what the code is doing
in respect to <em>Scope Domains</em>.
See \ref alox_man_internal_domains for more information about how to enable internal log messages.


\~Comment ####################################################################################### \~
# 3. Thread-Related Scopes #  {#alox_man_scopes_thread}

This section adds two new \e Scope 'levels', named:

- <b>%Scope.ThreadOuter</b>
  ([C++] (@ref aworx::lib::lox::Scope.ThreadOuter),
   [C#]  (@ref  #cs::aworx::lox::Scope.ThreadOuter),
   [Java](@ref #com::aworx::lox::Scope.THREAD_OUTER)) and
- <b>%Scope.ThreadInner</b>
  ([C++] (@ref aworx::lib::lox::Scope.ThreadInner),
   [C#]  (@ref  #cs::aworx::lox::Scope.ThreadInner),
   [Java](@ref #com::aworx::lox::Scope.THREAD_INNER))

to the ALox \e Scope feature. As the name indicates, these \e Scopes create a reference to the thread that
is executing a statement that is using values associated with such \e %Scope.

\note
  Even if your application is single-threaded, you should continue reading!

Looking at <em>Scope Domains</em>, of-course, they are used to add an additional component to the overall evaluated
<em>Log Domains</em> path of a <em>Log Statement</em>. For \e %Scope.ThreadOuter, such addition is performed at the
beginning of the evaluated <em>Log Domains</em> path, directly after \e %Scope.Global.
For \e %Scope.ThreadInner, the <em>Scope Domain</em> set is appended at the very end
of the evaluated <em>Log Domains</em> path. The term 'very end' is important: This is not only the most
'inner' of all \e Scopes, it is appended to the assembled <em>Log Domains</em> path even after the
optional parameter \p{domain} of a <em>Log Statement</em>.
In other words, it could be said, that \e %Scope.ThreadInner is even more 'inner' than the local,
optional parameter \p{domain} of a <em>Log Statement</em>.

The whole list of <em>Scope Domains</em>, together with the parameter \p{domain}, which are all concatenated
(as long as none of them is an absolute path) results to:

1. [L] Scope.Global
2. [T] Scope.ThreadOuter
3. [L] Scope.Path (PACKAGE)
4. [L] Scope.Filename (CLASS)
5. [L] Scope.Method
6. Parameter \p{domain} of a <em>Log Statement</em>
7. [T] Scope.ThreadInner

<em>Remark: [L] and [T] here indicate language-related and thread-related \e Scopes.</em>

\~Comment ####################################################################################### \~
## 3.1 Use Cases for Scope.ThreadOuter ##  {#alox_man_scopes_thread_outer}

An important use case for <em>Scope Domains</em> of \e %Scope.ThreadOuter is useful in single-threaded
applications, the same as in multi-threaded.
If a <em>Scope Domain</em> is set for \e %Scope.ThreadOuter prior to invoking
a method (and removed right after the invocation), all subsequent <em>Log Statements</em> are 'redirected' to
the domain path specified, covering the whole call stack of nested method calls. This way,
a portion of the program execution can be controlled in respect to the \e Verbosity of <em>Log Statements</em>
easily. You can consider this use as being similar to \e %Scope.Method but lasting not only for
the method itself but for all statements of recursively invoked methods as well.


In multi-threaded applications, \e %Scope.ThreadOuter is typically used in situations where the log
output of different threads should be separately controlled in respect to the \e Verbosity of their log output.
Imagine a background thread that causes trouble but uses the same code and libraries that the
rest of the application does. If you now would increase the \e Verbosity of such <em>Log Domains</em> where the
problems occurred, the log output would be 'cluttered' with a lot of <em>Log Statements</em> caused by
any thread of the process. Setting \e %Scope.ThreadOuter allows to 'redirect' all such log-output
of the thread in question to a dedicated root domain. Now, controlling the \e Verbosity of
the sub-domains of this thread-specific root domain allows to investigate directly what is
happening there. This sample addresses debugging and probably a temporary 'redirect' of domains
that is removed when a problem is fixed.

But there are also samples where a permanent setting of a \e %Scope.ThreadOuter makes sense.
Most operating systems/programming environments are using a dedicated thread implementing the
user interface. Handlers of UI-events like mouse clicks are installed and executed on a per
event basis. If now, with the very first UI event firing into the user code, (e.g. signaling that
the application is now running, or the main window was created), a <em>Scope Domain</em> like 'UI' is
registered with \e %Scope.ThreadOuter, all UI related code magically logs into
this domain path. As a consequence, no UI-related code like classes for dialog boxes, menu handlers,
etc, need to set such domain themselves (e.g. using \e %Scope.Path in a static constructor). <br>
Furthermore, it becomes very obvious from just looking at the sub-domains that get created, when
the UI thread is tasked with things that rather should be moved to a different thread to avoid
blocking the application for too long.

\note
  This last sample nicely shows, how the use of ALox for all debug-logging tasks, leads to new
  insights of a software, that simple "debug log statements" do not provide!

\~Comment ####################################################################################### \~
## 3.2 Use Cases for Scope.ThreadInner ##  {#alox_man_scopes_thread_inner}

While technically \e %Scope.ThreadInner is very similar to \e %Scope.ThreadOuter, the effect and
use cases still differs slightly. Instead of 'redirecting' just all log output of a thread into
a new sub-tree of <em>Log Domains</em>, \e %Scope.ThreadInner splits all 'leafs' of the overall
Log Domain tree by adding a thread-dependent <em>Log Domain</em> to those leafs.

When we think about this for a minute, the obvious use case is to filter the log output of
specific Sub-<em>Log Domains</em> by thread. First, when a <em>Scope Domain</em> of \e %Scope.ThreadInner
is set, the \e Verbosity of the new sub-domains will not change. This is true, because all new domains that are
created by this thread are sub-domains of those <em>Log Domains</em> used before. And such sub-domains
just inherit the setting as long as they are not controlled explicitly (as explained in
\ref alox_man_logdomains_recursive). From here, specifically for this thread, the \e Verbosity of
certain domains can now be tweaked until the right set of <em>Log Statements</em> appear.

Imagine a very general class providing a very general feature, hence frequently used by different
parts of a software. Increasing the \e Verbosity of a <em>Log Domains</em> of such class might increase the
overall log output too much. Now, by splitting such <em>Log Domains</em> using a <em>Scope Domain</em> for \e %Scope.ThreadInner
it becomes possible to either decrease the \e Verbosity for threads that are not of current
interest or by only increasing the \e Verbosity of the thread of interest.

Finally it is noteworthy to mention the impact of \e %Scope.ThreadInner being the most inner
<em>Scope Domain</em> that is evaluated:
1. A <em>Log Statement</em> that provides an absolute domain path directly in its statement using
   optional parameter \p{domain}, can still be split by <em>Scope Domains</em> of
   \e %Scope.ThreadInner.
2. If an absolute domain path is provided for a <em>Scope Domain</em> of \e %Scope.ThreadInner, then
   this 'flattens' all log output into exactly this single domain. (Even parameter \p{domain}
   of a <em>Log Statement</em> will not be used!)


\~Comment ####################################################################################### \~
## 3.3 Multiple Use of Thread-Related Scopes ##  {#alox_man_scopes_thread_multiple}

We learned in section \ref alox_man_scopes_language_path, that this \e Scope through the use of
optional parameter \p{pathLevel} of method
<b>%Lox.SetDomain</b>
([C++] (@ref aworx::lib::lox::Lox::SetDomain(const NString&, Scope)),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomain),
 [Java](@ref #com::aworx::lox::Lox::setDomain)) may be seen as whole set of nested
\e Scopes itself.

The same is true for \e %Scope.ThreadOuter and \e %Scope.ThreadInner! If multiple <em>Scope Domains</em>
are set for one of both \e Scopes, instead of overwriting the previous setting (as done with
language-related scopes), such <em>Scope Domains</em> are added to the ones that were previously set.<br>
This is important for almost all use cases described in the previous sections.

Hereby, subsequent settings are 'inner' \e Scopes of the previous ones. This means, that
during program execution the first <em>Scope Domain</em> that is set, results in a higher level within
the domain tree. Subsequent <em>Scope Domains</em> set result in direct sub-domains of the former
ones.<br>
ALox, when passing a nulled string with parameter \p{scopeDomain} of method \b %Lox.SetDomain removes
the most recently set <em>Scope Domain</em> first. But also an out-of-order removal of thread-related \e Scopes is possible.
More details on setting and removing <em>Scope Domains</em> for thread-related \e Scopes is given
in the next section.


\~Comment ####################################################################################### \~
## 3.4 How To Set Scope Domains for Thread-Related Scopes ##  {#alox_man_scopes_thread_setting}

The same method,
<b>%Lox.SetDomain</b>
([C++] (@ref aworx::lib::lox::Lox::SetDomain(const NString&, Scope)),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomain),
 [Java](@ref #com::aworx::lox::Lox::setDomain)) which is used for language-related \e Scopes
is used to set and remove thread-related \e Scopes.

If a domain path is given with parameter \p{scopeDomain} and either \e %Scope.ThreadOuter or
\e %Scope.ThreadInner for parameter \p{scope}, then this domain path is added to the list of
corresponding domains set. The list reflects a set of nested \e Scopes for itself.

To remove the most recently added <em>Scope Domain</em>, it is sufficient to do the same call, with
an empty or nulled parameter \p{scopeDomain}. Again, this is the same as with removing or 'un-setting'
<em>Scope Domains</em> of other \e Scope types.

For the case that the reverse order of adding and removing thread-related <em>Scope Domains</em>
can not be guaranteed, class \b Lox offers method
<b>%Lox.RemoveThreadDomain</b>
([C++] (@ref aworx::lib::lox::Lox::RemoveThreadDomain),
 [C#]  (@ref  #cs::aworx::lox::Lox::RemoveThreadDomain),
 [Java](@ref #com::aworx::lox::Lox::removeThreadDomain)) which accepts the domain path
to be removed explicitly as a parameter.

It was discussed in \ref alox_man_scopes_language_setting, that those types of \e Scopes can only be
set from 'within' the \e Scope to be set (the same or an inner \e Scope). This is different
with thread-related \e Scopes. Method
<b>%Lox.SetDomain</b>
([C++] (@ref aworx::lib::lox::Lox::SetDomain(const NString&, Scope)),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetDomain),
 [Java](@ref #com::aworx::lox::Lox::setDomain)) as well as
<b>%Lox.RemoveThreadDomain</b>
([C++] (@ref aworx::lib::lox::Lox::RemoveThreadDomain),
 [C#]  (@ref  #cs::aworx::lox::Lox::RemoveThreadDomain),
 [Java](@ref #com::aworx::lox::Lox::removeThreadDomain)) accept an optional parameter
\p{thread} which allows to explicitly provide the thread object to associate a thread-related
<em>Scope Domain</em> to. Of-course, if this parameter is omitted, the 'actual \e Scope',
hence the current thread, is used.

\note
  In C++, ALib (the \ref aworx::lib "utility library" that ALox is based on) provides class
  \ref aworx::lib::threads::Thread "aworx::Thread", which is mimicking the basic interface of
  corresponding classes found in the standard class libraries of C# and Java.
  Usually, a software using ALox would use a different library to create threads.
  As long as such library is creating 'native' threads of the underlying
  operating system, this is no issue. To refer to a thread created with a different library, the
  approach is as follows:
  - from within the thread that is created, ALib method
    \cpp_alib{threads,Threads::CurrentThread} has to be invoked on library singleton
    #aworx::lib::THREADS.
  - The pointer to the \ref aworx::lib::threads::Thread "aworx::Thread" object received has to
    be passed to the scope of the method that is supposed to set a thread-related \e Scope value
    for referencing the thread in question.


When things get more complicated, same as with language related scopes, a snapshot of all current
settings can be logged using <b>%Lox.State</b>
([C++] (@ref aworx::lib::lox::Lox::State),
 [C#]  (@ref  #cs::aworx::lox::Lox::State),
 [Java](@ref #com::aworx::lox::Lox::state)) to investigate which settings have been performed.

Alternatively, if the snapshot is not enough to understand what is set, removed and used where,
a live log of ALox' internal messages can be activated to identify exactly what the code is doing
in respect to <em>Scope Domains</em>.
See \ref alox_man_internal_domains for more information about how to enable internal log messages.


\~Comment ####################################################################################### \~
# 4. Wrap up #  {#alox_man_scopes_wrapup}

We want to summarize the takeaways of this chapter:

- \e Scopes are used for different features of ALox, as documented in
  \ref alox_man_logdomains, \ref alox_man_log_once, \ref alox_man_prefix_logables and \ref alox_man_log_data.
- Most of the samples and explanations in this chapter are related to <em>Scope Domains</em>.
- \e Scopes are nested, we have inner and outer \e Scopes.
- Four (programming-)language-related \e Scopes were introduced. They work similar to scopes of
  the programming languages.
- Two thread-related \e Scopes were introduced. They are runtime \e Scopes and associated with
  the thread executing a <em>Log Statement</em>.
- The two thread-related \e Scopes differ only in the 'position' within the hierarchy of \e Scopes.
- It was explained, that language-related \e Scopes are set exclusively by statements that are placed
  within the according \e Scope itself...
- ...while thread-related \e Scopes can also be set from within other threads, by providing
  the associated object of type Thread explicitly.
- Repetitive settings of language-related \e Scopes are overwriting previous settings.
- Repetitive settings of \e thread-related \e Scopes are each acting as a nested, inner scope of
  the previous setting.
- Removing <em>Scope Domains</em> is performed by passing a nulled or empty domain path to
  method \b Lox.SetDomain. In the case of thread-related \e Scopes this removes the most
  recently added <em>Scope Domains</em>. Therefore, if out-of-order removals are needed, method
  \b Lox.RemoveThreadDomain is to be used for removal.
- To investigate into settings of a \b %Lox, two options exist. Either by creating a snapshot
  of the current setting (using method \b Lox.State) or by activating internal log messages
  and observing which setting is made at which position in the source code and which point in time
  when running a process.

Finally we want to express an important thought: The three concepts of ALox, namely
1. Hierarchically organized <em>Log Domains</em>,
2. Nested \e Scopes and
3. <em>Scope Domains</em>,

align very nicely. Clever use of them may lead to true "emergence": Suddenly, log output provides
more information than the single <em>Log Statements</em>' messages itself. (Similar to water, which
has different "emerged" properties than the pure sum of the properties of each of its molecules.)


But, it should not be forgotten what the main purpose of <em>Log Domains</em> is: It is the control of the \e Verbosity
of subsets of <em>Log Statements</em>. In other words, the main purpose of <em>Log Domains</em> is not
to understand and analyze the calling hierarchy (call stack) of a piece of code.
While ALox may be used to help here quite nicely, there are other software tools and techniques
available for accomplishing this.<br>
Therefore our recommendation is: <b>Do not overuse the concept of <em>Scope Domains</em></b>.
With too many <em>Scope Domains</em> set, the original purpose of <em>Log Domains</em> may become
harder to achieve. Already the maintenance of \e Verbosities may start causing some unwanted effort.


--------------------------------------------------------------------
<center>Next chapter: \ref alox_man_log_once </center> <center> \ref manual "Back to index" </center>

*/
