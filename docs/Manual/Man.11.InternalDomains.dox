// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page man_internal_domains  11 - Internal Logging

Well, it seems like a miracle that C++ compilers are written in C++ and looking behind the
scenes it is really fine piece of <em>software art</em> when you really start bootstrapping
such a system from scratch!

Well, with ALox it was much more simple: We implemented ALox and when this was done, we just
added ALox Log lines into ALox code. Easy!

So, this chapter explains how these internal domains are organized and how an ALox user can
work with them. A first introduction to this is given in the language-specific tutorials,
chapter
<b>ALox Configuration Information and Internal Log Messages</b>
( \ref tutcpp_config "C++",
 \ref   tutcs_config "C#",
 \ref tutjava_config "Java").

\~Comment ####################################################################################### \~
# 1. The Internal Domain Tree # {#man_internal_domains_tree}
<em>Log Domains</em> are hierarchically organized in ALox. All <em>Log Domains</em> together constitute a "tree of <em>Log Domains</em>".
Class <b>Lox</b>
([C++] (@ref      #aworx::lox::Lox),
 [C#]  (@ref  #cs::aworx::lox::Lox),
 [Java](@ref #com::aworx::lox::Lox) ) maintains the tree, inserts <em>Log Domains</em> 'on the fly' and
manages the \e Verbosity on a per <em>Log Domain</em> and \e %Logger basis.

For internal <em>Log Statement</em>, ALox uses a second, separate domain tree. The separation is made to keep the
main tree of <em>Log Domains</em> 'free' for custom domains. If this was different, then setting the root domain
as in the following sample:

\snippet "UT_dox_manual.cs"        Man_InternalDomains___1

would affect internal log messages as well. Because of the separation, they are not.
To set or modify the \e Verbosity of internal <em>Log Domains</em>, static field
<b>%ALox.InternalDomains</b>
([C++] (@ref      #aworx::lox::ALox.InternalDomains),
 [C#]  (@ref  #cs::aworx::lox::ALox.InternalDomains),
 [Java](@ref #com::aworx::lox::ALox.INTERNAL_DOMAINS) ) has to be used as follows:

\snippet "UT_dox_manual.cs"        Man_InternalDomains___2

When you check out the reference documentation as linked above, you will see that this field
is a simple string \c "$/". Therefore, the code:

\snippet "UT_dox_manual.cs"        Man_InternalDomains___3

is equivalent to the previous line.

\note Of-course it is advised to use the static field instead of 'hard-coding' \c "$/" to
      be compatible with future versions of ALox (...or at least get a compiler error if this
      would be changed to something different than a string code.).

This piece of information is all you need to control \e Verbosity of ALox internal messages.

Please note, that method
<b>%Log.AddDebugLogger</b>
  ([C++](@ref      aworx::lox::Log::AddDebugLogger),
  [C#]  (@ref  cs::aworx::lox::Log::AddDebugLogger),
  [Java](@ref com::aworx::lox::Log::addDebugLogger)) sets the \e %Verbosity.Warning for
the internal domain. This way, when using ALox, your debug-logger will show you errors
and warnings if something goes wrong inside of ALox (e.g. when you pass wrong parameters
to ALox, etc.).

\~Comment ####################################################################################### \~
# 2. Sub-Domains used by ALox # {#man_internal_domains_sub}

For different topics, ALox uses different sub-domains for its internal logging. As usual,
this allows to control the \e Verbosity of the internal log output more granular then by setting
the internal root domain \c "$/". For example, if a software uses wrong <em>Log Domains</em> evaluated from a more
complex configuration of <em>Scope Domains</em>, then, to investigate into the problem,
sub-domain <c>'DMN'</c> could be set to more verbose, while
suppressing other internal messages:

\snippet "UT_dox_manual.cs"        Man_InternalDomains___3


The list of sub-domains used by ALox is given in the following table:

Sub-Domain | Description
- - - - - -| - - - - - - - - - - - - - - - - - - -
LGR        | Used when \e %Loggers are registered, retrieved or removed from a \b %Lox and when the \e Verbosity of a <em>Log Domain</em> for a \e %Logger is changed.<br>In addition used with method \b %Lox.SetStartTime.
DMN        | Used when <em>Log Domains</em> are registered (on first use), when <em>Scope Domains</em> are set or removed and when <em>Domain Substitution</em>Rs are set.
PFX        | Used when <em>Prefix Logables</em> are set or removed.
THR        | Used with method \b %Lox.MapThreadName.
LGD        | Used with storing and retrieving <em>Log Data</em> objects.




\~Comment

\~Comment ####################################################################################### \~
# 3. External Use of Internal Domains # {#man_internal_domains_external}

It is not 'forbidden' to have custom <em>Log Statements</em> using the internal domain tree:

\snippet "UT_dox_manual.cs"        Man_InternalDomains_ext___3

Of-course it is advisable to do so only if there are good reasons for that.
There is one occasion where this is already, by default done. ALox builds on underlying utility library
<b>%ALib</b>
  ([C++](@ref      aworx::lib),
  [C#]  (@ref  cs::aworx::lib),
  [Java](@ref com::aworx::lib)). ALib does not 'know' ALox (it is just too low level to 'know')
and hence uses an own way to have at least a minimum, fundamental way to communicate problems
to the outer world. This communication is implemented using ALib classes
<b>%Report</b>
  ([C++](@ref      aworx::lib::Report),
  [C#]  (@ref  cs::aworx::lib::Report),
  [Java](@ref com::aworx::lib::Report)) and
<b>%ReportWriter</b>
  ([C++](@ref      aworx::lib::ReportWriter),
  [C#]  (@ref  cs::aworx::lib::ReportWriter),
  [Java](@ref com::aworx::lib::ReportWriter)).
These classes together implement a pattern of having a 'pluggable' object that handles report
messages. The whole concept is mainly used in debug versions of ALib to report assertions caused
by wrong parameters or other faulty use of ALib classes.

Now, method
<b>%Log.AddDebugLogger</b>
  ([C++](@ref      aworx::lox::Log::AddDebugLogger),
  [C#]  (@ref  cs::aworx::lox::Log::AddDebugLogger),
  [Java](@ref com::aworx::lox::Log::addDebugLogger)) not only creates a (or more) \e %Logger
and attaches it to the \e Lox singleton used for debug-logging, it also creates a
custom \b %ReportWriter and plugs it to ALib! The type of this \b %ReportWriter is
<b>%ALoxReportWriter</b>
  ([C++](@ref      aworx::lox::ALoxReportWriter),
  [C#]  (@ref  cs::aworx::lox::ALoxReportWriter),
  [Java](@ref com::aworx::lox::ALoxReportWriter)). This class is forwarding ALib reports
to the debug \b %Lox singleton using internal domain <c>'$/REPORT'</c>.

This all makes a lot of sense, because this way, internal ALib reports are directed to the
same domain tree as internal ALox logging! When enabling internal log messages of ALox for
a \e %Logger, then also ALib reports are recieved.


\~Comment ####################################################################################### \~
# 3. Final Remarks # {#man_internal_domains_remarks}

It is absolutely OK, to register a \e %Logger exclusively for internal domains. Methods
<b>%Lox.RemoveLogger</b>
 ([C++] (@ref      #aworx::lox::Lox::RemoveLogger),
  [C#]  (@ref  #cs::aworx::lox::Lox::RemoveLogger),
  [Java](@ref #com::aworx::lox::Lox::removeLogger)) always removes the logger from
both, internal and standard <em>Log Domains</em>.

As an alternative to internal logging, method
<b>%Lox.LogConfig</b>
 ([C++] (@ref      #aworx::lox::Lox::LogConfig),
  [C#]  (@ref  #cs::aworx::lox::Lox::LogConfig),
  [Java](@ref #com::aworx::lox::Lox::logConfig)) provides an actual snapshot of all settings
made for a \b %Lox and its \e %Loggers attached.
Depending on the situation, each way to disclose what is going on inside ALox might help
when something is irritating. By the way, <b>%Lox.LogConfig</b>  lists the \e Verbosity settings
for each \e Logger for standard domains as well as for internal domains!

--------------------------------------------------------------------
<center>Next chapter: \ref man_external_verbosity_configuration </center> <center> \ref manual "Back to index" </center>
*/
