// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_man_log_data       08 - Log Data (Debug Variables)

\tableofcontents


\~Comment ####################################################################################### \~
# 1. Prerequisites #  {#alox_man_log_data_prerequisites}

For a better understanding of what is explained in this chapter, it might be advisable to have read:
- Chapter \ref alox_man_scopes. In short, at that place it is explained how ALox defines
  language-related \e Scopes (including the 'global' \e Scope) and thread-related \e Scopes.
  Both types are 'interwoven' and form the complete set, as denoted in enum-class
  <b>%Scope</b>
  ([C++] (@ref      #aworx::lox::Scope),
   [C#]  (@ref  #cs::aworx::lox::Scope),
   [Java](@ref #com::aworx::lox::Scope)).

- Chapter \ref alox_man_log_once

\attention
  Both chapters are prerequisites for understanding what is explained here.
  Especially the use cases that arise from using and combining the different
  parameters of method
  <b>%Lox.Once</b>
  ([C++] (@ref      #aworx::lox::Lox::Once),
   [C#]  (@ref  #cs::aworx::lox::Lox::Once),
   [Java](@ref #com::aworx::lox::Lox::once)), which are explained in a high degree of detail in
  the above mentioned chapter, is not repeated here. If all aspects of using \b %Lox.Once are
  understood, those can be quite easily adopted to what is described in this section!


\~Comment ####################################################################################### \~
# 2. Introduction #  {#alox_man_log_data_intro}

The concept of <em>Log Data</em> is a feature used for debugging. The goal that is aimed here
is similar to the goal of debug-<em>Log Statements</em> themselves. As a reminder, those are:
- Have a process log out debug messages, that help to understand a software during
  the implementation phase.
- Avoid adding \b temporary 'debug output statements'. Instead use \b permanent code, which
  can be disabled and preserved for later use, when needed.

Corresponding goals are aimed with <em>Log Data</em>. ALox provides this feature to enable
the insertion of variables and data into the code that otherwise would be temporarily
added for debug purposes and removed afterwards. The same as debug-logging is pruned from
release executables, such variables and their use gets pruned. Therefore, such variables and use
of them can stay in the code \e forever, and once a problem in the corresponding code section
appears, no need to reinvent temporary code is needed.

A typical example for using <em>Log Data</em> is debug log output written by an exception
handler. The code that may cause an exception, could store status information according to
\e %Scope.Method. When an exception occurs and the program execution abruptly continues within the
exception handler, such information can be retrieved and corresponding log output can be
generated giving more information about where and why the exception occurred.

\attention
  The whole concept of <em>Log Data</em> provided by ALox is merely a tool to support the process
  of debugging and debug code. Code using ALox <em>Log Data</em> should be pruned from release executables.
  In other words: It is not advised to use ALox Log Data to implement any functionality of
  an application, for example storing thread-local data used outside of <em>Log Statements</em>.
  There are other, standardized, reliable and efficient ways to store thread-local data.

\~Comment ####################################################################################### \~
# 3. Using Log Data #  {#alox_man_log_data_using}

The interface for setting and retrieving <em>Log Data</em> is provided with methods
<b>%Lox.Store</b>
([C++] (@ref      #aworx::lox::Lox::Store),
 [C#]  (@ref  #cs::aworx::lox::Lox::Store),
 [Java](@ref #com::aworx::lox::Lox::store)), and
<b>%Lox.Retrieve</b>
([C++] (@ref      #aworx::lox::Lox::Retrieve),
 [C#]  (@ref  #cs::aworx::lox::Lox::Retrieve),
 [Java](@ref #com::aworx::lox::Lox::retrieve)).

The type of data stored is \b Object in Java and C# implementations and
\ref aworx::lib::boxing::Box "Box" in <b>%ALox for C++</b>.

While in Chapter \ref alox_man_log_once of this manual, it was explained in detail how parameters
\p group and \p scope of method
<b>%Lox.Once</b>
([C++] (@ref      #aworx::lox::Lox::Once),
 [C#]  (@ref  #cs::aworx::lox::Lox::Once),
 [Java](@ref #com::aworx::lox::Lox::once)), can be omitted, how one of them can be used and what
happens when both are used, we do not want to repeat these details in this chapter.

Instead we want to discuss the differences:
- Instead of storing a counter (in \b %Lox.Once), with \b %Lox.Store, the data object is stored.
- Parameter \p group of method \b %Log.Once is named \p key in methods \b %Log.Store / \b %Log.Retrieve.
- If both parameters (\p group and \p scope) are omitted, \b %Log.Once defaults to the 'most inner \e Scope possible'
  (by switching the \e %Scope.Filename and creating a unique key from the line number), which
  is the single log line itself. In contrast to this, \b %Log.Store / \b %Log.Retrieve in the
  parameterless version refers to the 'most outer \e Scope possible', hence a global singleton object
   (singleton in respect to the instance of class \b %Lox used).

As a result, the use of <em>Log Data</em> can be summarized as follows:
- An otherwise parameterless invocation the methods \b %Log.Store / \b %Log.Retrieve stores and retrieves
  a global anonymous <em>Log Data</em> object.
- If parameter \p key is provided while parameter \p scope is omitted (or set to \e %Scope.Global),
  a named <em>Log Data</em> object is stored and can be retrieved using the same key.
- If parameter \p scope is provided while parameter \p key is omitted (or nulled or empty),
  an anonymous <em>Log Data</em> object is stored and can be retrieved (only) from within the same
  \p Scope as they were set.
- If both parameters, \p key and \p scope are provided, then the key is bound to the provided
  \e Scope and for this scope a named <em>Log Data</em> object is stored. Consequently, it can be
  retrieved (only) from within the same \p Scope as it was set and with using the same \p key.

For clarification, this means, that different <em>Log Data</em> objects are stored in different scopes
even if parameters \p scope and \p key are the same. For example,
an object stored using \p Scope.Method can not be retrieved from a different method and will also not be overwritten
within a different method. Again, the consequences and use cases of this design may become
clearer when reading chapter \ref alox_man_log_once "Lox.Once".


# 4. Language Specific Notes ##  {#alox_man_log_data_langspec}

## 4.1 ALox for C++ ##  {#alox_man_log_data_langspec_cpp}
It is important to understand that in ALox for C++, <em>Log Data</em> objects have to
be kept in memory, if they are passed as pointers. The question if data is passed as a pointer
or as a value is answered in \ref aworx::lib::boxing "ALib Boxing" documentation.

In short, it can be said, that typically all fundamental C++ types (\c int, \c char, \c double, etc.) as
well as pointers to those, are stored as values. The same is true for supported string types.
However, in the case of strings, the "value" passed is the pointer to the start of the string in
the memory. Therefore, this memory has to be kept valid.
In the case of storing an \b %AString, the memory stored might become invalid, if the string
is extended after it was stored. Be sure to understand this constraint when using this feature.

<h2> 4.2 ALox for C# </h2>

In the C# version of ALox, similar to methods
\ref cs::aworx::lox::Log::GetLogger "Log.GetLogger" and
\ref cs::aworx::lox::Lox::GetLogger "Lox.GetLogger", methods
\ref cs::aworx::lox::Log::Retrieve  "Log.Retrieve" and
\ref cs::aworx::lox::Lox::Retrieve  "Lox.Retrieve" are \b not automatically pruned from
in release code. The technical restriction here is that a method which is conditionally complied
using annotation <em>[Conditional("ALOX_DBG_LOG")]</em> is not allowed to return a value.
Therefore, the use of these methods either must appear in parameters of <em>Log Statements</em> (or any
other pruned statement) or must be enclosed with corresponding \c \#if / \c \#endif statements.



--------------------------------------------------------------------
<center>Next chapter: \ref alox_man_multi_threaded </center> <center> \ref manual "Back to index" </center>

*/
