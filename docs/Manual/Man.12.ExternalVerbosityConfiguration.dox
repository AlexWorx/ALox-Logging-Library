// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page man_external_verbosity_configuration  12 - External Verbosity Configuration

\tableofcontents

\~Comment ####################################################################################### \~
# 1. Introduction # {#man_external_verbosity_configuration_intro}

This Chapter brings us back to talking about <em>Log Domains</em> and their attribute <em>Verbosity</em>
which are associated with pairs of a <em>Log Domains</em> and a \e %Logger.
\note
  Please make sure that you have read and understood \ref man_logdomains before continue reading.

Setting such \e Verbosity by invoking
<b>%Lox.SetVerbosity</b>
([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)) is easy and straightforward. However, when
working in a team, different team members, working on different parts of a software, naturally
are interested in different information. Now, when the \e Verbosity is defined in the source
(preferably the bootstrap section of a software), then these would be randomly changed when
checking source files in and out of a source control system.
Therefore, ALox supports to read \e Verbosity settings from the command line, from environment
variables, from an ini-File or from any other custom data source. This way, all personal changes
are outside the code - good for your team spirit!

But before we can explain how this is done, we first have to talk about <b>priorities of
Verbosity settings</b>. This is an important prerequisite to understanding how
external configuration works in ALox.



\~Comment ####################################################################################### \~
# 2. Priorities of Verbosity Settings # {#man_external_verbosity_configuration_prios}

In the
<b>Tutorials</b>
 ([C++] (@ref cpptutorial),
  [C#]  (@ref cstutorial),
  [Java](@ref javatutorial)), in chapter \ref man_logdomains and elsewhere in the
ALox documentation, so far, we have just ignored an optional parameter of overlaoded methods:
<b>%Lox.SetVerbosity</b>
([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)). The parameter is named \p priority.
We did so, because this parameter, while extending the flexibility of ALox, brings a new
new level of complexity to the table.
The good news is that (as explained in \ref man_apdx_auto_config) when the parameter
is omitted, ALox behaves as if this feature was not existing.

The parameter is of \c int type and defaults to constant
<b>%Lox.PrioSource</b>
([C++] (@ref      #aworx::lox::Lox::PrioSource),
 [C#]  (@ref  #cs::aworx::lox::Lox::PrioSource),
 [Java](@ref #com::aworx::lox::Lox::PRIO_SOURCE)). The value of the constant is \c 100, but
for now, this is not of further interest. When passing a higher value here, subsequent invocations
for the <em>Log Domain</em> in question (or for one of its parent domains!) which use the standard value, will
be ignored. See the following sample:

\snippet "UT_dox_manual.cs"        Man_ExtVerbosityConfig___1

And its output:

\verbinclude  docs/ALox.CS/generated/Man_ExtVerbosityConfig_1.txt

As you see, the second invocation of \b %Lox.SetVerbosity is ignored, because the first had a
higher priority.<br>
With ALox internal logging (see \ref man_internal_domains)
activated, ALox nicely reports what is going on. We add line:

\snippet "UT_dox_manual.cs"        Man_ExtVerbosityConfig___2

to the top of the sample. Now the output is:

\verbinclude  docs/ALox.CS/generated/Man_ExtVerbosityConfig_2.txt

ALox in its internal log messages tells us that the second request was ignored.

Why is that useful? Well, honestly it really becomes useful only in consideration of
external configuration data, described later in this chapter. However, you think about it,
one field of application is in respect to sub-domain settings. Consider the following <em>Log Domain</em> tree:

        /UI
        /UI/MOUSE
        /UI/DIALOGS
        /UI/DIALOGS/MOUSE
        /UI/DIALOGS/KEYS

Imagine you are currently frequently switching the \e Verbosity of sub-domains of <em>Log Domain</em> <c>'/UI'</c>
because you are currently working on the UI. Now you have a random problem with mouse event
handling. As long as this problem occurs, <em>Log Statements</em> related to mouse event should stay \c Verbose.
Therefore, you enable them 'permanently' by invoking

\snippet "UT_dox_manual.cs"        Man_ExtVerbosityConfig___3

After that, any changes in parent domains, even for root-domain, will not disable <em>Log Statements</em> of
mouse events any more. When the mouse event handling is fixed, these settings can be deleted
again.

\note
  Once a priority of a \e Verbosity setting was increased, for the rest of the life-cycle
  of a process, this priority can not be changed back to a lower one. ALox does not provide
  an interface for that. The reason is simply, that the designers of ALox do not see any need
  in it. Honestly, if it was not so helpful for external configuration, the priority-feature
  of \e Verbosity settings would not have been implemented with ALox.

\~Comment ####################################################################################### \~
# 3. Priorities of External Configuration # {#man_external_verbosity_configuration_configprios}
For reading configuration data, ALox relies on the facilities provided by underlying utility
library ALib. Configuration mechanics of ALib are gathered in namespace
<b>[com::|cs::]%aworx::lib::config</b>. It is advisable to read the
<b>reference documentation</b>
 ([C++] (@ref      #aworx::lib::config),
  [C#]  (@ref  #cs::aworx::lib::config),
  [Java](@ref #com::aworx::lib::config)) of that namespace and its few classes. In short, the
features are:

- A public static singleton of class
  <b>%Configuration</b>
   ([C++] (@ref      #aworx::lib::config::Configuration),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration),
    [Java](@ref #com::aworx::lib::config::Configuration)) is found in field
  <b>%ALIB.Config</b>
   ([C++] (@ref      #aworx::lib::ALIB::Config),
    [C#]  (@ref  #cs::aworx::lib::ALIB::Config),
    [Java](@ref #com::aworx::lib::ALIB::config)).
- Class \b %Configuration supports \b 'plug-ins' that read configuration data from different sources.

- Default plug-ins are those for reading <b>command-line parameters</b> and
  <b>environment variables</b>. In addition, a class to read (and write) ini-Files is provided
  and an instance of that class can easily be created and attached.
  \note
    But instead, ALib proposes to attach custom configuration file processing - use your own standard!
    What is need to be done is to write a small plug-in that translates requests to read (and
    if wanted also wirte) ALib variables into your custom configuration system.

- The different \b plug-ins are asked for configuration data in a sequence defined by their
  \b priority. For example, command-line parameters have a higher priority than variables
  defined in an ini-File. This way, command-line parameters 'overwrite' ini-File entries.


As you see, the ALib configuration works with priorities the same as ALox \e Verbosity settings
do. Now, you might guess what happens! Of-course, the constants defining the priorities are
aligned. The following table gives an overview of these constants:

Constant|Value
- - - - |- - - - - - - - - - - - - - - - -
<b>%Lox.PrioProtected</b> ([C++] (@ref #aworx::lox::Lox::PrioProtected), [C#](@ref #cs::aworx::lox::Lox::PrioProtected), [Java](@ref #com::aworx::lox::Lox::PRIO_PROTECTED)) | \<max int\>
<b>%Configuration.PrioCmdLine</b> ([C++] (@ref #aworx::lib::config::Configuration::PrioCmdLine), [C#](@ref #cs::aworx::lib::config::Configuration::PrioCmdLine), [Java](@ref #com::aworx::lib::config::Configuration::PRIO_CMD_LINE)) | 400
<b>%Configuration.PrioEnvVars</b> ([C++] (@ref #aworx::lib::config::Configuration::PrioEnvVars), [C#](@ref #cs::aworx::lib::config::Configuration::PrioEnvVars), [Java](@ref #com::aworx::lib::config::Configuration::PRIO_ENV_VARS)) | 300
<b>%Configuration.PrioIniFile</b> ([C++] (@ref #aworx::lib::config::Configuration::PrioIniFile), [C#](@ref #cs::aworx::lib::config::Configuration::PrioIniFile), [Java](@ref #com::aworx::lib::config::Configuration::PRIO_INI_FILE)) | 200
<b>%Lox.PrioSource</b> ([C++] (@ref #aworx::lox::Lox::PrioSource), [C#](@ref #cs::aworx::lox::Lox::PrioSource), [Java](@ref #com::aworx::lox::Lox::PRIO_SOURCE)) | 100

When a \e Verbosity setting is read by ALox from external configuration, the priority of the plug-ins
that provided the data is used as the priority of the setting, just as if this value was
passed to method
<b>%Lox.SetVerbosity</b>
([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
 [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
 [Java](@ref #com::aworx::lox::Lox::setVerbosity)) using optional parameter \p priority.

As a programmer, you need nothing special to do. The same as ALox creates <em>Log Domains</em> on the fly as soon
as you are using them, the same it reads configuration data for these <em>Log Domains</em> without having
an explicit mandate for that. It just always does. If no configuration plug-ins are set, nothing
is read, ALox will not complain. However, if it finds configuration data that influences
the \e Verbosity setting of <em>Log Domains</em> you are using, then you will get noted by ALox as soon as
you have activated \ref man_internal_domains "Internal Logging".

Before it is explained how the format of configuration looks like, lets talk about two important
topics in respect to the priority values given in the table above.

1. <b>%Lox.PrioSource</b><br>
As we have learned, constant <b>%Lox.PrioSource</b> is the default value for optional
parameter \p priority of method <b>%Lox.SetVerbosity</b>. Having the lowest value of all constants,
this shows that any external configuration by default overwrites what is defined as
for the \e Verbosity "in the source code".<br>
When you consider what was said in the introduction section of this chapter, then this makes
perfect sense: Once you have defined your \e Verbosities externally, you do not need to care
if team members put their own preferred "temporary" <c>%Lox.SetVerbosity</c> invocations into
the source. Your setup is just not affected by this!<br>
<br>

2. <b>%Lox.PrioProtected</b><br>
We have not talked about this one, although there are situations when using this might become
very important:
\attention
  In some use cases, logging may become a critical key feature of an application. For example
  when collection metrics from the field with deployed applications.
  In this case, a programmer may want
  to disallow to disable such logging. This can be achieved using priority constant
  <b>%Lox.PrioProtected</b> with method
  <b>%Lox.SetVerbosity</b>
  ([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
   [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
   [Java](@ref #com::aworx::lox::Lox::setVerbosity)). A <em>Log Domain</em> can not be "deactivated" with
  command line parameters or environment variables, as soon as this priority value is used.


\~Comment ####################################################################################### \~
# 4. Variable LOXNAME_LOGGERNAME_VERBOSITY # {#man_external_verbosity_configuration_variable}

This was a lot of theory, before we now finally come to to the definition of the configuration
variable itself. When a \e %Logger is registered with an instance of class \b %Lox, ALox tries
to read configuration variable \b ALOX_LOXNAME_LOGGERNAME_VERBOSITY.
(This is done also whenever a new <em>Log Domain</em> is used and hence created on the fly.)

The portions <c>'LOXNAME'</c> and <c>'LOGGERNAME'</c> of the variable name have to be replaced by
the names of the instances of \b %Lox and \b %Logger in question.

Its format is:

        ALOX_LOXNAME_LOGGERNAME_VERBOSITY = [*]domainpath[*] = verbosity [ ; ... ]

In words: the variable contains pairs of parameters \p domainpath and \p verbosity separated by semicolons
<c>';'</c>.
- <b>Parameter domainpath</b><br>
  This denotes the path of the <em>Log Domain</em> whose \e Verbosity is to be set. Optionally the value may
  contain wildcard character <c>'*'</c> at the beginning or end of the string or at both
  places.

- <b>Parameter verbosity</b><br>
  The verbosity value as listed in enum class
  <b>%Verbosity</b>
  ([C++] (@ref      #aworx::lox::Verbosity),
   [C#]  (@ref  #cs::aworx::lox::Verbosity),
   [Java](@ref #com::aworx::lox::Verbosity)). The names given here are treated case insensitive.

With having the ability to provide wildcards, the possibilities to define the \e Verbosity
is a little different than when using method
<b>%Lox.SetVerbosity</b>
  ([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
   [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
   [Java](@ref #com::aworx::lox::Lox::setVerbosity))! The differences are:

- Using configuration variables it is possible to fetch <em>Log Domains</em> which are residing in different
  sub-domain trees. For example, setting <c>'*ERRORS*'</c>, affects any <em>Log Domain</em> with this substring
  in the path, like

        /ERRORS
        /UI/DIALOGS/ERRORS
        /COMM/ERRORS/SEVERE

  This is not possible with using method \b %Lox.SetVerbosity which always modifies exactly
  one <em>Log Domain</em> and its sub-domains..

- Using method \b %Lox.SetVerbosity, it is possible to use "relative path addressing", which
  means, a <em>Log Domain</em> or sub-domain of the evaluated, currently applicable domain resulting from
  <em>Scope Domains</em>, set can be addressed. Although it is not often recommended to do so, sometimes
  this possibility might be very helpful. For example to do a quick, temporary setting or for
  settings that are made explicitly "programatically", meaning those  who are depending on state
  conditions of a software)

In general, as already described, controlling the \e Verbosity using configuration variables
is preferred over using method <b>%Lox.SetVerbosity</b>. This is the reason why ALox
does not provide an interface method to set "rules", similar to those coming from configuration
variables from within the source code.

\note
  If you really, urgently want to have the same flexibility of setting the \e Verbosity for
  patterns of <em>Log Domain</em> paths, then your way to go is as follows:
  - Create an instance of class
    <b>%IniFile</b>
     ([C++] (@ref      #aworx::lib::config::IniFile),
      [C#]  (@ref  #cs::aworx::lib::config::IniFile),
      [Java](@ref #com::aworx::lib::config::IniFile)) which is not attached to a physical
    file (it represents then a pure "in-memory" ini-File).
  - Use method
    <b>%IniFile.Save</b>
     ([C++] (@ref      #aworx::lib::config::IniFile::Save),
      [C#]  (@ref  #cs::aworx::lib::config::IniFile::Save),
      [Java](@ref #com::aworx::lib::config::IniFile::save)) to define the configuration variable
    with the patterns of <em>Log Domain</em> paths as you desire.
  - Attach the instance of <b>%IniFile</b> to
    <b>%ALIB.Config</b>
     ([C++] (@ref      #aworx::lib::ALIB::Config),
      [C#]  (@ref  #cs::aworx::lib::ALIB::Config),
      [Java](@ref #com::aworx::lib::ALIB::config)).
    using method
    <b>%Configuration::InsertPlugin</b>
     ([C++] (@ref      #aworx::lib::config::Configuration::InsertPlugin),
      [C#]  (@ref  #cs::aworx::lib::config::Configuration::InsertPlugin),
      [Java](@ref #com::aworx::lib::config::Configuration::insertPlugin)) providing a different
    priority than a potentially existing "real" instance of \b IniFile (no two plug-ins may have
    the same priority).
\note
  Source code samples of how this is concretely done in the programming language of your choice is
  can be found in the unit tests of ALox.

\~Comment ####################################################################################### \~
# 5. Wrap-up # {#man_external_verbosity_configuration_wrapup}

As a summary, these are the takeaways of this chapter:

- ALox has an optional \p priority with method \b %Lox.SetVerbosity which is fully orthogonal
  in its use. This means, when omitted ALox works as if this feature was not existing.
- The priority of \e Verbosity settings taken by itself is not a fundamental game changer in
  respect to the flexibility and overall value of ALox. Nevertheless in some situations,
  some tricky things might be performed. (OK, here is another sample: an external library periodically
  changes the \e Verbosity of certain <em>Log Domains</em> - which by design it should not do. As we do not
  have access to the source code of that library, using a higher \p priority for a setting
  from outside the library fixes this)
- The recommended way to set \e Verbosities - especially when working in a team - is to use
  external configuration variables.
- It is possible to overwrite different data sources, e.g. use an environment variable to
  overwrite what is given in an iniFile. Or to have two ini-Files, one local user dependent
  and one general public instance. The user-dependent ini-File may modify (overwrite) settings
  of the general one.
- In special situations it is recommended to protect certain <em>Log Domains</em> from being changed
  at run-time. This is done by explicitly providing
  <b>%Lox.PrioProtected</b>
    ([C++] (     @ref #aworx::lox::Lox::PrioProtected),
     [C#]  ( @ref #cs::aworx::lox::Lox::PrioProtected),
     [Java](@ref #com::aworx::lox::Lox::PRIO_PROTECTED)) to method \b %Lox.SetVerbosity.
  A similar issue is described for <em>Domain Substitution</em>R
  \ref man_domain_substitution_config_prevent "here".
- External setting of \e Verbosity has different (partly more, partly less) possibilities
  in comparison to "programatically" setting. A way to extend the programatical setting
  to work the same as external configuration is by usin an in-memory ini-File.



--------------------------------------------------------------------
<center>Next chapter: \ref man_trim_source_path </center> <center> \ref manual "Back to index" </center>

*/
