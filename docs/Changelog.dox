// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2017 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page changelog         Change Log

Historically, there existed a kind of predecessor of this library for C++ and Java and was
more or less maintained since the year 1999. However this is a complete rewrite with C++, Java
and C# implementations.<br>
The first version released was V. 1.0.1 in **May 2013**.

This change log is sorted reversely in respect to chronology.


\~Comment ####################################################################################### \~
\~Comment #############################       V. 1709        #################################### \~
\~Comment ####################################################################################### \~

## Version 1709, Revision 0, released September 13th, 2017 ##

<b>Project Setup and Tools:</b><br>

- Migrated various tools to new versions, i.E: GCC 7.2.0, Clang 4.0.1, CMake 3.92, valgrind 3.13.0,  
  QT Creator 4.4.0, Rider 2017.1.1, IntelliJ 2017.2.4, CLion 2017.2, Eclipse Oxygen, VStudio 15.3.3
  Android Studio 2.3.3  
- Removed Android project for Eclipse. As a replacement, added Android Studio project.  
- JetBrains IDE support: For IDEs \e CLion, \e Rider and \e IntelliJ, the files found in the
  hidden \e .clion project folder are now included in the distribution. 
  In the case of \e CLion, dedicated project folders have been added to the build folder. 


<b>Changes in ALib:</b><br>
- Added enum classes
    <b>%SortOrder</b>
      ([C++] (@ref      aworx::lib::lang::SortOrder),
       [C#]  (@ref  cs::aworx::lib::lang::SortOrder),
       [Java](@ref com::aworx::lib::lang::SortOrder)) and
    <b>%SourceData</b>
      ([C++] (@ref      aworx::lib::lang::SourceData),
       [C#]  (@ref  cs::aworx::lib::lang::SourceData),
       [Java](@ref com::aworx::lib::lang::SourceData)).

- Added method
    <b>%IndexOfOrLength</b>
      ([C++] (@ref      aworx::lib::strings::String),
       [C#]  (@ref  cs::aworx::lib::strings::AString),
       [Java](@ref com::aworx::lib::strings::AString)) to class \b %AString (in C++ \b %String), 
       which returns the length of the string instead \c -1 in the case that the search has no result. 
       This is often more efficient and consequently, the use of method \b IndexOf has been replaced in
       various places of the library.

- Added overload method
    <b>%SearchAndReplace</b>
      ([C++] (@ref      aworx::lib::strings::AString),
       [C#]  (@ref  cs::aworx::lib::strings::AString),
       [Java](@ref com::aworx::lib::strings::AString)) to class \b %AString to search and replace
       characters (in contrast to sub strings). 
       This is often more efficient and consequently, the use of method \b SearchAndReplace has been 
       replaced in various places of the library. 

- Replaced former class \b %PathMap by a complete rewrite named
    <b>%StringTree</b>
      ([C++] (@ref      aworx::lib::containers::StringTree),
       [C#]  (@ref  cs::aworx::lib::containers::StringTree),
       [Java](@ref com::aworx::lib::containers::StringTree)). While good old \p %PathMap was a
  "nice try" to have a lean and very fast implementation of "string path based trees", the new
  implementation follows a slightly different concept and is much more powerful.

- Various smaller documentation fixes.

- C++ Version
  - Renamed methods \b ThreadLockNR::SetMode and \b ThreadLockNR::Mode to
    \ref aworx::lib::threads::ThreadLockNR::SetSafeness "ThreadLockNR::SetSafeness" and
    \ref aworx::lib::threads::ThreadLockNR::GetSafeness "ThreadLockNR::GetSafeness".
    Changed methods
    \ref aworx::lib::threads::ThreadLock::GetMode              "ThreadLock::GetMode",
    \ref aworx::lib::threads::ThreadLock::GetSafeness          "ThreadLock::GetSafeness" and
    \ref aworx::lib::threads::ThreadLock::DbgCountAcquirements "ThreadLock::DbgCountAcquirements"
    to \c const.
  - Fixed display of test name in gtest version of unittests.
  - Added structs
    \ref aworx::lib::strings::std_Hash   "std_Hash" and
    \ref aworx::lib::strings::std_Equals "std_Equals" to support ALib strings as key types
    for \b std::unordered_map and similar classes.
  - Fixed some analyzer warnings (\b valgrind), for example by adding missing \b ALIB_STRING_DBG_UNTERMINATE 
    statement in method \ref aworx::lib::strings::AString::SetLength "AString::SetLength".



<b>Changes in ALox:</b><br>
- Fixed a bug that occurred in certain situations in respect to \b Scope::Path (in Java \b %Scope.Package)
  leading to wrongly evaluated <em>Log Domains</em>.
  This was fixed by using new \b %ALib class \b %StringTree (mentioned above) to manage
  language-related scope information in \b %ALox.

- Fixed a bug introduced with last revision concerning the output of
  <b>%TextLogger.FmtMsgSuffix</b>
   ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::FmtMsgSuffix),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::FmtMsgSuffix),
    [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::fmtMsgSuffix)) with the last
  line of multi-line log statements.
  
- Fixed a bug introduced with version 1702, which prevented the external use of internal log
  domain (as described in manual section 11.3). 
     
- C++ Version
  - Introduced macros #LOG_CI and #LOX_CI.

\~Comment ####################################################################################### \~
\~Comment #############################       V. 1702 R1     #################################### \~
\~Comment ####################################################################################### \~

## Version 1702, Revision 1, released March 9th, 2017 ##

<b>Project Setup and Tools:</b><br>
- Moved to Doxygen V. 1.8.13
- Moved to Visual Studio 2017

<b>Changes in ALib:</b><br>

- Created sub-namespaces \c util and \c format of namespace
    <b>[com::|cs::]%aworx::lib::strings</b>
      ([C++] (@ref      aworx::lib::strings),
       [C#]  (@ref  cs::aworx::lib::strings),
       [Java](@ref com::aworx::lib::strings)) and sorted some of the string classes into them.

- Renamed method \b [F|f]ormatList of class \b %Formatter to
  <b>%Formatter.[F|f]ormat</b>
    ([C++](@ref      #aworx::lib::strings::format::Formatter::Format),
    [C#]  (@ref  #cs::aworx::lib::strings::format::Formatter::Format),
    [Java](@ref #com::aworx::lib::strings::format::Formatter::format)), hence this method now
  overloads the existing, variadic one. (For unknown reasons, there where ambiguity warnings
  of the compiler observed in former times)

- Added a global formatter object used by \b %ALib internally but may also used by applications.
  For this, methods
  <b>%Formatter.[A|a]cquireDefault</b>
    ([C++](@ref      #aworx::lib::strings::format::Formatter::AcquireDefault),
    [C#]  (@ref  #cs::aworx::lib::strings::format::Formatter::AcquireDefault),
    [Java](@ref #com::aworx::lib::strings::format::Formatter::acquireDefault)) and
  <b>%Formatter.[R|r]eleaseDefault</b>
    ([C++](@ref      #aworx::lib::strings::format::Formatter::ReleaseDefault),
    [C#]  (@ref  #cs::aworx::lib::strings::format::Formatter::ReleaseDefault),
    [Java](@ref #com::aworx::lib::strings::format::Formatter::releaseDefault)) were introduced.

- C++ Version
  - Added implementation of \c std::iterator to class \ref aworx::lib::strings::String "String".
    The iterator satisfies the std library concept of a constant
    [RandomAccessIterator](http://en.cppreference.com/w/cpp/concept/RandomAccessIterator).<br>
    On the same token, added a mutual version to class \ref aworx::lib::strings::AString "AString".
  - Added optional header <b>alib/compatibility/std_vector.hpp</b> which provides
    compatibility of \c std::vector<T> for character types \c T. Compatibility is threefold:
    - Ability to create \c aworx::String objects from \c std::vector<char>.
    - Ability to apply \c std::vector<T> to objects of type \c aworx::AString.
    - Ability create objects of type \c std::vector<char> from objects of type \c aworx::AString
      (or append to existing ones).
  - Added class \ref aworx::lib::strings::util::SimpleText "SimpleText".
  - Added macro \ref ALIB_BOXING_DEFINE_IAPPLY_FOR_APPLICABLE_TYPE.
  - Added simple macros used to implement and check namespace initialization functions
    (\ref ALIB_NAMESPACE_INIT_FLAG, \ref ALIB_NAMESPACE_INIT_DEDUP and \ref ALIB_NAMESPACE_INIT_CHECK).
  - Namespace function \ref aworx::lib::debug::DbgSimpleALibMsg "DbgSimpleALibMsg" now accepts 4 string
    parameters.<br>
    Its plug-in function \ref aworx::lib::debug::ALib_Dbg_Report_Plugin was moved from
    namespace #aworx::lib.
  - Removed public access modifier from field \b Box::data (which was once temporarily set public
    and accidentally remained to be). Struct \b T_Boxing and methods
    \b DefaultBoxing / \b DefaultUnboxing are now friends.
  - Parameter \p message of method
    \ref aworx::lib::lang::Report::DoReport "Report::DoReport" set \c const.
  - Fixed a deadlock in debug version of method
    \ref aworx::lib::ALIB::TerminationCleanUp "ALIB::TerminationCleanUp" in relation to unterminated
    threads.
  - Small makefile change in respect to cotire and trigraphs.
  - Fixed a bug with macro \ref ALIB_FEAT_SINGLETON_MAPPED_VFYBIT. It shared its value with
    \ref ALIB_FEAT_BOXING_FTYPES_VFYBIT, hence the corresponding compilation settings were wrongly
    checked and displayed.
  - Various small fixes to avoid Valgrind analyzer warnings.


- Java Version:
  - Various corrections of member and method names to start with a lowercase letter which had
    been introduced in the last release. Among them:
    \ref com::aworx::lib::strings::format::Formatter::next        "Formatter::next",
    \ref com::aworx::lib::strings::format::Formatter::format      "Formatter::format",
    \ref com::aworx::lib::strings::format::FormatterStdImpl::alternativeNumberFormat   "FormatterStdImpl::alternativeNumberFormat",
    \ref com::aworx::lib::strings::format::FormatterStdImpl::dateTimeFormat            "FormatterStdImpl::dateTimeFormat",
    \ref com::aworx::lib::strings::format::FormatterStdImpl::writeALibErrorReports     "FormatterStdImpl::writeALibErrorReports",
    \ref com::aworx::lib::strings::format::FormatterStdImpl::writeErrorsToTargetString "FormatterStdImpl::writeErrorsToTargetString",


<b>Changes in ALox:</b><br>
- <b>Recursive Log Calls</b><br>
  ALox now officially supports <b>recursive log calls</b>. Recursion occurs when log statements are
  executed during the evaluation of the logables of an already invoked log statement.
  When logging the contents of complex objects, such recursive calls might quite
  quickly appear.<br>
  This release provides internal changes in classes
  <b>%Lox</b>
    ([C++](@ref      #aworx::lox::Lox),
    [C#]  (@ref  #cs::aworx::lox::Lox),
    [Java](@ref #com::aworx::lox::Lox)),
  <b>%TextLogger</b>
    ([C++](@ref      #aworx::lox::core::textlogger::TextLogger),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
    [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) and
  <b>%StandardConverter</b>
    ([C++](@ref      #aworx::lox::core::textlogger::StandardConverter),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::StandardConverter),
    [Java](@ref #com::aworx::lox::core::textlogger::StandardConverter)) to support
  recursive logging with all built-in textual \e Loggers provided by \b ALox.

- Replaced integer type of field
  <b>%AnsiLogger.UseLightColors</b>
    ([C++](@ref      #aworx::lox::loggers::AnsiLogger::UseLightColors),
    [C#]  (@ref  #cs::aworx::lox::loggers::AnsiLogger::UseLightColors),
    [Java](@ref #com::aworx::lox::loggers::AnsiLogger::useLightColors)) by new nested enumeration
  <b>%AnsiLogger.LightColorUsage</b>
    ([C++](@ref      #aworx::lox::loggers::AnsiLogger::LightColorUsage),
    [C#]  (@ref  #cs::aworx::lox::loggers::AnsiLogger::LightColorUsage),
    [Java](@ref #com::aworx::lox::loggers::AnsiLogger::LightColorUsage))
  Furthermore, the default values for the color codes for the log verbosity have been changed
  from native ANSI codes to codes of class
  <b>%ESC</b>
    ([C++](@ref      #aworx::lox::ESC),
    [C#]  (@ref  #cs::aworx::lox::ESC),
    [Java](@ref #com::aworx::lox::ESC)). This way, changes of field <b>%AnsiLogger.UseLightColors</b>
  are now reflected also if performed after registration of the logger with a \b %Lox.

  The same changes have been performed in class
  <b>%WindowsConsoleLogger</b>
    ([C++](@ref      #aworx::lox::loggers::WindowsConsoleLogger),
    [C#]  (@ref  #cs::aworx::lox::loggers::WindowsConsoleLogger)).


- Generalized concept of having a configurable "end of log statement" format string, which
  previously was implemented with class
  <b>%AnsiLogger</b>
    ([C++](@ref      #aworx::lox::loggers::AnsiLogger),
    [C#]  (@ref  #cs::aworx::lox::loggers::AnsiLogger),
    [Java](@ref #com::aworx::lox::loggers::AnsiLogger)) only. For this, field <b>%AnsiLogger::MsgSuffix</b>
  was moved to parent class
  <b>%TextLogger.FmtMsgSuffix</b>
   ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::FmtMsgSuffix),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::FmtMsgSuffix),
    [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::fmtMsgSuffix)). This way, derived
  loggers do not need to care explicitly anymore, as \b %TextLogger will append the field
  to the log buffer correctly prior to invoking abstract method
  <b>%TextLogger.logText</b>
   ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger::logText),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger::logText),
    [Java](@ref #com::aworx::lox::core::textlogger::TextLogger::logText)).<br>
  The new field is stored in configuration variable #ALOX_LOGGERNAME_FORMAT.
- Fixed method
  <b>%Lox.GetState</b>
    ([C++](@ref      #aworx::lox::Lox::GetState),
    [C#]  (@ref  #cs::aworx::lox::Lox::GetState),
    [Java](@ref #com::aworx::lox::Lox::getState)) in respect to escaping non-printable characters
  in prefix logable strings (e.g. ESC color codes).


- C++ Version:
  - Optimization of ALox log statement macros.
  - Fixed release logging macro \ref Lox_GetLogger.
  - Minor fixes in respect to preallocated string sizes.


\~Comment ####################################################################################### \~
\~Comment #############################       V. 1702        #################################### \~
\~Comment ####################################################################################### \~


## Version 1702, Revision 0, released February 6th, 2017 ##

<b>A General Note:</b><br>
This is once more a major update of \b %ALox. And - once more - we hope that with this update
the foundation is now led to provide a stable version that will not undergo major interface changes
in the future. The good news is: For existing logging statements, the interface is still
valid and code does not need to be changed. The other good news is that the interface dramatically
improved and - if a user wants - he/she may convert existing log statements to this new interface.

The change lies in the fact that prior versions supported \b one \e "logable" (aka one arbitrary object)
to log. The new interface allows an arbitrary amount of \e logables to log.
In respect to textual logging (the normal use case), this means that in prior versions the text
to be logged needed to be assembled first and then passed to \b %ALox. Now, this assembling is
not necessary any more: All objects are concatenated inside the logger, of-course supporting now
nice format strings that tell the logger how to do this.<br>
This explains, why the interface remained compatible to the old version: The logger of-course still
accepts such single pre-assembled strings to log. However, the benefits of passing the components
of the string using a list of arguments are:

- String concatenation is performed only if needed (if a log is executed in respect to its \e Verbosity)
- Less code clutter, better readable log statements
- better Readable
- Easier to use

Now, people may wonder why this feature comes only so late!? The answer is: While in languages
\c C# and \c Java such interface is quite easy to implement (due to the approach
"everything is an object or gets automatically boxed into an object" of these languages) in \c C++
it is not: How can you pass arbitrary amounts of arbitrary objects and then process them and convert
them to strings in C++? Our answer to this is: <b>ALib Boxing</b>!

In short, <b>ALib Boxing</b> allows to create methods that accept any type of argument as parameter,
without the need of type conversion, wrapper classes, etc. Furthermore <b>ALib Boxing</b> allows to
add virtual interfaces to C++ types, independent from the original implementation of the type itself.
This means that any 3rd-party type can be adopted to support "boxing" and to provide its own
virtual interface implementations. To reach this goal, quite a bit of
[template meta programming](https://en.wikipedia.org/wiki/Template_metaprogramming)
was used and some other tricks with C++ type information facilities.

Therefore, the big effort for this release affected two areas:
- Implement C++ Boxing in underlying library \b %ALib.
- Implement formatters (we support Python style and Java style format syntax today) for
  all three languages.

We should not forget to mention that the impact on binary logging (logging of non textual objects
using custom loggers) is huge: Custom loggers in general are not compatible to the new version.
The good news is: <b>ALib Boxing</b> provides a whole new level of possibilities and ease of
use to binary loggers in general.

<b>License:</b><br>
The license was changed from "MIT License" to "Boost Software License". The Boost License is
more liberal in respect to distributions in binary format. No copyright notice has to be given
when ALib/ALox code is distributed exclusively within binary files (compiled code).

<b>Pre-configured Projects and Tools:</b><br>
- Support for
  [JetBrains CLion](https://www.jetbrains.com/clion/),
  [JetBrains IntelliJ](https://www.jetbrains.com/idea/) and
  [JetBrains Rider](https://www.jetbrains.com/rider/) added.<br>
  Special thanks goes to \e JetBrains people for <b>granting a free license</b> to support \b %ALox as
  an open source project!<br>
  ALox logging and marvellous (!) JetBrains IDEs go together very well: On all platforms and languages,
  the log output will be nicely formatted with "clickable" links back into the source code!

  Information on how to use ALox with JetBrains products is found in the setup manual pages.

- Moved to Doxygen V. 1.8.12, with some impact on ALox homepage design.

- C++ Version:
  - All code is now fully compatible with [clang](http://clang.llvm.org/) compiler.
    \b %ALox/ALib is using its maximum possible warning level for the code. The impact was huge! For example all "old style casts" have been
    removed from the code.
    Only a few single warnings need to be disabled. But those are anyhow more for analytics
    but for day-to-day use. So, we are optimistic that ALib/ALox compiles in any setting without
    warnings!
  - ALib and ALox code is now compiling under <b>Mac OSX</b>. Development of platform specific
    code sections has been made using CMake and [JetBrains CLion](https://www.jetbrains.com/clion/).
    No XCode project has been set up, yet. Help for future Mac OS support is welcome!
  - Code is now compiling and tested on 32-bit GNU/Linux OS.
  - Added [Pretty Printers for GNU Debugger](tools.html#tools_debug_helpers_gdb). However, this is not completely
    satisfying with all IDEs. The best support for pretty printing of ALox/ALib classes is still
    with IDE QTCreator.
  - Renamed CMake files \e ALib_Base.cmake and \e ALox_Base.cmake to \b ALib.cmake and \b ALox.cmake.
  - Various ALib/ALox CMake variables which had been "hardcoded" have been turned into CMake cache variables.
  - Renamed macros \b ALIB_DLL_EXPORTS and \b ALOX_DLL_EXPORTS to \ref ALIB_API_IS_DLL and \ref ALOX_API_IS_DLL.
    On the same token, added macros \b ALIB_API_NO_DLL and \b ALOX_API_NO_DLL.


<p>
<b>Changes in ALib:</b><br>

- In an effort to modularize <b>ALib for C++</b>, with the goal to make portions of ALib available for use
  without the need of complete \b %ALib, some major refactoring had to be performed. Among many, many small
  things, the more important of those are:
  - new namespace/package
    <b>[com::|cs::]%aworx::lib::lang</b>
      ([C++] (@ref      aworx::lib::lang),
       [C#]  (@ref  cs::aworx::lib::lang),
       [Java](@ref com::aworx::lib::lang))
  - Removal of former namespace <b>[com::|cs::] %aworx::lib::enums</b>. Enums were moved to \b lang
    namespace
  - Moving of various types to different namespaces for supporting modularization

- Complete overhaul of class
  <b>%NumberFormat</b>
    ([C++](@ref      #aworx::lib::strings::NumberFormat),
    [C#]  (@ref  #cs::aworx::lib::strings::NumberFormat),
    [Java](@ref #com::aworx::lib::strings::NumberFormat)) with greatly extended interface
  and options for writing and parsing integer and floating point numbers in various formats
  and fashions.

- New class
  <b>%Formatter</b>
    ([C++](@ref      #aworx::lib::strings::Formatter),
    [C#]  (@ref  #cs::aworx::lib::strings::Formatter),
    [Java](@ref #com::aworx::lib::strings::Formatter)) to format textual strings using a format
  definition and arbitrary typed parameters. (In C++, this uses new <b>ALib %Boxing</b> module.)
  Supported formats are:
  - "Python Style": Similar and mostly compatible to the (modern version of) formatting syntax of Python string class.
  - "Java Style":  Similar and mostly compatible to the formatting syntax of the Java formatting classes.

- New class <b>%AutoSizes</b>
  ([C++](@ref      #aworx::lib::strings::AutoSizes),
  [C#]  (@ref  #cs::aworx::lib::strings::AutoSizes),
  [Java](@ref #com::aworx::lib::strings::AutoSizes)) in strings namespace. In fact, this class
  was moved from the \b %ALox project to \b %ALib as it used in the new formatter classes.

- Class <b>%Variable</b>
  ([C++](@ref      #aworx::lib::config::Variable),
  [C#]  (@ref  #cs::aworx::lib::config::Variable),
  [Java](@ref #com::aworx::lib::config::Variable)): Renamed various methods \b 'AddXyz' to
  overloaded method \b 'Add'.
  In C++ version, a template method fetches types applicable to class \b %AString.

- Class <b>%XTernalizer</b>
  ([C++](@ref      #aworx::lib::config::XTernalizer),
  [C#]  (@ref  #cs::aworx::lib::config::XTernalizer),
  [Java](@ref #com::aworx::lib::config::XTernalizer)) learned further escapes codes to externalize
  (\c \\a, \c \\b, \c \\v, \c \\f, \c \\e).

- Added the following string methods:
  - <b>%CString::[I|i]ndexOfFirstDifference</b>
    ([C++](@ref      #aworx::lib::strings::CString::IndexOfFirstDifference),
    [C#]  (@ref  #cs::aworx::lib::strings::CString::IndexOfFirstDifference),
    [Java](@ref #com::aworx::lib::strings::CString::indexOfFirstDifference)),
  - <b>%Substring::[I|i]ndexOfFirstDifference</b>
    ([C++](@ref      #aworx::lib::strings::String::IndexOfFirstDifference),
    [C#]  (@ref  #cs::aworx::lib::strings::Substring::IndexOfFirstDifference),
    [Java](@ref #com::aworx::lib::strings::Substring::indexOfFirstDifference)),
  - <b>%Substring::[C|c]onsumePartOf</b>
    ([C++](@ref      #aworx::lib::strings::Substring::ConsumePartOf),
    [C#]  (@ref  #cs::aworx::lib::strings::Substring::ConsumePartOf),
    [Java](@ref #com::aworx::lib::strings::Substring::consumePartOf)),

  - <b>%AString::[E|e]scape</b>
    ([C#]  (@ref #cs::aworx::lib::strings::AString::Escape),
    [Java](@ref #com::aworx::lib::strings::AString::escape)) (resp.
    \ref aworx::lib::strings::Format::Escape "Format::Escape" in C++).

- Class <b>Report::Message</b>
    ([C++](@ref      #aworx::lib::lang::Report::Message),
    [C#]  (@ref  #cs::aworx::lib::lang::Report::Message),
    [Java](@ref #com::aworx::lib::lang::Report::Message)) now represents a list of arbitrary
  message objects instead just one string.
  On the same token, class \b %Report accepts variadic arguments.<br>
  In C# and Java, debug warning, error and assertion methods have been moved from class \b %ALib to new class
  <b>%ALIB_DBG</b>
    ([C#]  (@ref  #cs::aworx::lib::ALIB_DBG),
     [Java](@ref #com::aworx::lib::ALIB_DBG)).
  This was necessary due to the inability of
  [Proguard](https://www.guardsquare.com/en/proguard) to remove selected methods with variadic arguments.

- Changes specific to ALib for C++
  - New ALib for C++ namespace \b worx::lib::boxing including a
    \ref aworx::lib::boxing "detailed documentation" of more than 35+ pages!

  - Added types
    \ref aworx::lib::lang::integer  "integer" and
    \ref aworx::lib::lang::uinteger "uinteger" to represent platform dependent 'natural sized' integer values.<br>
    The length of ALib strings now uses this type and hence is now 63-bit on typical 64-bit platforms
    and compilers.

  - Added types
    \ref aworx::lib::lang::intGap_t   "intGap_t"
    \ref aworx::lib::lang::uintGap_t "uintGap_t" which are used to implement complete template specializations
    and methods overloads in a compiler-independent way.

  - Added method \ref  #aworx::lib::strings::String::CopyTo "String::CopyTo" which is similar
    corresponding Java (\b String.getChars) and C# (\b String.CopyTo) built-in methods.

  - Moved partly specialized template functions into partly specialized structs:
    - \ref aworx::lib::strings::T_String (was \b %ToStringDefined  and \b %ToString before)
    - \ref aworx::lib::strings::T_Apply (was \b %IsApplicable and \b %ApplyTo before)

    This is a much cleaner approach and allows templated specializations of the templated types
    (which is not allowed with template functions).

    In addition the template type names of \b %T_Apply are now no longer requested to be
    <b>const MyType &</b> but solely <b>MyType</b> instead. Furthermore, the default implementation
    of method \ref aworx::lib::strings::T_Apply::Apply "T_Apply::Apply", which should never be
    called, has now a more strict compile-time detection of the application of unsupported types.

  - Added support for C++ fundamental types \c char16_t and \c char32_t throughout classes of namespace
    #aworx::lib::strings "ALib Strings"

  - Changed various preprocessor macros to define a value of \c 0 or \c 1 and instead of testing
    definition of the macros, now testing for their value.

  - Added preprocessor macros
    - \ref ALIB_OVERRIDE
    - \ref ALIB_FALLTHROUGH
    - \ref ALIB_WARNINGS_RESTORE
    - \ref ALIB_WARNINGS_START_TMP
    - \ref ALIB_WARNINGS_UNINITIALIZED_OFF
    - \ref ALIB_WARNINGS_MACRO_NOT_USED_OFF
    - \ref ALIB_WARNINGS_OVERLOAD_VIRTUAL_OFF

  - Changed letter case treatment of environment variables. See documentation of namespace function
    \ref aworx::lib::system::GetEnvironmentVariable.

  - Renamed variable \c ALIB::DebuggerProcessName to
    \ref aworx::lib::ALIB::DebuggerProcessNames "ALIB::DebuggerProcessNames"  and extended its
    functionality as documented.

  - Revised internals of class \ref aworx::lib::time::Ticks "Ticks" to provide more consistant
    results in respect to conversion between \b %Ticks values and real world clock times.
    See new namespace function \ref aworx::lib::time::SyncClock for details.

<p>
<b>Changes in ALox:</b><br>

- Based on the the new formatter classes of \b %ALib and the new feature of "boxing" in
  <b>%ALib for C++</b>, the interface of ALox changed quite dramatically: Instead of the provision
  of one object to log, which in cases of text-logging needed to be a string, now, an arbitrary
  amount of arbitrary objects can be passed to the log methods. In the case a textual logger is
  in place, such will try to detect format strings and their arguments in the list of objects to
  log and assemble the textual message from those.<br>
  Consequently, classes, fields and methods which provided an \b AString singleton to be used as a
  reusable log buffer have been removed in C# and Java versions.

  As \b %ALib provides Python style and Java style formatting syntax, this is now supported by
  \b %ALox as well.


- Most efforts of detecting the execution environment and setting appropriate loggers, output
  format strings, etc. - with the goal of making log files clickable -  have been removed.

  We understood that it is not easily possible to create and then maintain the code for the
  different IDEs, operating systems, implementation languages, user settings, and so forth!

  Instead, we decided to document what is necessary and have the user make his fine-tuned settings
  from this documentation.

- Added configuration variable \ref ALOX_LOGGERNAME_REPLACEMENTS.

- Replaced variable \b %CONSOLE_HAS_LIGHT_BACKGROUND with \ref ALOX_CONSOLE_LIGHT_COLORS.
- Removed color fields in
- Class <b>%AnsiLogger</b>
  ([C++](@ref      #aworx::lox::loggers::AnsiLogger),
  [C#]  (@ref  #cs::aworx::lox::loggers::AnsiLogger),
  [Java](@ref #com::aworx::lox::loggers::AnsiLogger)) that indicated the \e %Verbosity.
  This is now done with existing fields in class
  Class <b>%MetaInfo</b>
  ([C++](@ref      #aworx::lox::core::textlogger::MetaInfo),
  [C#]  (@ref  #cs::aworx::lox::core::textlogger::MetaInfo),
  [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo)) and by positioning placeholder "%V" at
  the end of the meta info format string (by default).
- Removed class \b %LogData. Instead, in C++ Version now objects of new \b %ALib class \b %Box are
  stored and received. In Java/C# class \c Object is used as a replacement.

- Domain names now have to be upper case letters (this was just a recommendation before). Introducing this
  restriction allowed an even better auto-detection of logging parameters that constitute a domain
  specifier. Consequently, field <b>Lox.DomainSensitivity</b> was removed.

- Various preprocessor macros of the C++ version now define a value of \c 0 or \c 1 and instead of testing
  definition of the macros, code is now testing for their value. Among the macros changed are
  \ref ALOX_DBG_LOG, \ref ALOX_DBG_LOG_CI, \ref ALOX_REL_LOG and \ref ALOX_REL_LOG_CI



\~Comment ####################################################################################### \~
\~Comment #############################       V. 1607        #################################### \~
\~Comment ####################################################################################### \~
## Version 1607, Revision 0, released July 23rd, 2016 ##

<b>Changes in Preconfigured Projects:</b><br>
- Eclipse Neon (4.6) support for ALox for Java. The project folder
  was renamed from

        ./build/ide.java.eclipse.luna

  to

        ./build/ide.java.eclipse

  (The Eclipse versions Luna, Mars and Neon should be compatible with the same
  project files.)

  When doing this, all compiler warnings have been switched to be even more strict
  than before. As a consequence several \c \@SuppressWarnings tags had to be added
  to the code. Make sure to have your IDE setup to not warn on unnecessary
  \c \@SuppressWarnings tags in the case your preference on warnings are less
  strict.

<b>Changes in ALib:</b>
- Various changes and extensions in namespace <b>[com::|cs::] %aworx::lib::config</b>.
  For a complete reference of the new version see namespace
  <b>documentation</b>.
    ([C++] (@ref      aworx::lib::config),
     [C#]  (@ref  cs::aworx::lib::config),
     [Java](@ref com::aworx::lib::config)). Some highlights are:

  - Extracted new class
    <b>InMemoryPlugin</b>
      ([C++](@ref      #aworx::lib::config::InMemoryPlugin),
      [C#]  (@ref  #cs::aworx::lib::config::InMemoryPlugin),
      [Java](@ref #com::aworx::lib::config::InMemoryPlugin)) from class
    <b>IniFile</b>
      ([C++](@ref      #aworx::lib::config::IniFile),
      [C#]  (@ref  #cs::aworx::lib::config::IniFile),
      [Java](@ref #com::aworx::lib::config::IniFile)) which now is a descendent.
    \b %InMemoryPlugin is a configuration variable container which exclusively 'lives' in memory.
  - Added two instances of new class
    <b>InMemoryPlugin</b>
      ([C++](@ref      #aworx::lib::config::InMemoryPlugin),
      [C#]  (@ref  #cs::aworx::lib::config::InMemoryPlugin),
      [Java](@ref #com::aworx::lib::config::InMemoryPlugin)) to class
    <b>Configuration</b>
      ([C++](@ref      #aworx::lib::config::Configuration),
      [C#]  (@ref  #cs::aworx::lib::config::Configuration),
      [Java](@ref #com::aworx::lib::config::Configuration)) with new plug-in priority constants
    <b>%PrioDefault</b>
    ([C++] (@ref      #aworx::lib::config::Configuration::PrioDefault),
     [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioDefault),
     [Java](@ref #com::aworx::lib::config::Configuration::PRIO_DEFAULT)) and
    <b>%PrioProtected</b>
    ([C++] (@ref      #aworx::lib::config::Configuration::PrioProtected),
     [C#]  (@ref  #cs::aworx::lib::config::Configuration::PrioProtected),
     [Java](@ref #com::aworx::lib::config::Configuration::PRIO_PROTECTED)) allowing to easily set
    default values for external configuration and on the other end to protect variables from
    external changes.
  - <b>Variable substitution</b>: It is now possible to substitute external variables within other
    external variables. This brings a lot of general flexibility to any feature using external
    configuration (as seen in ALox changes below).
  - New class
    <b>%Variable</b>
      ([C++](@ref      #aworx::lib::config::Variable),
      [C#]  (@ref  #cs::aworx::lib::config::Variable),
      [Java](@ref #com::aworx::lib::config::Variable)) provides a much more convenient interface
      to loading and storing configuration variables as well to accessing their values or lists of values (parsing
      several values is now done already here, respectively in the plug-ins and not in the user code).
  - New class
    <b>%VariableDefinition</b>
      ([C++](@ref      #aworx::lib::config::VariableDefinition),
      [C#]  (@ref  #cs::aworx::lib::config::VariableDefinition),
      [Java](@ref #com::aworx::lib::config::VariableDefinition)) allows to locate declarations of an applications' variables,
      including their category, name, comments, default value and default value delimiter in one place.

  - Field
    <b>%IniFile.AutoSave</b>
      ([C++](@ref      #aworx::lib::config::IniFile::AutoSave),
      [C#]  (@ref  #cs::aworx::lib::config::IniFile::AutoSave),
      [Java](@ref #com::aworx::lib::config::IniFile::autoSave)) now defaults to \b false.

- Changed signature of method
  <b>%ALIB.Init</b>
    ([C++](@ref      #aworx::lib::ALIB::Init),
    [C#]  (@ref  #cs::aworx::lib::ALIB::Init),
    [Java](@ref #com::aworx::lib::ALIB::init)) and various methods in class
  <b>%Configuration</b>
    ([C++](@ref      #aworx::lib::config::Configuration),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration),
    [Java](@ref #com::aworx::lib::config::Configuration)) to simplify its use.
  All types of configuration plug-ins are now created by default. Should this not be wanted, they can
  easily be removed right after the initialization call.

- Changed return value of methods
  <b>%Substring.Trim</b>
    ([C++](@ref      #aworx::lib::strings::Substring::Trim),
    [C#]  (@ref  #cs::aworx::lib::strings::Substring::Trim),
    [Java](@ref #com::aworx::lib::strings::Substring::trim)),
  <b>%Substring.TrimStart</b>
    ([C++](@ref      #aworx::lib::strings::Substring::TrimStart),
    [C#]  (@ref  #cs::aworx::lib::strings::Substring::TrimStart),
    [Java](@ref #com::aworx::lib::strings::Substring::trimStart)) and
  <b>%Substring.TrimEnd</b>
    ([C++](@ref      #aworx::lib::strings::Substring::TrimEnd),
    [C#]  (@ref  #cs::aworx::lib::strings::Substring::TrimEnd),
    [Java](@ref #com::aworx::lib::strings::Substring::trimEnd)) to return \c this instead of \b %Substring.IsEmpty().
  This behavior just fits better to the majority of use cases.

- Changed return value of method
  <b>%AString.TrimAt</b>
    ([C++](@ref      #aworx::lib::strings::AString::TrimAt),
    [C#]  (@ref  #cs::aworx::lib::strings::AString::TrimAt),
    [Java](@ref #com::aworx::lib::strings::AString::trimAt)) to return the new index of the first untrimmed
    character. On the same token fine-tuned methods \b %TrimStart and \b %TrimEnd in respect of performance.

- Added optional parameter \p sensitivity to character and string version of  'consume'-methods of class
  <b>%Substring</b>
    ([C++](@ref      #aworx::lib::strings::Substring),
    [C#]  (@ref  #cs::aworx::lib::strings::Substring),
    [Java](@ref #com::aworx::lib::strings::Substring)),

- Class \b %AString now always allocates at least 16 bytes when first characters are added.

- Java Version: Fixed method \ref com::aworx::lib::strings::AString::_(Object) "AString._(Object)" which
  unecessarily created temporary strings for various types of parameter \p object.

- Further small alignments of unit testing class \b %AWorxUnitTesting of the three
  languages currently supported.


<b>Changes in ALox:</b>
- Changed signature of method
  <b>%ALox.Init</b>
    ([C++](@ref      #aworx::lox::ALox::Init),
    [C#]  (@ref  #cs::aworx::lox::ALox::Init),
    [Java](@ref #com::aworx::lox::ALox::init))  (see \b %ALIB::Init above).

- Renamed method \b Lox.LogConfig to
  <b>%Lox.State</b>
    ([C++](@ref      #aworx::lox::Lox::State),
    [C#]  (@ref  #cs::aworx::lox::Lox::State),
    [Java](@ref #com::aworx::lox::Lox::state)) and added optional parameter \p flags
  which allows to select only a subset of all state information. On the same token, separated the
  collection of the state data into public method
  <b>%Lox.GetState</b>
    ([C++](@ref      #aworx::lox::Lox::GetState),
    [C#]  (@ref  #cs::aworx::lox::Lox::GetState),
    [Java](@ref #com::aworx::lox::Lox::getState)).

- The new features introduced in ALib namespace
  <b>[com::|cs::] %aworx::lib::config</b>.
    ([C++] (@ref      aworx::lib::config),
     [C#]  (@ref  cs::aworx::lib::config),
     [Java](@ref com::aworx::lib::config)) in combination with the already
  existing and the newly introduced [configuration variables](group__GrpALoxConfigVars.html),
  let new flexiblity and features emerge for ALox.
  Two new manual chapters address the possibilities:
  \ref man_external_configuration and
  \ref man_external_verbosity_configuration_variable_writeback.

- Introduced configuration variable [ALOX_LOXNAME_DUMP_STATE_ON_EXIT](group__GrpALoxConfigVars.html)
  which enables to dump the state of a \b %Lox when removing a \e %Logger.

- Introduced new option \p writeback for configuration variable
  [ALOX_LOXNAME_LOGGERNAME_VERBOSITY](group__GrpALoxConfigVars.html)
  which allows to write the \e Verbosity values of all <em>Log Domains</em>
  of a \e %Logger back to the configuration. The writing can be performed
  back to the \b ALOX_LOXNAME_LOGGERNAME_VERBOSITY variable
  itself or alternatively into a user-defined variable.
  (In the latter case, this variable can then be a substitute when configuring
  this or a different logger at the next run.)

- Introduced configuration variables
  - [ALOX_LOGGERNAME_FORMAT_DATE_TIME](group__GrpALoxConfigVars.html),
  - [ALOX_LOGGERNAME_FORMAT_TIME_DIFF](group__GrpALoxConfigVars.html) and
  - [ALOX_LOGGERNAME_FORMAT_MULTILINE](group__GrpALoxConfigVars.html),
  which enable to manipulate various formatting options of standard text loggers.

- C++/C# Versions:
  - Capitalized names of fields
    <b>Logger.Name</b>
      ([C++] (@ref      #aworx::lox::core::Logger::Name),
       [C#]  (@ref  #cs::aworx::lox::core::Logger::Name)) and
    <b>Logger.TypeName</b>
      ([C++] (@ref      #aworx::lox::core::Logger::TypeName),
       [C#]  (@ref  #cs::aworx::lox::core::Logger::TypeName)).

  - Changed signature of methods
    <b>%Lox.SetSourcePathTrimRule</b>
      ([C++](@ref      #aworx::lox::Lox::SetSourcePathTrimRule),
      [C#]  (@ref  #cs::aworx::lox::Lox::SetSourcePathTrimRule))) and
    <b>%Lox.ClearSourcePathTrimRules</b>
      ([C++](@ref      #aworx::lox::Lox::ClearSourcePathTrimRules),
      [C#]  (@ref  #cs::aworx::lox::Lox::ClearSourcePathTrimRules)) by introducing new enum
    <b>%Reach</b>
      ([C++] (@ref      #aworx::lib::enums::Reach),
       [C#]  (@ref  #cs::aworx::lib::enums::Reach),
       [JAVA](@ref #com::aworx::lib::enums::Reach)) and slightly changeing order of parameters.
      (Functionality and format of external configuration variable remains the same.)

- Method
  <b>%Log.RemoveALibReportWriter</b>
    ([C++](@ref      #aworx::lox::Log::RemoveALibReportWriter),
    [C#]  (@ref  #cs::aworx::lox::Log::RemoveALibReportWriter),
    [Java](@ref #com::aworx::lox::Log::removeALibReportWriter)) stopped complaining if
  invoked without prior invocation of
  <b>%Log.AddALibReportWriter</b>
    ([C++](@ref      #aworx::lox::Log::AddALibReportWriter),
    [C#]  (@ref  #cs::aworx::lox::Log::AddALibReportWriter),
    [Java](@ref #com::aworx::lox::Log::addALibReportWriter)).
  Furthermore,  C++ version of class
  <b>%ALoxReportWriter</b>
    ([C++](@ref      #aworx::lox::ALoxReportWriter),
    [C#]  (@ref  #cs::aworx::lox::ALoxReportWriter),
    [Java](@ref #com::aworx::lox::ALoxReportWriter)) now uses the right
  internal domain path for reporting about its existence. The other language
  version do the same report when constructing an object of this class, now.

- Java version: Stack trace and thread information is now retrieved lazily. This speeds up
  log lines which do not use such information drastically.

- Internal logging, when overwriting a <em>Scope Domain</em> with the same value as previously set, are now
  attributed \e Verbose instead \e Warning.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1604  Revision 2 #################################### \~
\~Comment ####################################################################################### \~
## Version 1604, Revision 2, released June 20th, 2016 ##

<b>Changes in ALib:</b>
- Added alternatives "t" and "y" to default setting of field
  <b>Config.TrueValues</b>
    ([C++](@ref      #aworx::lib::config::Configuration::TrueValues),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration::TrueValues),
    [Java](@ref #com::aworx::lib::config::Configuration::trueValues)).
- Renamed enumeration property \b %Propagation.None to \b %Propagation.Omit due to possible name
  clashes in C++ (e.g. when working with prehistoric headers like "X11/Xlib.h").

- Added method
  <b>Ticks.HasElapsed</b>
    ([C++](@ref      #aworx::lib::time::Ticks::HasElapsed),
    [C#]  (@ref  #cs::aworx::lib::time::Ticks::HasElapsed),
    [Java](@ref #com::aworx::lib::time::Ticks::hasElapsed)).

- Added method
  <b>ALIB.Sleep</b>
    ([C++](@ref      #aworx::lib::ALIB::Sleep( const Ticks& )),
    [C#]  (@ref  #cs::aworx::lib::ALIB::Sleep( Ticks )),
    [Java](@ref #com::aworx::lib::ALIB::sleep( Ticks ))).


- C++ Version:
    - Added QT support in respect to compatibility of ALib strings and the QT class library.<br>
      See <b>ApplyTo<const QString&></b>
      for more information.<br>
      On the same token, added option \b -fPIC to the compile flags "ALib_Base_cmake" to be
      compatible with QT compilations. This should be revised in the future (compilation flags
      and support of other compiler suites are on the to-do list anyhow).
    - Compilation flag verification fixed. When flag of library and user compilation
      unit were not matching, the output lists about the non-matching flags was wrong.
    - Fixed move constructor of class \b %AString.
    - Fixed method \b %AString::ApplyTo for type \b Format::Tab which occurred when parameter
      \p reference was negative and the last newline character sequence was at the end of the string.
    - Added default value to parameter \p regionLength of constructor
      <b>String::String(const String&, int, int)</b>.
    - Added parameter \b trim defaulting to \c true to method
      <b>Substring::Split(int, Substring&, int, bool)</b>.
    - Added a nullptr check to function <c>std::ostream& operator<<( std::ostream& stream, const String& string )</c>
    - Renamed \b %PathSeparator to
      \ref aworx::lib::system::DirectorySeparator "DirectorySeparator".
    - Windows OS version of class \b %ProcessInfo now correctly sets the length of field \b CmdLine.
    - Method <b>System::GetVariable</b> under Windows OS
      now correctly returns \c true, when the variable was found.
    - Updated external CMake module [cotire](https://github.com/sakra/cotire/) to recent version
      (precompiled header support).
    - Added QT Creator debug helper for class
      \ref aworx::lib::time::Ticks "Ticks".
    - Fixed \ref aworx::lib::system::ProcessInfo "ProcessInfo" in respect to rightfully detecting
      the path of the executable of the process. This is now also used by
      \ref aworx::lib::system::Directory::Change "Directory::Change(SpecialFolder::Module)".
    - Added new enumerations \c Temp and \c VarTemp to enum class
      \ref aworx::lib::system::Directory::SpecialFolder "SpecialFolder".


<b>Changes in ALox:</b>

- It is now possible to control the verbosity of the root domain from within external
  configuration (bug fix).
- Fixed a bug in default domain evaluation of \b %Scope.Method and \b %Scope.Filename
  (in Java \b %Scope.CLASS).
- The internal domain tree can now be addressed using various
  [configuration variables](group__GrpALoxConfigVars.html)
  using string \b "INTERNAL_DOMAINS".
- New variable
  [ALOX_LOXNAME_PREFIXES](group__GrpALoxConfigVars.html)
  which allows to set per domain prefixes using external configuration data.
- Elapsed time values of standard \e %Loggers of type \b %TextLogger are now shortened by default
  in meta information display to fit to the size that is probably needed.
  Using configuration variable [ALOX_LOGGERNAME_MAX_ELAPSED_TIME](group__GrpALoxConfigVars.html)
  the information about the maximum length of a session (minutes, hours, days) is automatically
  stored  and retrieved with the next session (if e.g. an INI file is attached to the
  configuration system).
- Configuration variable  [ALOX_LOGGERNAME_FORMAT](group__GrpALoxConfigVars.html) was extended
  to support quoted format strings (i.e. to avoid trimming of spaces in the format string).
  In addition, fields
   - <b>%MetaInfo.VerbosityError</b>
     ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityError),
      [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityError),
      [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityError))
   - <b>%MetaInfo.VerbosityWarning</b>
     ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityWarning),
      [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityWarning),
      [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityWarning))
   - <b>%MetaInfo.VerbosityInfo</b>
     ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityInfo),
      [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityInfo),
      [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityInfo))
   - <b>%MetaInfo.VerbosityVerbose</b>
     ([C++]      (@ref #aworx::lox::core::textlogger::MetaInfo.VerbosityVerbose),
      [C#]   (@ref #cs::aworx::lox::core::textlogger::MetaInfo.VerbosityVerbose),
      [Java](@ref #com::aworx::lox::core::textlogger::MetaInfo.verbosityVerbose)) can be set by appending
   values for those, separated by commas.


- Fixed the text file logger sample.
- C++ and C# Version:
    - Fixed log configuration output in respect to source path trim rules. Labels "Global" and
      "Local" are now shown correctly.
    - Added optional parameter \p trimReplacement to method
        <b>Lox.SetSourcePathTrimRule</b>
            ([C++](@ref      #aworx::lox::Lox::SetSourcePathTrimRule),
            [C#]  (@ref  #cs::aworx::lox::Lox::SetSourcePathTrimRule)))
      as well as to the corresponding configuration variables
      [ALOX_GLOBAL_SOURCE_PATH_TRIM_RULES](group__GrpALoxConfigVars.html) and
      [ALOX_LOXNAME_SOURCE_PATH_TRIM_RULES](group__GrpALoxConfigVars.html).
    - Added optional parameter \p priority to method
        <b>Lox.SetSourcePathTrimRule</b>
            ([C++](@ref      #aworx::lox::Lox::SetSourcePathTrimRule),
            [C#]  (@ref  #cs::aworx::lox::Lox::SetSourcePathTrimRule)))
      allowing to prioritize rules, especially those provided via configuration variables.
      (Note: this change may affect current projects in respect to <em>Source Path Trim Rules</em>.
      Nevertheless, we declare this version as a revision only.)

- C++ Version:
    - Fixed method \b %ALox::Reset to remove also static global source path trim rules.
      (This method is provided for debug and unit test purposes mainly).
    - Added automatic detection and configuration of log format of processes running
      within <em>QT Creator</em> to support clickable ALox log output. For more details,
      see \ref cppsetup.

- C# and Java Version:
    - Added the use of an INI file in sample application.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1604  Revision 1 #################################### \~
\~Comment ####################################################################################### \~
## Version 1604, Revision 1, released May 26th, 2016 ##

<b>Changes in ALib:</b>
- New optional parameter in constructor and method \b %Set of class
  <b>Tokenizer</b>
    ([C++] (@ref      #aworx::lib::strings::Tokenizer),
     [C#]  (@ref  #cs::aworx::lib::strings::Tokenizer),
     [Java](@ref #com::aworx::lib::strings::Tokenizer)) which allows to automatically skip
  empty tokens.
- C++ Version:
    - Missing empty constructor was added to class
      [Tokenizer] (@ref      #aworx::lib::strings::Tokenizer).
    - New macros
      \b ALIB_STRINGS_APPLYTO_DECLARATION,
      \b ALIB_STRINGS_APPLYTO_DEFINITION and
      \b ALIB_STRINGS_APPLYTO_INLINE
      to simplify the extension of partially implemented template method \b %ApplyTo for custom
      'applicable' types.
    - Compilation error in file applyto.hpp fixed. This started occurring in optimized release
      compilations with newest [GCC](https://gcc.gnu.org) version 6.1 (release 2016-04-27).
      (The code - from the new compiler perspective - did "invalid type punning of pointer types".
      There are some interesting discussions to find in the Internet around this topic since years.)
    - Version number in CMake file fixed.
- Java Version:
    - Method \b %ALIB.REPORT was added to Proguard configuration file (pruning). On the same token,
      pruning script names and documentation were aligned.

<b>Changes in ALox:</b>
- Method
  <b>ALox.Get</b>
    ([C++](@ref      #aworx::lox::ALox::Get),
    [C#]  (@ref  #cs::aworx::lox::ALox::Get),
    [Java](@ref #com::aworx::lox::ALox::get)) now compares the given name of the \b %Lox
  in case insensitive manner. On the same token, naming of \b %Lox and \b %Logger got aligned: both
  now internally convert given names to upper case on creation. Any search is case insensitive.

- New methods
  <b>Log.AddALibReportWriter</b>
    ([C++](@ref      #aworx::lox::Log::AddALibReportWriter),
    [C#]  (@ref  #cs::aworx::lox::Log::AddALibReportWriter),
    [Java](@ref #com::aworx::lox::Log::addALibReportWriter)) and
  <b>Log.RemoveALibReportWriter</b>
    ([C++](@ref      #aworx::lox::Log::RemoveALibReportWriter),
    [C#]  (@ref  #cs::aworx::lox::Log::RemoveALibReportWriter),
    [Java](@ref #com::aworx::lox::Log::removeALibReportWriter)) introduced, to more easily support
  ALib reports in debug versions of applications that use release logging exclusively.
  Details are documented in \ref man_debug_and_release_logging and sample code got updated accordingly.

<b>Changes in Tools:</b>
- Extended the "DoxygenGraphTemplateInstanceRemover" tool, to remove more unnecessary template
  instantiation types from doxygen dot files.

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1604  Revision 0 #################################### \~
\~Comment ####################################################################################### \~
## Version 1604, Revision 0, released April 19th, 2016 ##

<b> Changes in ALib:</b>

Besides small fixes and correction of documentation, relevant changes are:
- Class <b>Report</b> was extended by methods to push, pop and peek the
  current \b ReportWriter, which replaces former method \b Report::ReplaceReportWriter.

- Added methods
  <b>%AString.LastIndexOf</b>
    ([C++](@ref      #aworx::lib::strings::AString::LastIndexOf),
    [C#]  (@ref  #cs::aworx::lib::strings::AString::LastIndexOf),
    [Java](@ref #com::aworx::lib::strings::AString::lastIndexOf)) and
  <b>Substring.Split</b>
    ([C++](@ref      #aworx::lib::strings.Substring.Split),
    [C#]  (@ref  #cs::aworx::lib::strings.Substring.Split),
    [Java](@ref #com::aworx::lib::strings.Substring.split)), which were missing in C#/Java
  versions

- Fixed methods
  <b>%AString.InsertAt</b>
    ([C++](@ref      #aworx::lib::strings::AString::InsertAt),
    [C#]  (@ref  #cs::aworx::lib::strings::AString::InsertAt),
    [Java](@ref #com::aworx::lib::strings::AString::insertAt)) and
  <b>%AString.ReplaceSubstring</b>
    ([C++](@ref      #aworx::lib::strings::AString::ReplaceSubstring),
    [C#]  (@ref  #cs::aworx::lib::strings::AString::ReplaceSubstring),
    [Java](@ref #com::aworx::lib::strings::AString::replaceSubstring)) in C#/Java versions to check
  for null parameter.

- Added scope information for actual owner of class
  <b>ThreadLock</b>
    ([C++](@ref      #aworx::lib::threads::ThreadLock),
    [C#]  (@ref  #cs::aworx::lib::threads::ThreadLock),
    [Java](@ref #com::aworx::lib::threads::ThreadLock)) which allows to quickly identify
  the location (in Java the complete stacktrace) of the last acquirement of the lock.

- Added class
  <b>SmartLock</b>
    ([C++](@ref      #aworx::lib::threads::SmartLock),
    [C#]  (@ref  #cs::aworx::lib::threads::SmartLock),
    [Java](@ref #com::aworx::lib::threads::SmartLock)) which specializes \b ThreadLock to
  control safeness depending on the number of 'users' of the lock.

- Added field
<b>%ALIB.StdOutputStreamsLock</b>
  ([C++] (@ref      #aworx::lib::ALIB::StdOutputStreamsLock),
   [C#]  (@ref  #cs::aworx::lib::ALIB::StdOutputStreamsLock),
   [Java](@ref #com::aworx::lib::ALIB::stdOutputStreamsLock)) to allow locking of standard I/O
output to avoid clashing of output data in multi-threaded applications.

- Added constants to class
  <b>Configuration</b>
   ([C++] (@ref      #aworx::lib::config::Configuration),
    [C#]  (@ref  #cs::aworx::lib::config::Configuration),
    [Java](@ref #com::aworx::lib::config::Configuration)) proposing default priorities for the
standard plug-ins to attach. On the same token, the previously hard-coded numbers where revised
and their sort-order switched (higher value is now higher priority).


<b> Changes in ALox</b>

This release incorporates some major changes of ALox and code that is using ALox needs to be
revised. If we still had the former numbering scheme, this was ALox <b>2.0!</b>.
Before the changes get listed here, the motivation to do so should be explained:

- Simplify the use of ALox by hiding complexity when implementing simple use cases.
  Simplification was reached by greatly increasing 'orthogonality' of features. This allows
  to ignore features (mostly by omitting optional method parameters) if they are not wanted.

- Avoid situations, where the sequence order of invocations (e.g. of <em>Log Domain</em> settings \e Verbosity
  setting and log-domain usage) decides about the effective \e Verbosity setup.

- Support <em>Scope Domain</em> settings of nested scopes to be concatenated if relative domain
  paths are given.

- Support 'external' configuration of \e Verbosity settings (via INI files,
  command line parameters, environment variables, etc.). This way, the control of the log output
  was extended from being available to the programmer, to being available to the user of a
  software as well. Therefore, a certain level of protection against either faulty or unauthorized
  modifications had to be provided.

- Finally, as the changes are quite dramatic anyhow, we took the chance to clean and refactor
  the whole project, rewrite the tutorials and add a lot of new manual chapters!


With these goals in mind, the changes in design and log interface are:

- The internal relationship of objects of type \b Lox, \e %Loggers and \b LogDomain
  was changed.

- New static class
  <b>%ALox</b>
   ([C++] (@ref      #aworx::lox::ALox),
    [C#]  (@ref  #cs::aworx::lox::ALox),
    [Java](@ref #com::aworx::lox::ALox)) holds list of all \b Lox instances created.
  For this, class \b %Lox received a name, which has to be unique. To prevent access to 'private'
  instances of class \b %Lox, the registration with class \b ALox can be suppressed.

- \e %Loggers attached to a \b Lox now need to have unique names.

- \e %Loggers now safely can be attached to more than one \b Lox without loosing performance
  (for unnecessarily using a mutex) if a \e %Logger is attached to one \b Lox only.

- Dropped the possibility to set a \e Verbosity through the interface of class \b %Logger.
  Instead, the interface of class \b Lox has to be used exclusively.

- Dropped the possibility to independently disable a \e Logger. To disable a \e Logger, its levels of \e Verbosity
  have to be set accordingly.

- Dropped the ability of choosing whether a setting of the \e Verbosity for a <em>Log Domain</em> and \e Logger is propagated to
  its sub-domains or not. Now, such changes are \e always propagated. On the same token, \e Verbosity
  'Inherit' was dropped.

- Renamed main generic logging method from \b %Lox.Line to
  <b>%Lox.Entry</b>
   ([C++] (@ref      #aworx::lox::Lox::Entry),
    [C#]  (@ref  #cs::aworx::lox::Lox::Entry),
    [Java](@ref #com::aworx::lox::Lox::entry)).

- Dropped the concept to change or address a subset of \e Loggers filtered by a search string. In other words:
  To change a \e Verbosity, a reference to (or the unique name of) the \e Logger in question is needed.
  Also, method \b Lox.Entry lost parameter \e loggerFilter. Such \e Logger -specific output can now exclusively
  be realized either using dedicated <em>Log Domains</em> that are explicitly enabled for a certain (set of)
  \e Logger(s), or by using a dedicated \b Lox.

- Overloaded methods \b SetDomain have been replaced new methods
  <b>%Lox.SetVerbosity</b>
   ([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
    [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
    [Java](@ref #com::aworx::lox::Lox::setVerbosity)) and
  <b>%Lox.SetDomain</b>
   ([C++] (@ref      #aworx::lox::Lox::SetDomain),
    [C#]  (@ref  #cs::aworx::lox::Lox::SetDomain),
    [Java](@ref #com::aworx::lox::Lox::setDomain)).

- Method AddLogger was removed. \e Loggers are implicitly added when setting a \e %Verbosity for a
  first domain.

- Method AddLogger was removed. \e Loggers are implicitly added when setting a \e %Verbosity for a
  first domain.


- Scope Domains are working differently now:
  - If a Scope Domain is set for a scope, a given domain is appended to the Scope Domain,
    unless it starts with a '/'.
  - Consequently, character '~' is not recognized as relative domain addressing any more, as this
    is now the default behavior. Optionally "./" may be used. Also, support for parent domains "../"
    is supported in relative <em>Log Domains</em>paths.
  - Same is true for inner/outer scopes: outer scopes' Scope Domains are now \e prepended to inner
    scopes' domains unless one starts a '/'.
  - '/' is the only allowed domain separator now (support for '\\' and '|' has been dropped).

- The concept of \e Scopes has been extended by new ones <b>related to the current thread</b>.

- The feature of <em>Code Markers</em> was renamed <em>Log Data</em> and adopted to the the
  heavily extended ALox concept of \e Scopes. (For details see \ref man_log_data.)

- Added method
  <b>%Lox.Once</b>
   ([C++] (@ref      #aworx::lox::Lox::Once),
    [C#]  (@ref  #cs::aworx::lox::Lox::Once),
    [Java](@ref #com::aworx::lox::Lox::once)) allows to have a <em>Log Statement</em> being executed only
    once (or a given number of time). A set of such \b Lox.Once statements can be grouped
    and can be associated to a \e %Scope. (For details see \ref man_log_once.)

- Removed parameter \p doLog from method
  <b>%Lox.Entry</b>
   ([C++] (@ref      #aworx::lox::Lox::Entry),
    [C#]  (@ref  #cs::aworx::lox::Lox::Entry),
    [Java](@ref #com::aworx::lox::Lox::entry)) which allowed conditional logging.

- Added method
  <b>%Lox.If</b>
   ([C++] (@ref      #aworx::lox::Lox::If),
    [C#]  (@ref  #cs::aworx::lox::Lox::If),
    [Java](@ref #com::aworx::lox::Lox::If)) as a replacement for removed parameter \p doLog.

- Removed parameter \p indent from method
  <b>%Lox.Entry</b>
   ([C++] (@ref      #aworx::lox::Lox::Entry),
    [C#]  (@ref  #cs::aworx::lox::Lox::Entry),
    [Java](@ref #com::aworx::lox::Lox::entry)) which allowed indentation of textual log output.

- Added method
  <b>Lox.SetPrefix</b>
   ([C++] (@ref      #aworx::lox::Lox::SetPrefix),
    [C#]  (@ref  #cs::aworx::lox::Lox::SetPrefix),
    [Java](@ref #com::aworx::lox::Lox::setPrefix)) as a powerful replacement for removed parameter \p indent.
  Prefixes are using the extended \e %Scope concept and are well applicable to the concept of
  logging arbitrary objects.

- Refactored static class \b %Log:
  - moved inner enum classes to the namespace (package) scope.
  - Combined enums \b %Level and \b %DomainLevel into one single enum
    <b>Verbosity</b>
       ([C++] (@ref      #aworx::lox::Verbosity,
        [C#]  (@ref  #cs::aworx::lox::Verbosity,
        [Java](@ref #com::aworx::lox::Verbosity).
  - moved static data and interface concerning initialization, configuration and constants
    to new class
    <b>ALox</b>
       ([C++] (@ref      #aworx::lox::ALox),
        [C#]  (@ref  #cs::aworx::lox::ALox),
        [Java](@ref #com::aworx::lox::ALox)).

- Added methods
  <b>Lox.SetSourcePathTrimRule</b>
   ([C++] (@ref      #aworx::lox::Lox::SetSourcePathTrimRule),
    [C#]  (@ref  #cs::aworx::lox::Lox::SetSourcePathTrimRule)) and
  <b>Lox.ClearSourcePathTrimRules</b>
   ([C++] (@ref      #aworx::lox::Lox::ClearSourcePathTrimRules),
    [C#]  (@ref  #cs::aworx::lox::Lox::ClearSourcePathTrimRules)) and
     as a powerful replacement the now removed
  concept of 'consumable source path prefixes' (Does not apply to Java version). This replaced
  also the corresponding mechanics in former class \b %CallerInfo, which is now named \b %ScopeInfo.

- Added concept of <em>Domain Substitution</em>. See \ref man_domain_substitution and
  <b>Lox.SetDomainSubstitutionRule</b>
   ([C++] (@ref      #aworx::lox::Lox::SetDomainSubstitutionRule),
    [C#]  (@ref  #cs::aworx::lox::Lox::SetDomainSubstitutionRule),
    [Java](@ref #com::aworx::lox::Lox::setDomainSubstitutionRule)).

- The <em>internal domain</em> which formerly defaulted to "/ALOX" was moved into a separated 'domain tree'.
  The advantage is, that It can not be accidentally switched on by setting a \e Verbosity of
  the root domain "/". Internal domains are just not reachable any more from the standard tree of
  domains and have to be activated with a separate invocation of method
  <b>Lox.SetVerbosity</b>
   ([C++] (@ref      #aworx::lox::Lox::SetVerbosity),
    [C#]  (@ref  #cs::aworx::lox::Lox::SetVerbosity),
    [Java](@ref #com::aworx::lox::Lox::setVerbosity)).

- Added a counter for the number of <em>Log Statements</em> per domain/logger which is exposed with
  <b>%Lox.LogConfig</b>.

- Added field <b>Lox.DomainSensitivity</b> which controls if <em>Log Domains</em>
  are treated the same when they only differ in the case of their writing (which is the default and
  also former behavior) or if case sensitivity is enforced.

- Removed parameter \e replaceDefaultReportWriter from method
  <b>Log.AddDebugLogger</b>
    ([C++](@ref      #aworx::lox::Log::AddDebugLogger),
    [C#]  (@ref  #cs::aworx::lox::Log::AddDebugLogger),
    [Java](@ref #com::aworx::lox::Log::addDebugLogger)). An \b
  <b>ALoxReportWriter</b>
    ([C++](@ref      #aworx::lox::ALoxReportWriter),
    [C#]  (@ref  #cs::aworx::lox::ALoxReportWriter),
    [Java](@ref #com::aworx::lox::ALoxReportWriter)) is now set provided that the default
   ALib \b ConsoleReportWriter is in place.

- Class
  <b>%TextLogger</b>
   ([C++] (@ref      #aworx::lox::core::textlogger::TextLogger),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::TextLogger),
    [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) now supports a list of
  <b>%ObjectConverter</b>
   ([C++] (@ref      #aworx::lox::core::textlogger::ObjectConverter),
    [C#]  (@ref  #cs::aworx::lox::core::textlogger::ObjectConverter),
    [Java](@ref #com::aworx::lox::core::textlogger::ObjectConverter)) objects being attached,
  instead of only one.
  This simplifies the creation of custom converter types and makes their use more flexible.

- If multiple \e %Loggers, which direct log output to either standard <em>output</em> or
  <em>error</em> stream exist, such output is now protected in multi-threaded applications.
  Such protection can in aenumddition be achieved with standard output that is not generated from
  ALox.

- If multiple \e %Loggers, which direct log output to either standard <em>output</em> or
  <em>error</em> stream exist, such output is now protected in multi-threaded applications.
  Such protection can in addition be achieved with standard output that is not generated from
  ALox.

- Some configuration variables were renamed and new ones added, for example \c ALOX_LOGGERNAME_FORMAT.
  For complete info see \ref GrpALoxConfigVars.

- C++ support for single-threaded ALox compilations cleaned (ALib now fully hides differences between
  single/multi-threaded compilations, all interfaces remain active in single threaded mode).

- Dropped compiler symobl \b ALOX_NO_THREADS of C# Version. ALox for C# is now always thread
  enabled (same as ALox for Java).

- <b>Tutorials</b>
    ([C++](@ref cpptutorial),
    [C#]  (@ref cstutorial),
    [Java](@ref javatutorial)) and the (@ref manual) have be completely rewritten and greatly
    expanded to reflect the new architecture and features (and also those that were dropped).


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1602  Revision 1 #################################### \~
\~Comment ####################################################################################### \~
## Version 1602, Revision 1, released February 15th, 2016 ##
This is a revision of version 1602, with minimal impact on standard ALox user code.

<b> General changes</b>
- The previous release, V.1602 R.0, unfortunately identifies itself as V.1601 R.0. This release
  properly reports V.1602 R.1.

- The C++ version of underlying ALib extended the concept of
  \e mirroring ALib classes into namespace \ref aworx "aworx".
  This led to the nice consequence, that all string classes inside the namespace
  \ref aworx::lib::strings now use the same name as their 'mirror' type provided in namespace
  \ref aworx "aworx". (Previously, they were using a non-generic name which was chosen for extra
  safety against collisions).

  Furthermore, this concept was adopted to other namespaces of ALib and to ALox as well.
  This way, when using ALib and/or ALox it is now sufficient to add only one using statement to
  the source code, which is

        using aworx;

  More information about the concept of 'mirroring' type names in to namespace \b %aworx is given in
  the documentation of \ref aworx "C++ namespace aworx".

- The word '<em>postfix</em>' was replaced by '<em>suffix</em>' within identifiers and documentation as
  this seems the more common and proper English term.

- Minor other fixes in the documentation

<b> Changes in ALib (the utility library that ALox builds on)</b>
- Removed public flags \b HaltOnError and \b HaltOnWarning in class \b Report and replaced their
  functionality by providing new methods <b>Report::PushHaltFlags</b> and
  <b>Report::PopHaltFlags</b>.


<b> Changes in ALox</b>
- User manual restructured and extended by chapter \"\ref man_debug_and_release_logging\".

- C++ version:
    - Renamed debug \b %Lox singleton of C++ version in class \b %Log from \b %lox to \b LOX to
      align with C# and Java versions.
    - Removed release \b %Lox singleton in class \b %Log to align with C# and Java versions.

- C# version:
    - Fixed usage of compiler symbol \b ALOX_NO_THREADS.

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1602  ############################################### \~
\~Comment ####################################################################################### \~

\~Comment ############### ALib ################ \~

## Version 1602, Revision 0, released February 2nd, 2016 ##
<b> General changes </b><p>
This is a major update. A lot, if not all was touched. The good news is that the logging interface
itself did only change slightly for Java and C# versions. In C++ the macros were renamed because
we started using 'variadic macros' instead of 'suffixed overloads'. This makes ALox C++ even
more code-compatible to C#/Java versions.
Therefore, very simple code changes (mostly renaming) should be needed to adopt this release.

More important general changes are:

-  Changed version scheme from major.minor to a nowadays common YYMM format. Hence this is version
  \b 1602. In addition each version has a revision number for updates without interface changes.
  ALib (formerly named AWXU) and ALox have separated version fields found in
  <b>ALIB.Version</b>
  ([C++] (@ref      #aworx::lib::ALIB::Version),
   [C#]  (@ref  #cs::aworx::lib::ALIB::Version),
   [Java](@ref #com::aworx::lib::ALIB::version)) and
  \b Log.Version
   It is expected that these two different version numbers will stay in sync.

- All IDE or CMake project files, solution names, folder structure, source structure changed.
  Also some 'compiler symbols', and so on.
  See language specific project setup tutorials for information on how to get going again!<br>
  Also: Transitioned Visual Studio project files from version 2014 to 2015<br>
  Also: Added i64 configurations to VStudio project files.

- Unit tests are fully aligned between the three languages and development platforms. This is
  achieved by introducing a compatibility layer over
  \e gtest, \e NUnit, \e junit, <em>VisualStudio TestTools</em>, etc.

- A new Doxygen layout was designed for better readability, more information. A better doxygen
  setup allows more referencing between the implementation languages. Also a tool to fine-tune
  class diagrams of template classes was added to the (new)
  [Tools section](tools.html).

- Debug helpers for QTCreator (awkward Python scripting :-/) were added to better inspect
  C++ classes. Also, some Java/C# improvements in this are have been made.
  See [Tools](tools.html).


\~Comment ############### ALib ################ \~

<b> Changes in ALib (former AWXU, AWorx Util</b>

- Base library "AWorx Util" was renamed to <b>"A-Worx Library"</b> or just  <b>"ALib"</b>.
  Consequently, class <em>AWXU</em> was renamed to
  <b>ALIB</b>
  ([C++] (@ref #aworx::lib::ALIB),
   [C#]  (@ref #cs::aworx::lib::ALIB),
   [Java](@ref #com::aworx::lib::ALIB))

- With this renaming, all namespaces
  (in Java 'package') of the AWorx Library and ALox itself have been renamed. A main
  motivation to do so, was to have all namespaces distinguished within the Doxygen documentation
  system, which was a problem before. Now, the documentation can deep-link directly into the
  corresponding C++, C# or Java reference documentation. The root namespaces now are:
  - for C++ classes:  \ref aworx
  - for C# classes:   \ref cs::aworx "cs.aworx"
  - for Java classes: \ref com::aworx "com.aworx"

  Within this root namespace, sub namespaces
  - <b>[com::|cs::] %aworx::lib</b>
    ([C++] (@ref aworx::lib)
     [C#]  (@ref cs::aworx::lib)
     [Java](@ref com::aworx::lib)) for the AWorx Library and
  - <b>[com::|cs::] %aworx::lox</b>
    ([C++] (@ref aworx::lox)
     [C#]  (@ref cs::aworx::lox)
     [Java](@ref com::aworx::lox)) for the ALox Logging Library exist.

  The classes of the AWorx Library, hence those in namespace
  <b>[com::|cs::] %aworx::lib</b>
  ([C++] (@ref aworx::lib)
   [C#]  (@ref cs::aworx::lib)
   [Java](@ref com::aworx::lib)), have been moved and sorted into a set of sub namespaces as well.

- Class
  <b>AString</b>
  ([C++] (@ref #aworx::lib::strings::AString),
   [C#]  (@ref #cs::aworx::lib::strings::AString),
   [Java](@ref #com::aworx::lib::strings::AString))
  received a complete overhaul. The trigger was a huge frustration with general string handling in
  C++. (See the great essay [The Most Expensive One-byte Mistake] (http://queue.acm.org/detail.cfm?id=2010365)).
  The goal was to make
    - C-Strings,
    - std::string,
    - std::iostream
    - 3rd-party strings like QString, etc.

  compatible with ALib in the least intrusive way. This goal was reached using some <em>template meta programming</em>,
  which we are happy that it is done now and we hope that we do not need to touch that code again
  for a longer time.<br>
  Refer to [C++ namespace strings] (@ref aworx::lib::strings) for an introduction to the new
  and already famous (!) non intrusive ALib string classes.<br>
  Besides these changes in ALib for C++, all ALib implementation languages in general got now:
  - All "Append" methods were renamed to "_". Yes, please laugh, but writing "Append" was a pain.
    String assembly now looks like this:<br>
    <c>(new AString())._("Hello ALox V.")._( 1602 );</c> Alternatively, C++ users may write:<br>
    <c>String64 << "Hello ALox V." << 1602;</c>  which does not allocate memory from the heap.
  - Most of the other methods were renamed as well.
  - New methods for inserting strings and substrings at arbitrary positions.
  - Trim methods (front, end, middle)
  - Static string helper methods got gathered in new class
    <b>CString</b>
    ([C++] (@ref #aworx::lib::strings::CString),
     [C#]  (@ref #cs::aworx::lib::strings::CString),
     [Java](@ref #com::aworx::lib::strings::CString))
  - Conversion of floating point values into strings and vice versa received its own implementation
    (instead of using existing system methods). This brings several advantages. For more information
    see documentation of class
    <b>NumberFormat</b>
      ([C++](@ref #aworx::lib::strings::NumberFormat),
      [C#]  (@ref #cs::aworx::lib::strings::NumberFormat),
      [Java](@ref #com::aworx::lib::strings::NumberFormat)).
  - Methods that omit checking their given parameter values and also omit some internal state
    checking and setting got introduced. The goal here is to avoid redundant, repetitive checks. See
    <b>Non-checking methods</b>
      ([C++](@ref alib_namespace_strings_nonchecking),
      [C#]  (@ref CS_ASTRING_NC),
      [Java](@ref JAVA_ASTRING_NC)) for more information.
  - New String classes
    <b>Substring</b>
    ([C++] (@ref #aworx::lib::strings::Substring),
     [C#]  (@ref #cs::aworx::lib::strings::Substring),
     [Java](@ref #com::aworx::lib::strings::Substring))
    and
    <b>Tokenizer</b>
    ([C++] (@ref #aworx::lib::strings::Tokenizer),
     [C#]  (@ref #cs::aworx::lib::strings::Tokenizer),
     [Java](@ref #com::aworx::lib::strings::Tokenizer))
    that provide fast (no memory allocations), simple string parsing capabilities.
    <b>AString</b>
    ([C++] (@ref #aworx::lib::strings::AString),
     [C#]  (@ref #cs::aworx::lib::strings::AString),
     [Java](@ref #com::aworx::lib::strings::AString))
    accept class <em>Substring</em> as a parameter (Well, C++ Version of AString accepts just
    anything that smells like a string in its TMP-based constructor!)

- A sort of 'global' approach to \e enumerations in ALib has been taken. Read more about that in:
  <b>Namespace 'enums'</b>.

- Class
  <b>ALIB</b>
  ([C++] (@ref #aworx::lib::ALIB),
   [C#]  (@ref #cs::aworx::lib::ALIB),
   [Java](@ref #com::aworx::lib::ALIB))
  in its C# and Java version received a list of assertion methods, named
   - \e ALIB.WARNING,
   - \e ALIB.ERROR,
   - \e ALIB_ASSERT_WARNING, etc.

  They are in alignment with corresponding macros in the C++
  version which are named
   - \e ALIB_WARNING,
   - \e ALIB_ERROR,
   - \e ALIB_ASSERT_WARNING, etc.

- These assertions make use of classes <b>Report</b> and  <b>ReportWriter</b>
  which replaced the former \e ErrorHandler class.


<p>
- AWorx Library learned to read <b>configuration data</b>. Providing a plug-in concept, any application
  and platform specific, existing configuration mechanism can be attached. <br>
  By default, configuration data can be generated from environment variables and command line
  parameters. In addition, a basic class for reading and writing "INI files" is provided for the
  case that the application using ALox (ALib) does not provide their own storage mechanism.

  See namespace
  <b>config</b>
    ([C++](@ref #aworx::lib::config),
    [C#]  (@ref #cs::aworx::lib::config),
    [Java](@ref #com::aworx::lib::config)) for more information.


- Fixed daylight saving bug in class Ticks (GNU/Linux, C++ version)

\~Comment ############### ALox ################ \~

<b> Changes in ALox </b>

- ALox learned to <b>colorize log lines</b>. Depending on programming language and platform,
  different new \e Loggers are provided (e.g. ANSI escape sequences and native windows console coloring).

- Combining the aforementioned configuration capabilities and the colorful log output, ALox learned
  to <b>detect and choose the right debug console \e Logger</b> automatically, respectively use configuration
  hints and settings to do so.
  See new method
  <b>Log::CreateConsoleLogger</b>
  ([C++] (@ref #aworx::lox::Lox::CreateConsoleLogger),
   [C#]  (@ref #cs::aworx::lox::Lox::CreateConsoleLogger),
   [Java](@ref #com::aworx::lox::Lox::createConsoleLogger))
  for further information.<br>
  For debug logging, method
  <b>Log::AddDebugLogger</b>
  ([C++] (@ref #aworx::lox::Log::AddDebugLogger),
   [C#]  (@ref #cs::aworx::lox::Log::AddDebugLogger),
   [Java](@ref #com::aworx::lox::Log::addDebugLogger))
  may be used which also reflects some IDE specifics. There is more to come here in the future.

  Furthermore, the (automatically increased) tab positions of the debug \e Logger created in
  <b>Log::AddDebug\e Logger</b>
  ([C++] (@ref #aworx::lox::Log::AddDebugLogger),
   [C#]  (@ref #cs::aworx::lox::Log::AddDebugLogger),
   [Java](@ref #com::aworx::lox::Log::addDebugLogger)),
  are stored in the configuration (as soon as a
  <b>ConfigurationPlugin</b>
    ([C++](@ref #aworx::lib::config::ConfigurationPlugin),
    [C#]  (@ref #cs::aworx::lib::config::ConfigurationPlugin),
    [Java](@ref #com::aworx::lib::config::ConfigurationPlugin)) is provided that is capable of
  storing configuration data, e.g. one of type class
  <b>IniFile</b>
    ([C++](@ref #aworx::lib::config::IniFile),
    [C#]  (@ref #cs::aworx::lib::config::IniFile),
    [Java](@ref #com::aworx::lib::config::IniFile))) and this way survive the lifetime of a
  process.

- Added IDE specific \e Loggers for Visual Studio (C++/C#) and MonoDevelop (C#).

- Removed optional parameter \p InternalDomainLevel from method \b Lox.AddLogger.
  It was OK to have it but caused a lot of confusion users. Instead, the method now checks if
  the internal \e Verbosity was set before and if not, sets it to \b DomainVerbosity.ErrorAndWarnings.


- Renamed method \b Lox.SetDisabled to \b Lox.SetVerbosity.

- Renamed method \b Lox.RegDomain to \b Lox.SetDomain (which existed before, therefore these are now
  overloaded methods).<br> Background: with increasing \e tolerance of ALox against non- or
  partly-configured logging, the concept of "registering" a domain becomes an internal thing.
  On the same token, logging to a deregistered domain is now an internal log message on
  \e Verbosity.Info, not \e Verbosity.Warning.

- Added public interface to class \b %Logger to set a log level, independent from using a \b Lox.
  This was already possible before, but now got put into a convenient method which registers the
  domain. For more information on here to use that, refer to
  <b>tutorials</b>
    ([C++](@ref cpptutorial),
    [C#]  (@ref cstutorial),
    [Java](@ref javatutorial)) and chapter "Log Levels, Log Domains and Log Domain Levels".
  in the ALox user manual.

- Renamed internal class \b LogDomain to \b Domain. Similar as with aforementioned tendency to
  tolerance, also its interface changed in a way that any search for an unknown domain now creates
  it, as finally all code instances that searched a domain created one when not available.

- C# compilation symbols<br>
  <b>Important:</b> C# compilation symbols changed to align with the C++ version of ALox.
  Existing project settings need to be changed to reflect the new symbol naming and use.
  See \ref csmacros for more information.

\~Comment ############### ALib minor ################ \~

<p>
- Other, minor things in ALox (not a complete list):
    - New format symbol 'Cf' in MetaInfo. Writes source file name excluding
      the path name (C++ and C# versions)

    - Fixed scope information handling in C++ version. Nested log calls will now all show
      scope information of the first log call invoked. (Nested log calls appear for example
      if an assertion is thrown during the assembly of a log message.)

    - Moved class
      <b>TextLogger</b>
      ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
       [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
       [Java](@ref #com::aworx::lox::core::textlogger::TextLogger)) and its helpers into an
       own namespace. Also introduced abstract class
      <b>PlainTextLogger</b>
      ([C++] (@ref #aworx::lox::core::textlogger::PlainTextLogger),
       [C#]  (@ref #cs::aworx::lox::core::textlogger::PlainTextLogger),
       [Java](@ref #com::aworx::lox::core::textlogger::PlainTextLogger)) which filters out
       color and other format information for log destinations that can not make use of it.
       This is now parent of e.g. \b MemoryLogger, \b TextFileLoger and the (plain) \b ConsoleLogger.

    - Renamed field <em>Buffer</em> of class
      <b>MemoryLogger</b>
      ([C++] (@ref #aworx::lox::loggers::MemoryLogger),
       [C#]  (@ref #cs::aworx::lox::loggers::MemoryLogger),
       [Java](@ref #com::aworx::lox::loggers::MemoryLogger)) to <em>MemoryLog</em>.

    - Cleaned internal ALox log messages.

    - Various improvements and corrections of the documentation. Updated tutorials and
      project setup documentations.

    - A few more samples were added to the ALoxSamples project (which was also renamed).

    - Proguard 5.2 (January 2015) release tested and updated configuration files to reflect
      changed namespaces. Also added GNU/Linux bash script samples for pruning with Proguard.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.2.0  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.2.0, released June 2nd, 2015 ##

- ALox for C++ has arrived! Key features of this first version are:
    - Feature complete in respect to current C# and Java versions of ALox
    - GNU/Linux (gcc) and Windows (Microsoft Compiler) support
    - C++ 11 code standards. (Does not compile with C++ compilers prior to C++ 11)
    - CMake build system support
    - QTCreator build system
    - Visual Studio project files

- Changes in C# and JAVA versions:
    - Due to the alignment with the new C++ code base many changes occurred. Only the most important
      ones are listed here.
    - Reorganization of directory structure of source code and project/build files.
    - A huge list of changes occurred ALIB classes of both languages,
        - Many corrections/improvements in class MString, which was in addition renamed to AString
        - Interface changes in Ticker and TickTime utility classes.
          Ticker was moved to Ticks, TickTime is now named TickWatch and both classes changed
          tremendously. Class TickSpan introduced in JAVA (while C# relies to built-in class).
    - Consumable source path prefix feature moved from class Lox to class TextLogger

- Changes in ALox for C#:
    - Mono support and MonoDevelop project files
    - Support for Windows Phone 8.1 was added
    - Support for Windows Phone 7.1 was "officially" dropped. However, it should still work
    - Unit tests were removed from the Windows Phone projects configurations. We did not find
      a maintainer for this.

- Changes in ALox for Java:
    - Transitioned Eclipse support from Kepler to Luna
    - Proguard 5.2 (January 2015) release tested

- Various fixes in the documentation.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.1.2  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.1.2, released March 4th, 2015 ##
- Various fixes in the documentation.
- Android fix fo LogCat output.
- C# Version: Support for Mono and MonoDevelop. This means, corresponding ide files (MonoDevelop)
  have been set up and Unit Testing now supports VStudio and NUnit Test
- Outlook: A C++ Version is currently in development and to be released in Q2 2015


## Version 1.1.1, released November 26th, 2013 ##
- Added a first, simplistic file \e Logger. This is really just a first shot, not optimized in any
  respect. This is due to be extended in next versions.
- Created an own source folder for tools and moved class [LogTools](@ref #cs::aworx::lox::tools::LogTools)
  there.
- C# Version: Improvement of [LogTools.Instance](@ref #cs::aworx::lox::tools::LogTools::Instance) to be
  able to handle members of type KeyValuePair<,>, which are considered a value type in C#.
- C# Version: In the tool section, added a simple generic JSON file reader which in combination with
  [LogTools.Instance](@ref #cs::aworx::lox::tools::LogTools::Instance) provides very easy simplistic
  JSON handling (good for quick and dirty exploration of JSON data).


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.1.0  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.1.0, released July 31st, 2013 ##
- First ALox for Java Release!
  100% Feature complete (as compared to actual C# Version).

- ALox for Java includes an LogCat \e Logger for Android. This enables LogCat filtering and double-click
  support (jump to code line)

- Doxygen documentation now builds three different sites: Main, C# and Java. With a little doxygen
  manipulation, these three sites nicely integrate into each other, without much of a "media break".

- Added tutorials and sample projects on how to configure pruning for C# (incl. Windows Phone) and
  Java (incl. Android).<br>
  Attn: The project folders and project names changed. So after doing a
  checkout, you have to fix your VStudio solution.<br>
  For C#, see [Setting Up Visual Studio](cs_ref/setup_projects_vs_cs.html) <br>
  For Java, see [Setup your IDE for Java Projects](java_ref/setup_projects_java.html)

- Slightly different namespace (C#), respectively package (Java) structure:
  - class [Lox](@ref cs::aworx::lox::Lox) moved one package "up" from *com.aworx.lox.core* to *com.aworx.lox*
  - classes
    [MemoryLogger](@ref cs::aworx::lox::loggers::MemoryLogger) and
    [ConsoleLogger](@ref cs::aworx::lox::loggers::ConsoleLogger)
    moved to a new package from *com.aworx.lox.loggers*
    This new packages is to be filled over time with new \e Logger types. Class
    [TextLogger](@ref cs::aworx::lox::core::textlogger::TextLogger) however, was kept in package *com.aworx.lox.core*
    as this class is an abstract foundation class for current and future text based \e Loggers.

- Class [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger) was completely redesigned to be more configurable
  and extensible. For a complete description, see new manual chapter \ref man_ext_loggers.

- Added a AString singleton to classes
  [Log](@ref #cs::aworx::lox::Log) and
  [Lox](@ref #cs::aworx::lox::Lox) that can be acquired using
  \b Log.Buf respectively \b Lox.Buf and is automatically released when contents gets logged. See
  new tutorial section.

- C# class [ThreadLock](@ref cs::aworx::lib::threads::ThreadLock) corrected method names to follow "upper camel case".

- A very lot of small changes and improvements. Reviewed and extended tutorials and user manual with new chapters.

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.4  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.4, released June 24th, 2013 ##
- Java Version (including Android LogCat support) is **on its way**. It is almost "feature complete", but not in a
  state of being released, yet. Stay tuned!
- Two manual chapters written.
- Various internal improvements of speed and code consistency.
- Changed the type of parameter "msg" in all logging methods of classes Log, Lox and Logger from String (or AString)
  to Object. Only TextLogger will then identify different string-types (e.g. String, StringBuilder, StringBuffer,
  AString, CharSequence, etc.) and handle them efficiently. Unknown types are converted using their ToString() function.
  Other Loggers might treat them differently. This should not affect your code base in respect to using the standard logging
  interface.
- Introduced the new enumeration [Scope](@ref #cs::aworx::lox::Scope). The scope is used by different
  methods as a parameter to define the applicable scope of a command. Scopes differ in different platform/languages
  supported by ALox. In C# the scope can be "Method" or "SourceFile" while in the upcoming Java version of ALox
  the scope "Package", "Class" and "Method" are defined.
  The difference is due to different mechanisms to automatically collect scope information.

  Attn C# users: If within one source file two or more classes with equal same method names exist, then such
  method names share the same scope and hence are ambiguous. This is due to technical restrictions
  of how scope information is collected in C#/.Net.

  The methods affected in this release are:
  - \b Log.GetMarker,
  - \b Log.SetMarker, and
  - \b Log.RegDomain.

  For the latter, the optional parameter "setAsDefault" was replaced by the scope and is not optional, but explicit now.
  For registering a Domain without setting it as the Scope Domain, the Scope value
  [Scope.None](@ref #cs::aworx::lox::Scope) has to be given.

- Parameter list of abstract function \b TextLogger::logText got extended.
  Needs adaption if you derived your own TextLogger class.
- Removed one and renamed two of the output control flags in [Logger](@ref #cs::aworx::lox::core::Logger). If you
  used them, you will have to make small code changes.
- Small changes in [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger) format strings for date and time of day.
- Renamed com.aworx.MutableString to MString. Several new methods
  added. (No impact on API)


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.3  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.3, released May 27th, 2013 ##
- added Windows Phone 7.1 compatibility (Windows Phone 8, was already supported)
- minor bug fixes in code and documentation
- renamed methods *Log.LOG()*, *Lox.log()* and *Logger.Log()* to *Logger.Line()*.
  The reasons why they had been named as they were before, is maybe not too obvious.
  Some name conflicts where  confusing. Now, all confusion should be gone!

  Note: If you had used these methods, you have to rename them in your code accordingly.

- Enums *Level* and *DomainLevel* stop existing several times in different namespaces. Their place
  is now in class Log, hence \b Level and \b Verbosity.

  *Note for those who are interested:*  This was OK before and supported separation and avoided cyclic
  package references. However, with implementing the Java version, having multiple versions caused problems
  (Java does not support casting enum to int or enum A to enum B). While we are aware that *class Log* is not the
  right place in terms of code design (Logger and Lox should not *know* Log but now they use its enums heavily), but the
  alternatives to that would have led to either ugly calls in the *user code* or expensive enum conversion operations in
  the Java version of ALox. And both is what we wanted less than as it is now.

  For all standard use of ALox (through static Log interface *Log*) this change has no impact on your code.

- Added further AWorx util classes, to support code compatibility between Java and C# (Java version of ALox development is
  ongoing but not part of this release

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.2  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.2, released May 21st, 2013 ##

- Fixed list of minor bugs

- Some improvements in formatted output of class [LogTools](@ref #cs::aworx::lox::tools::LogTools)

- Improvements in formatted output of method \b Log.LogConfig.

- Added more options to manipulate multi line message logging with [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger)

- Added more unit tests

- Completed the tutorial section of the user manual (if such thing can ever be complete)

- Started first "in depth" sections of the user manual


 **The following are changes that need modifications in your code:**

- Renamed conditional compiler symbol **AWORX_LOG** to **ALOX_DEBUG**

- Renamed the namespaces from having prefix "com.aworx.log" to "com.aworx.lox"

- Renamed all symbols in enum \b Verbosity and enum \b Level from *"upper case with underscores"*
  to *"upper camel case"*, for consistency with C# standards.

- Renamed
  - **Log.CreateDomain()** to \b Log.RegDomain and
    on the same token renamed:
  - **Log.SetDomainLogLevel()** to \b Log.SetDomain()

  This was done to emphasize the fact that both functions create a domain if it does not exist
  yet and it is not important in which order they are called.

- Removed method **Log.SetDomain()**. Use \b Log.RegDomain

- Added new Parameter \p internalDomainLevel added to method \b Log.AddLogger().

  *Note: You do not need to change your source code, because the new parameter has a default value. However, you might
  want to look at the documentation to understand the concept and use this parameter rightfully.*

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.1  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.1, released May 17th, 2013 ##

First stable release deployed to brave volunteers.

*/
