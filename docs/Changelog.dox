// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page changelog         Change Log

Historically, there existed a kind of predecessor of this library for C++ and Java and was
more or less maintained since the year 1999. However this is a complete rewrite with C++, Java and C#
implementations.<br>
The first released version was Version 1.0.1 in **May 2013**.

This change log is sorted reversely in respect to chronology.

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1602  ############################################### \~
\~Comment ####################################################################################### \~

\~Comment ############### ALib ################ \~

## Version 1602, Revision 0, released February 2nd, 2016 ##
<b> General changes </b><p>
This is a major update. A lot, if not all was touched. The good news is that the logging interface
itself did only change slightly for Java and C# versions. In C++ the macros were renamed because
we started using 'variadic macros' instead of postfix'ed 'overloads'. This makes ALox C++ even
more code-compatible to C#/Java versions.
Therefore, very simple code changes (mostly renaming) should be needed to adopt this release.

More important general changes are:

-  Changed version scheme from major.minor to a nowadays common YYMM format. Hence this is version
  \b 1602. In addition each version has a revision number for updates without interface changes.
  ALib (formerly named AWXU) and ALox have separated version fields found in
   <b>ALIB.Version</b>
  ([C++] (@ref #aworx::lib::ALIB::Version),
   [C#]  (@ref #cs::aworx::lib::ALIB::Version),
   [JAVA](@ref #com::aworx::lib::ALIB::version)) and
   <b>Log.Version</b>
  ([C++] (@ref #aworx::lox::Log::Version),
   [C#]  (@ref #cs::aworx::lox::Log::Version),
   [JAVA](@ref #com::aworx::lox::Log::version)). It is expected that these two different version
   numbers will stay in sync.

- All IDE or CMake project files, solution names, folder structure, source structure changed.
  Also some 'compiler symbols', and so on.
  See language specific project setup tutorials for information on how to get going again!<br>
  Also: Transitioned Visual Studio project files from version 2014 to 2015<br>
  Also: Added i64 configurations to VStudio project files.

- Unit tests are fully aligned between the three languages and development platforms. This is
  achieved by introducing a compatibility layer over
  \e gtest, \e NUnit, \e junit, <em>VisualStudio TestTools</em>, etc.

- A new Doxygen layout was designed for better readability, more information. A better doxygen
  setup allows more referencing between the implementation languages. Also a tool to fine-tune
  class diagrams of template classes was added to the (new)
  [Tools section](tools.html).

- Debug helpers for QTCreator (awkward Python scripting :-/) were added to better inspect
  C++ classes. Also, some Java/C# improvements in this are have been made.
  See [Tools](tools.html).


\~Comment ############### ALib ################ \~

<b> Changes in ALib (former AWXU, AWorx Util</b>

- Base library "AWorx Util" was renamed to <b>"A-Worx Library"</b> or just  <b>"ALib"</b>.
  Consequently, class <em>AWXU</em> was renamed to
  <b>ALIB</b>
  ([C++] (@ref #aworx::lib::ALIB),
   [C#]  (@ref #cs::aworx::lib::ALIB),
   [JAVA](@ref #com::aworx::lib::ALIB))

- With this renaming, all namespaces
  (in Java 'package') of the AWorx Library and ALox itself have been renamed. A main
  motivation to do so, was to have all namespaces distinguished within the Doxygen documentation
  system, which was a problem before. Now, the documentation can deep-link directly into the
  corresponding C++, C# or Java reference documentation. The root namespaces now are:
  - for C++ classes:  \ref aworx
  - for C# classes:   \ref cs::aworx "cs.aworx"
  - for Java classes: \ref com::aworx "com.aworx"

  Within this root namespace, sub namespaces
  - <b>[com::|cs::] %aworx::lib</b>
    ([C++] (@ref aworx::lib)
     [C#]  (@ref cs::aworx::lib)
     [JAVA](@ref com::aworx::lib)) for the AWorx Library and
  - <b>[com::|cs::] %aworx::lox</b>
    ([C++] (@ref aworx::lox)
     [C#]  (@ref cs::aworx::lox)
     [JAVA](@ref com::aworx::lox)) for the ALox Logging Library exist.

  The classes of the AWorx Library, hence those in namespace
  <b>[com::|cs::] %aworx::lib</b>
  ([C++] (@ref aworx::lib)
   [C#]  (@ref cs::aworx::lib)
   [JAVA](@ref com::aworx::lib)), have been moved and sorted into a set of sub namespaces as well.

- Class
  <b>AString</b>
  ([C++] (@ref #aworx::lib::strings::AString),
   [C#]  (@ref #cs::aworx::lib::strings::AString),
   [JAVA](@ref #com::aworx::lib::strings::AString))
  received a complete overhaul. The trigger was a huge frustration with general string handling in
  C++. (See the great essay [The Most Expensive One-byte Mistake] (http://queue.acm.org/detail.cfm?id=2010365)).
  The goal was to make
    - C-Strings,
    - std::string,
    - std::iostream
    - 3rd-party strings like QString, etc.

  compatible with ALib in the least intrusive way. This goal was reached using some <em>template meta programming</em>,
  which we are happy that it is done now and we hope that we do not need to touch that code again
  for a longer time.<br>
  Refer to [C++ namespace strings] (@ref aworx::lib::strings) for an introduction to the new
  and already famous (!) non intrusive ALib string classes.<br>
  Besides these changes in ALib for C++, all ALib implementation languages in general got now:
  - All "Append" methods were renamed to "_". Yes, please laugh, but writing "Append" was a pain.
    String assembly now looks like this:<br>
    <c>(new AString())._("Hello ALox V.")._( 1602 );</c> Alternatively, C++ users may write:<br>
    <c>String64 << "Hello ALox V." << 1602;</c>  which does not allocate memory from the heap.
  - Most of the other methods were renamed as well.
  - New methods for inserting strings and substrings at arbitrary positions.
  - Trim methods (front, end, middle)
  - Static string helper methods got gathered in new class
    <b>CString</b>
    ([C++] (@ref #aworx::lib::strings::CString),
     [C#]  (@ref #cs::aworx::lib::strings::CString),
     [JAVA](@ref #com::aworx::lib::strings::CString))
  - Conversion of floating point values into strings and vice versa received its own implementation
    (instead of using existing system methods). This brings several advantages. For more information
    see documentation of class
    <b>NumberFormat</b>
      ([C++](@ref #aworx::lib::strings::NumberFormat),
      [C#]  (@ref #cs::aworx::lib::strings::NumberFormat),
      [JAVA](@ref #com::aworx::lib::strings::NumberFormat)).
  - Methods that omit checking their given parameter values and also omit some internal state
    checking and setting got introduced. The goal here is to avoid redundant, repetitive checks. See
    <b>Non-checking methods</b>
      ([C++](@ref alib_namespace_strings_nonchecking),
      [C#]  (@ref CS_ASTRING_NC),
      [JAVA](@ref JAVA_ASTRING_NC)) for more information.
  - New String classes
    <b>Substring</b>
    ([C++] (@ref #aworx::lib::strings::Substring),
     [C#]  (@ref #cs::aworx::lib::strings::Substring),
     [JAVA](@ref #com::aworx::lib::strings::Substring))
    and
    <b>Tokenizer</b>
    ([C++] (@ref #aworx::lib::strings::Tokenizer),
     [C#]  (@ref #cs::aworx::lib::strings::Tokenizer),
     [JAVA](@ref #com::aworx::lib::strings::Tokenizer))
    that provide fast (no memory allocations), simple string parsing capabilities.
    <b>AString</b>
    ([C++] (@ref #aworx::lib::strings::AString),
     [C#]  (@ref #cs::aworx::lib::strings::AString),
     [JAVA](@ref #com::aworx::lib::strings::AString))
    accept class <em>Substring</em> as a parameter (Well, C++ Version of AString accepts just
    anything that smells like a string in its TMP-based constructor!)

- A sort of 'global' approach to \e enumerations in ALib has been taken. Read more about that in:
  <b>Namespace 'enums'</b>
    ([C++] (@ref #aworx::lib::enums),
    [C#]  (@ref #cs::aworx::lib::enums),
    [JAVA](@ref #com::aworx::lib::enums))

- Class
  <b>ALIB</b>
  ([C++] (@ref #aworx::lib::ALIB),
   [C#]  (@ref #cs::aworx::lib::ALIB),
   [JAVA](@ref #com::aworx::lib::ALIB))
  in its C# and Java version received a list of assertion methods, named
   - \e ALIB.WARNING,
   - \e ALIB.ERROR,
   - \e ALIB_ASSERT_WARNING, etc.

  They are in alignment with corresponding macros in the C++
  version which are named
   - \e ALIB_WARNING,
   - \e ALIB_ERROR,
   - \e ALIB_ASSERT_WARNING, etc.

- These assertions make use of classes
  <b>Report</b>
  ([C++] (@ref #aworx::lib::Report),
   [C#]  (@ref #cs::aworx::lib::Report),
   [JAVA](@ref #com::aworx::lib::Report)) and
  <b>ReportWriter</b>
  ([C++] (@ref #aworx::lib::ReportWriter),
   [C#]  (@ref #cs::aworx::lib::ReportWriter),
   [JAVA](@ref #com::aworx::lib::ReportWriter)) which replaced the former \e ErrorHandler class.


<p>
- AWorx Library learned to read <b>configuration data</b>. Providing a plug-in concept, any application
  and platform specific, existing configuration mechanism can be attached. <br>
  By default, configuration data can be generated from environment variables and command line
  parameters. In addition, a basic class for reading and writing "INI-Files" is provided for the
  case that the application using ALox (ALib) does not provide their own storage mechanism.

  See namespace
  <b>config</b>
    ([C++](@ref #aworx::lib::config),
    [C#]  (@ref #cs::aworx::lib::config),
    [JAVA](@ref #com::aworx::lib::config)) for more information.


- Fixed daylight saving bug in class Ticks (GNU/Linux, C++ version)

\~Comment ############### ALox ################ \~

<b> Changes in ALox </b>

- ALox learned to <b>colorize log lines</b>. Depending on programming language and platform,
  different new loggers are provided (e.g. ANSI escape sequences and native windows console coloring).

- Combining the aforementioned configuration capabilities and the colorful log output, ALox learned
  to <b>detect and choose the right debug console logger</b> automatically, respectively use configuration
  hints and settings to do so.
  See new method
  <b>Log::CreateConsoleLogger</b>
  ([C++] (@ref #aworx::lox::Lox::CreateConsoleLogger),
   [C#]  (@ref #cs::aworx::lox::Lox::CreateConsoleLogger),
   [JAVA](@ref #com::aworx::lox::Lox::createConsoleLogger))
  for further information.<br>
  For debug logging, method
  <b>Log::AddDebugLogger</b>
  ([C++] (@ref #aworx::lox::Log::AddDebugLogger),
   [C#]  (@ref #cs::aworx::lox::Log::AddDebugLogger),
   [JAVA](@ref #com::aworx::lox::Log::addDebugLogger))
  may be used which also reflects some IDE specifics. There is more to come here in the future.

  Furthermore, the (automatically increased) tab positions of the debug logger created in
  <b>Log::AddDebugLogger</b>
  ([C++] (@ref #aworx::lox::Log::AddDebugLogger),
   [C#]  (@ref #cs::aworx::lox::Log::AddDebugLogger),
   [JAVA](@ref #com::aworx::lox::Log::addDebugLogger)),
  are stored in the configuration (as soon as a
  <b>ConfigurationPlugIn</b>
    ([C++](@ref #aworx::lib::config::ConfigurationPlugIn),
    [C#]  (@ref #cs::aworx::lib::config::ConfigurationPlugIn),
    [JAVA](@ref #com::aworx::lib::config::ConfigurationPlugIn)) is provided that is capable of
  storing configuration data, e.g. one of type class
  <b>IniFile</b>
    ([C++](@ref #aworx::lib::config::IniFile),
    [C#]  (@ref #cs::aworx::lib::config::IniFile),
    [JAVA](@ref #com::aworx::lib::config::IniFile)) ) and this way survive the lifetime of a
  process.

- Added IDE specific loggers for Visual Studio (C++/C#) and MonoDevelop (C#).

- Removed optional parameter \p InternalDomainLevel from method \b Lox.AddLogger.
  It was OK to have it but caused a lot of confusion users. Instead, the method now checks if
  the internal domain level was set before and if not, sets it to \b DomainLevel.ErrorsAndWarnings.


- Renamed method \b Lox.SetDisabled to \b Lox.SetLogger.

- Renamed method \b Lox.RegDomain to \b Lox.SetDomain (which existed before, therefore these are now
  overloaded methods).<br> Background: with increasing \e tolerance of ALox against non- or
  partly-configured logging, the concept of "registering" a domain becomes an internal thing.
  On the same token, logging to an unregistered domain is now an internal log message on
  level \e Info, not \e Warning.

- Added public interface to class \b Logger to set a domain level, independent from using a \b Lox.
  This was already possible before, but now got put into a convenient method which registers the
  domain. For more information on here to use that, refer to
  <b>tutorials</b>
    ([C++](@ref cpptutorial),
    [C#]  (@ref cstutorial),
    [JAVA](@ref javatutorial)) ) and chapter
  \ref man_levelsanddomains in the ALox user manual.

- Renamed internal class \b LogDomain to \b Domain. Similar as with aforementioned tendency to
  tolerance, also its interface changed in a way that any search for an unknown domain now creates
  it, as finally all code instances that searched a domain created one when not available.

- C# compilation symbols<br>
  <b>Important:</b> C# compilation symbols changed to align with the C++ version of ALox.
  Existing project settings need to be changed to reflect the new symbol naming and use.
  See \ref csmacros for more information.

\~Comment ############### ALib minor ################ \~

<p>
- Other, minor things in ALox (not a complete list):
    - New format symbol 'Cf' in MetaInfo. Writes source file name excluding
      the path name (C++ and C# versions)

    - Fixed caller information handling in C++ version. Nested log calls will now all show
      caller information of the first log call invoked. (Nested log calls appear for example
      if an assertion is thrown during the assembly of a log message.)

    - Moved class
      <b>TextLogger</b>
      ([C++] (@ref #aworx::lox::core::textlogger::TextLogger),
       [C#]  (@ref #cs::aworx::lox::core::textlogger::TextLogger),
       [JAVA](@ref #com::aworx::lox::core::textlogger::TextLogger)) and its helpers into an
       own namespace. Also introduced abstract class
      <b>PlainTextLogger</b>
      ([C++] (@ref #aworx::lox::core::textlogger::PlainTextLogger),
       [C#]  (@ref #cs::aworx::lox::core::textlogger::PlainTextLogger),
       [JAVA](@ref #com::aworx::lox::core::textlogger::PlainTextLogger)) which filters out
       color and other format information for log destinations that can not make use of it.
       This is now parent of e.g. \b MemoryLogger, \b TextFileLoger and the (plain) \b ConsoleLogger.

    - Renamed field <em>Buffer</em> of class
      <b>MemoryLogger</b>
      ([C++] (@ref #aworx::lox::loggers::MemoryLogger),
       [C#]  (@ref #cs::aworx::lox::loggers::MemoryLogger),
       [JAVA](@ref #com::aworx::lox::loggers::MemoryLogger)) to <em>MemoryLog</em>.

    - Cleaned internal ALox log messages.

    - Various improvements and corrections of the documentation. Updated tutorials and
      project setup documentations.

    - A few more samples were added to the ALoxSamples project (which was also renamed).

    - Proguard 5.2 (January 2015) release tested and updated configuration files to reflect
      changed namespaces. Also added GNU/Linux bash script samples for pruning with Proguard.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.2.0  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.2.0, released June 2nd, 2015 ##

- ALox for C++ has arrived! Key features of this first version are:
    - Feature complete in respect to current C# and Java versions of ALox
    - GNU/Linux (gcc) and Windows (Microsoft Compiler) support
    - C++ 11 code standards. (Does not compile with C++ compilers prior to C++ 11)
    - CMake build system support
    - QTCreator build system
    - Visual Studio project files

- Changes in C# and JAVA versions:
    - Due to the alignment with the new C++ code base many changes occurred. Only the most important
      ones are listed here.
    - Reorganization of directory structure of source code and project/build files.
    - A huge list of changes occurred ALIB classes of both languages,
        - Many corrections/improvements in class MString, which was in addition renamed to AString
        - Interface changes in Ticker and TickTime utility classes.
          Ticker was moved to Ticks, TickTime is now named TickWatch and both classes changed
          tremendously. Class TickSpan introduced in JAVA (while C# relies to built-in class).
    - Consumable source path prefix feature moved from class Lox to class TextLogger

- Changes in ALox for C#:
    - Mono support and MonoDevelop project files
    - Support for Windows Phone 8.1 was added
    - Support for Windows Phone 7.1 was "officially" dropped. However, it should still work
    - Unit tests were removed from the Windows Phone projects configurations. We did not find
      a maintainer for this.

- Changes in ALox for Java:
    - Transitioned Eclipse support from Kepler to Luna
    - Proguard 5.2 (January 2015) release tested

- Various fixes in the documentation.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.1.2  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.1.2, released March 4th, 2015 ##
- Various fixes in the documentation.
- Android fix fo LogCat output.
- C# Version: Support for Mono and MonoDevelop. This means, corresponding ide files (MonoDevelop)
  have been set up and Unit Testing now supports VStudio and NUnit Test
- Outlook: A C++ Version is currently in development and to be released in Q2 2015


## Version 1.1.1, released November 26th, 2013 ##
- Added a first, simplistic file logger. This is really just a first shot, not optimized in any
  respect. This is due to be extended in next versions.
- Created an own source folder for tools and moved class [LogTools](@ref #cs::aworx::lox::tools::LogTools)
  there.
- C# Version: Improvement of [LogTools.Instance](@ref #cs::aworx::lox::tools::LogTools::Instance) to be
  able to handle members of type KeyValuePair<,>, which are considered a value type in C#.
- C# Version: In the tool section, added a simple generic JSON file reader which in combination with
  [LogTools.Instance](@ref #cs::aworx::lox::tools::LogTools::Instance) provides very easy simplistic
  JSON handling (good for quick and dirty exploration of JSON data).


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.1.0  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.1.0, released July 31st, 2013 ##
- First ALox for Java Release!
  100% Feature complete (as compared to actual C# Version).

- ALox for Java includes an LogCat logger for Android. This enables LogCat filtering and double-click
  support (jump to code line)

- Doxygen documentation now builds three different sites: Main, C# and Java. With a little doxygen
  manipulation, these three sites nicely integrate into each other, without much of a "media break".

- Added tutorials and sample projects on how to configure pruning for C# (incl. Windows Phone) and
  Java (incl. Android).<br>
  Attn: The project folders and project names changed. So after doing a
  checkout, you have to fix your VStudio solution.<br>
  For C#, see [Setting Up Visual Studio](cs_ref/setup_projects_vs_cs.html) <br>
  For Java, see [Setup your IDE for Java Projects](java_ref/setup_projects_java.html)

- Slightly different namespace (C#), respectively package (Java) structure:
  - class [Lox](@ref cs::aworx::lox::Lox) moved one package "up" from *com.aworx.lox.core* to *com.aworx.lox*
  - classes
    [MemoryLogger](@ref cs::aworx::lox::loggers::MemoryLogger) and
    [ConsoleLogger](@ref cs::aworx::lox::loggers::ConsoleLogger)
    moved to a new package from *com.aworx.lox.loggers*
    This new packages is to be filled over time with new Logger types. Class
    [TextLogger](@ref cs::aworx::lox::core::textlogger::TextLogger) however, was kept in package *com.aworx.lox.core*
    as this class is an abstract foundation class for current and future text based loggers.

- Class [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger) was completely redesigned to be more configurable
  and extensible. For a complete description, see new manual chapter \ref man_loggers.

- Added a AString singleton to classes
  [Log](@ref #cs::aworx::lox::Log) and
  [Lox](@ref #cs::aworx::lox::Lox) that can be acquired using
  [Log.Buf()](@ref #cs::aworx::lox::Lox::Buf) respectively
  [Lox.Buf()](@ref #cs::aworx::lox::Lox::Buf) and is automatically released when contents gets logged. See
  new tutorial section \ref tutcs_more_logbuf.

- C# class [ThreadLock](@ref cs::aworx::lib::threads::ThreadLock) corrected method names to follow "upper camel case".

- A very lot of small changes and improvements. Reviewed and extended tutorials and user manual with new chapters.

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.4  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.4, released June 24th, 2013 ##
- Java Version (including Android LogCat support) is **on its way**. It is almost "feature complete", but not in a
  state of being released, yet. Stay tuned!
- Two manual chapters written.
- Various internal improvements of speed and code consistency.
- Changed the type of parameter "msg" in all logging methods of classes Log, Lox and Logger from String (or AString)
  to Object. Only TextLogger will then identify different string-types (e.g. String, StringBuilder, StringBuffer,
  AString, CharSequence, etc.) and handle them efficiently. Unknown types are converted using their ToString() function.
  Other Loggers might treat them differently. This should not affect your code base in respect to using the standard logging
  interface.
- Introduced the new enumeration [Log.Scope](@ref #cs::aworx::lox::Log::Scope). The scope is used by different
  methods as a parameter to define the applicable scope of a command. Scopes differ in different platform/languages
  supported by ALox. In C# the scope can be "Method" or "SourceFile" while in the upcoming Java version of ALox
  the scope "Package", "Class" and "Method" are defined.
  The difference is due to different mechanisms to automatically collect caller information.

  Attn C# users: If within one source file two or more classes with equal same method names exist, then such
  method names share the same scope and hence are ambiguous. This is due to technical restrictions
  of how caller information is collected in C#/.Net.

  The methods affected in this release are:
  - [Log.GetMarker](@ref #cs::aworx::lox::Log::GetMarker),
  - [Log.SetMarker](@ref #cs::aworx::lox::Log::SetMarker), and
  - \b Log.RegDomain.

  For the latter, the optional parameter "setAsDefault" was replaced by the scope and is not optional, but explicit now.
  For registering a Domain without setting it as the default domain, the Scope value
  [Log.Scope.None](@ref #cs::aworx::lox::Log::Scope) has to be given.

- Parameter list of abstract function [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger::doTextLog) got extended.
  Needs adaption if you derived your own TextLogger class.
- Removed one and renamed two of the output control flags in [Logger](@ref #cs::aworx::lox::core::Logger). If you
  used them, you will have to make small code changes.
- Small changes in [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger) format strings for date and time of day.
- Renamed com.aworx.MutableString to MString. Several new methods
  added. (No impact on API)


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.3  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.3, released May 27th, 2013 ##
- added Windows Phone 7.1 compatibility (Windows Phone 8, was already supported)
- minor bug fixes in code and documentation
- renamed methods *Log.LOG()*, *Lox.log()* and *Logger.Log()* to
   [Log.Line()]   (@ref #cs::aworx::lox::Log::Line),
   [Lox.Line()]   (@ref #cs::aworx::lox::Lox::Line) and
   [Logger.Line()](@ref #cs::aworx::lox::core::Logger::Line). The reason may be obvious. The reasons
  why they had been named as they were before, is maybe not too obvious. Some name conflicts where
  confusing. Now, all confusion should be gone!

  Note: If you had used these methods, you have to rename them in your code accordingly.

- Enums *Level* and *DomainLevel* stop existing several times in different namespaces. Their place
  is now in class Log, hence [Log.Level]  (@ref #cs::aworx::lox::Log::Level) and [Log.DomainLevel]  (@ref #cs::aworx::lox::Log::DomainLevel)

  *Note for those who are interested:*  This was OK before and supported separation and avoided cyclic
  package references. However, with implementing the Java version, having multiple versions caused problems
  (Java does not support casting enum to int or enum A to enum B). While we are aware that *class Log* is not the
  right place in terms of code design (Logger and Lox should not *know* Log but now they use its enums heavily), but the
  alternatives to that would have led to either ugly calls in the *user code* or expensive enum conversion operations in
  the Java version of ALox. And both is what we wanted less than as it is now.

  For all standard use of ALox (through static Log interface *Log*) this change has no impact on your code.

- Added further AWorx util classes, to support code compatibility between Java and C# (Java version of ALox development is
  ongoing but not part of this release

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.2  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.2, released May 21st, 2013 ##

- Fixed list of minor bugs

- Some improvements in formatted output of class [LogTools](@ref #cs::aworx::lox::tools::LogTools)

- Improvements in formatted output of method [Log.LogConfig()](@ref #cs::aworx::lox::Log::LogConfig)

- Added more options to manipulate multi line message logging with [TextLogger](@ref #cs::aworx::lox::core::textlogger::TextLogger)

- Added more unit tests

- Completed the tutorial section of the user manual (if such thing can ever be complete)

- Started first "in depth" sections of the user manual


 **The following are changes that need modifications in your code:**

- Renamed conditional compiler symbol **AWORX_LOG** to **ALOX_DEBUG**

- Renamed the namespaces from having prefix "com.aworx.log" to "com.aworx.lox"

- Renamed all symbols in enum
  [Log.DomainLevel](@ref #cs::aworx::lox::Log::DomainLevel) and enum
  [Log.Level](@ref #cs::aworx::lox::Log::Level) from *"upper case with underscores"*  to *"upper camel case"*, for
  consistency with C# standards.

- Renamed
  - **Log.CreateDomain()** to \b Log.RegDomain and
    on the same token renamed:
  - **Log.SetDomainLogLevel()** to [Log.SetDomain()](@ref #cs::aworx::lox::Log::SetDomain )

  This was done to emphasize the fact that both functions create a domain if it does not exist
  yet and it is not important in which order they are called.

- Removed method **Log.SetDefaultDomain()**. Use \b Log.RegDomain

- Added new Parameter **internalDomainLevel** added to method [Log.AddLogger()](@ref #cs::aworx::lox::Log::AddLogger )

  *Note: You do not need to change your source code, because the new parameter has a default value. However, you might
  want to look at the documentation to understand the concept and use this parameter rightfully.*

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.1  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.1, released May 17th, 2013 ##

First stable release deployed to brave volunteers.

*/
