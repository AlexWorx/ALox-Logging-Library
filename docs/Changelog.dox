// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page changelog         Change Log

Historically, there existed a kind of predecessor of this library for C++ and Java and was
more or less maintained since the year 1999. However this is a complete rewrite with C++, Java
and C# implementations.<br>
The first version released was V. 1.0.1 in **May 2013**.

This change log is sorted reversely in respect to chronology.

\note
  Changes of the C++ version of \alib / \alox are listed in the
  \ref alib_changelog "Change Log Of The ALib For C++  project".
<p>

\note
  Changes in the C# and Java versions of \alib / \alox may sometimes not justify a change of
  version. However, if the version number still changed, then this is due to changes in the
  [C++ version](https://alexworx.github.io/ALib-Class-Library/index.html)
  which then have more impact.


\~Comment ####################################################################################### \~
\~Comment #############################       V. 1903 R0     #################################### \~
\~Comment ####################################################################################### \~

# Version 1903, Revision 0, released March 16th, 2019 #

<b>Changes in ALib:</b><br>
- Added field \cj_aworx{lib,ALIB.MainThreadID,ALIB.mainThreadID,ALIB.MainThreadID}.

- Overhauled class \ccj_aworx{lib::strings::util,AutoSizes} to faster adjust to recent session length.
  I.e. the class now distinguishes tab stop positions from field widths and is able to
  "consolidate" the actual values with the currently measured ones.
  See the classes' documentation for more information (the changes are not listed completely here).

- Renamed field \b FormatterPythonStyleBase::AutoSizes to \b FormatterPythonStyle::Sizes}
  and changed its access level from protected to public.

- Changed access level of field
  from protected to public (and capitalized the first letter of its name in C++ and C# version).


<b>Changes in ALox:</b><br>

- Refactored name of sub-namespace <b>core</b> in namespace <b>aworx.lib.lox</b> to \ccj_alox{detail}.

- Fixed a bug with \ccj_alox{Lox::SetVerbosity,Lox::setVerbosity,Lox::SetVerbosity}
  which prevented the verbosity to be set, in the case that the given logger was not registered with
  that \b Lox before and a resourced verbosity value with the same priority existed.

- With construction of class \ccj_alox{Lox}, a default thread dictionary entry is added, which
  maps the ID of the main thread to the name <em>"PROCESS"</em>.<br>
  In C#/Java, the ID is received with new field \cj_aworx{lib,ALIB.MainThreadID,ALIB.mainThreadID,ALIB.MainThreadID},
  in C++ with new method \ref aworx::lib::threads::Thread::GetMain "Thread::GetMain".<br>
  On the same token, an internal redundancy in respect to this thread ID to name translation map
  was fixed.

- Added abstract methods
  \ccj_alox{detail::textlogger,ObjectConverter::GetAutoSizes,ObjectConverter::getAutoSizes,ObjectConverter::GetAutoSizes} and
  \ccj_alox{detail::textlogger,ObjectConverter::ResetAutoSizes,ObjectConverter::resetAutoSizes,ObjectConverter::ResetAutoSizes}
  and along with this implementations
  \ccj_alox{detail::textlogger,StandardConverter::GetAutoSizes,StandardConverter::getAutoSizes,StandardConverter::GetAutoSizes} and
  \ccj_alox{detail::textlogger,StandardConverter::ResetAutoSizes,StandardConverter::resetAutoSizes,StandardConverter::ResetAutoSizes}.

- \ref GrpALoxConfigVars "Configuration variable" \b ALOX_LOGGERNAME_AUTO_SIZES now stores
  the auto sizes values of the log output formatter in addition to those of the meta information.
  The values have a new format (see above) and the export data of each object is separated by a semicolon.

- Changed behaviour of class
  \ccj_alox{detail::textlogger,MetaInfo} to not write escape sequences for auto-tabulator tokens
  found in the format string, but to write spaces instead. With this, some smaller changes in
  the method signatures of the class occurred. The goal here was to have a more accurately formatted
  log-output in combination with overhauled class \b %AutoSizes.



\~Comment ####################################################################################### \~
\~Comment #############################       V. 1805 R0     #################################### \~
\~Comment ####################################################################################### \~

# Version 1805, Revision 0, released July 29th, 2018 #

#### IMPORTANT INFORMATION: New C++ Fork Of ALib: ####

\par
  The C++ part of this multi-language project has been forked to [ALib Class Library](http://alexworx.github.io/ALib-Class-Library/).
  The goal and consequences of this effort are:
  - Have a repository and website exclusively dedicated to <b>%ALib for C++</b>.
  - Reverse the library nesting in the C++ Version: \alib here is now the main project, while
    \alox becomes one of several \ref alib_manual_modules_overview "ALib Modules".
  - Decouple the development and roadmaps of future \alib modules from <c>Java</c> and <c>C#</c>
    language versions of \alib/\alox.

The changes performed with this release exclusively concern the C++ version and are
documented in the new project's \ref alib_changelog "changelog".

\~Comment ####################################################################################### \~
\~Comment #############################       V. 1712 R1     #################################### \~
\~Comment ####################################################################################### \~

## Version 1712, Revision 1, released February 28th, 2018 ##
This is a bug fixing revision, almost exclusively concentrating on C++ version.

<b>Changes in ALib all languages:</b><br>
- Changed behaviour of externalization/internalization of config variable strings to be more
  intuitive for end users. (Class ccj_aworx{lib::config,Xternalizer}.

<b>Changes in ALib for C++:</b><br>
- Changed CMake script \b alib.cmake to respect external settings of otherwise cached
  variables. This allows to permanently change their "default" values, by setting
  \alib CMake variables prior to invoking the script. On the same token, variable
  \b ALIB_CMAKE_COTIRE_DEFAULT has been removed, as now just \b ALIB_CMAKE_COTIRE can be set
  from outside.

- Added macros \ref ALIB_CPP14, \ref ALIB_CPP17 and \ref ALIB_CPP14_CONSTEXPR.

- It is now allowed to have an C++ enum type be define "bitwise" and "arithmetical" at the same time.
  To achieve this,
  bitwise alias operators <c>+</c> (alias for <c>|</c>) and <c>+=</c> (alias for <c>|=</c>)
  become disabled to avoid ambiguities with those operators introduced with arithmetical enum types.

  Furthermore, the following operators have been added for arithmetical enums:
  - <c>++</c>, <c>\-\-</c> (prefix and postfix version).
  - <c>unary +</c>, <c>unary -</c>
  - <c>*</c>, <c>*=</c>, <c>/</c>, <c>/=</c>, <c>\%</c>, <c>\%=</c>
  - <c>\<\<</c>, <c>\<\<=</c>, <c>\>\></c>, <c>\>\>=</c>

  Finally fixed the documentation of various operators and even a list of \e lhs arguments that
  accidentally had been passed as reference are now correctly passed by value.

- Fixed a bug with loading resourced enum meta data for enumerations declared with
  \b ALIB_LANG_ENUM_NAMED and \b ALIB_LANG_RESOURCED.

- Changed behavior of method \b Exception::Code. It now skips entries with
  negative exception enum element values. This allow to declare pure informational entries, not
  to be caught bei exception handlers, by giving them a negative enum element value.
  See documentation of class \b Exception for further details.

- Added enum class \b Exceptions defining currently one exception, which is thrown
  with erroneous ALib reports. (Usually format string errors).

- Fixed an infinitive loop in method \b AString::SearchAndReplace.
- Added operator methods <c><=</c> and <c>>=</c> to \b Strings for completeness.

- Added new class \b WildcardMatcher which compiles wildcard patterns
  (using wildcards \c '*' and \c '?') and enables to match strings against the pattern.

- Added new class \b RegexMatcher which compiles regular expression patterns
  using external [boost::regex library](http://www.boost.org).<br>
  New compiler symbols \ref ALIB_FEAT_BOOST_REGEX_ON / \ref ALIB_FEAT_BOOST_REGEX_OFF control
  the integration of this feature to \alib. Corresponding CMake variable
  ALIB_FEAT_BOOST_REGEX was added.

- As an alternative to already existing \b UnorderedStringMap, new type
  \b UnorderedStringMapIgnoreCase was added that uses case insensitive string keys.
  Furthermore types \b UnorderedAStringMap and \b UnorderedAStringMapIgnoreCase have been added,
  which hold an allocated copy of a key string.

- Fixed description resource string of \b Exceptions::ArgumentIndexOutOfBounds.

- Changed parameter type of method \b MemoryBlocks::Clear from bool to
  \b lang,CurrentData.


- Changed accessibility of inner class \b PluginContainer::Slot from protected to
  public to allow a plug-in container to pass its list of plug-ins to helper classes.

- Default constructor of \b Box is now trivial and therefore leaves boxes
  uninitialized. Before, the default constructor initialized a nulled box, same as <c>Box(nullptr)</c>.<br>
  Furthermore added explicitly defaulted copy and move constructors as well as copy and move
  assign operators.

- Added method \cpp_alib{boxing,Box::IsNotNull} for completeness.

- Added templated implementation \b IEquals_TComparable of boxing interface
  \b IEquals usable for all types that defined C++ <c>operator==</c>.
  In addition added corresponding convenience macro \b ALIB_BOXING_DEFINE_IEQUALS_FOR_COMPARABLE_TYPE.

- Added boxing interface \b IIsTrue.

- Added type definition \ref aworx::UnorderedBoxMap which uses new functors
  \b  std_Hash and \b std_Equals to with a <c>std::unordered_map</c>
  with keys of type \b %Box.

- Fixed missing deletion of report writer in \b Lang.terminationCleanUp.

- Moved internal type definition \b %aworx::lib::lang::RTTIUnorderedMap to \b aworx::TypeMap.

- Added field \b SimpleTextBase::DetectedMaxLineWidth.

- Changed parameter of method \b StringTable::Clear from type \c bool to
  more readable \b CurrentData.

- Fixed conversion <c>!ATab</c> and <c>!AWidth</c> of class \b FormatterPythonStyle in respect to
  multi-line strings.
  Furthermore, <c>!ATab</c> does not insert one minimum space character any more (which it was
  never documented to do).

- Fixed a (serious) bug in \b NumberFormatBase::WriteFloat, which could cause wrong
  results when fractional parts unlimited length were written.
- Changed method \b NumberFormatBase::ParseFloat to accept scientific separator
  on integral numbers (without parsing a decimal point).

- Resourced static strings \c "true" and \c "false" written when boolean values are applied
  to type \b %AString.

- Added classes
  \b TimeStamp,
  \b TimeSpan,
  \b CalendarTime and
  \b StopWatch.
  These classes are supposed to replace classes
  \cpp_alib{time,Ticks},
  \b TicksCalendarTime and
  \b TickWatch in the next release version (which are therefore to be considered deprecated).

- Added
  \b Ticks::operator+,
  \b Ticks::operator-,
  \b Ticks::operator+=,
  \b Ticks::operator-=,
  \b Ticks::operator==,
  \b Ticks::operator!=,
  \b Ticks::operator<,
  \b Ticks::operator<=,
  \b Ticks::operator>,
  \b Ticks::operator>= and
  \b SetToAge. Furthermore added boxing/unboxing of \b Ticks by value.

- Added macro \ref ALIB_WARNINGS_ALLOW_SPARSE_ENUM_SWITCH.

<b>Changes in ALox for C++:</b><br>
- Slightly changed meanings of parameters \p domainPrefix and \p logPrefix of method
  \b LogTools::Exception


\~Comment ####################################################################################### \~
\~Comment #############################       V. 1712        #################################### \~
\~Comment ####################################################################################### \~

## Version 1712, Revision 0, released December 22nd, 2017 ##

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git version.


\~Comment ####################################################################################### \~
\~Comment #############################       V. 1709        #################################### \~
\~Comment ####################################################################################### \~

## Version 1709, Revision 0, released September 13th, 2017 ##

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git version.


\~Comment ####################################################################################### \~
\~Comment #############################       V. 1702 R1     #################################### \~
\~Comment ####################################################################################### \~

## Version 1702, Revision 1, released March 9th, 2017 ##

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git version.



\~Comment ####################################################################################### \~
\~Comment #############################       V. 1702        #################################### \~
\~Comment ####################################################################################### \~


## Version 1702, Revision 0, released February 6th, 2017 ##

<b>A General Note:</b><br>
This is once more a major update of \b %ALox. And - once more - we hope that with this update
the foundation is now led to provide a stable version that will not undergo major interface changes
in the future. The good news is: For existing logging statements, the interface is still
valid and code does not need to be changed. The other good news is that the interface dramatically
improved and - if a user wants - he/she may convert existing log statements to this new interface.

The change lies in the fact that prior versions supported \b one \e "logable" (aka one arbitrary object)
to log. The new interface allows an arbitrary amount of \e logables to log.
In respect to textual logging (the normal use case), this means that in prior versions the text
to be logged needed to be assembled first and then passed to \b %ALox. Now, this assembling is
not necessary any more: All objects are concatenated inside the logger, of-course supporting now
nice format strings that tell the logger how to do this.<br>
This explains, why the interface remained compatible to the old version: The logger of-course still
accepts such single pre-assembled strings to log. However, the benefits of passing the components
of the string using a list of arguments are:

- String concatenation is performed only if needed (if a log is executed in respect to its \e Verbosity)
- Less code clutter, better readable log statements
- better Readable
- Easier to use

Now, people may wonder why this feature comes only so late!? The answer is: While in languages
\c C# and \c Java such interface is quite easy to implement (due to the approach
"everything is an object or gets automatically boxed into an object" of these languages) in \c C++
it is not: How can you pass arbitrary amounts of arbitrary objects and then process them and convert
them to strings in C++? Our answer to this is: <b>ALib Boxing</b>!

In short, <b>ALib Boxing</b> allows to create methods that accept any type of argument as parameter,
without the need of type conversion, wrapper classes, etc. Furthermore <b>ALib Boxing</b> allows to
add virtual interfaces to C++ types, independent from the original implementation of the type itself.
This means that any 3rd-party type can be adopted to support "boxing" and to provide its own
virtual interface implementations. To reach this goal, quite a bit of
[template meta programming](https://en.wikipedia.org/wiki/Template_metaprogramming)
was used and some other tricks with C++ type information facilities.

Therefore, the big effort for this release affected two areas:
- Implement C++ Boxing in underlying library \b %ALib.
- Implement formatters (we support Python style and Java style format syntax today) for
  all three languages.

We should not forget to mention that the impact on binary logging (logging of non textual objects
using custom loggers) is huge: Custom loggers in general are not compatible to the new version.
The good news is: <b>ALib Boxing</b> provides a whole new level of possibilities and ease of
use to binary loggers in general.

<b>License:</b><br>
The license was changed from "MIT License" to "Boost Software License". The Boost License is
more liberal in respect to distributions in binary format. No copyright notice has to be given
when ALib/ALox code is distributed exclusively within binary files (compiled code).

<b>Pre-configured Projects and Tools:</b><br>
- Support for
  [JetBrains CLion](https://www.jetbrains.com/clion/),
  [JetBrains IntelliJ](https://www.jetbrains.com/idea/) and
  [JetBrains Rider](https://www.jetbrains.com/rider/) added.<br>
  Special thanks goes to \e JetBrains people for <b>granting a free license</b> to support \b %ALox as
  an open source project!<br>
  ALox logging and marvellous (!) JetBrains IDEs go together very well: On all platforms and languages,
  the log output will be nicely formatted with "clickable" links back into the source code!

  Information on how to use ALox with JetBrains products is found in the setup manual pages.

- Moved to Doxygen V. 1.8.12, with some impact on ALox homepage design.

- C++ Version:
  - All code is now fully compatible with [clang](http://clang.llvm.org/) compiler.
    \b %ALox/ALib is using its maximum possible warning level for the code. The impact was huge! For example all "old style casts" have been
    removed from the code.
    Only a few single warnings need to be disabled. But those are anyhow more for analytics
    but for day-to-day use. So, we are optimistic that ALib/ALox compiles in any setting without
    warnings!
  - ALib and ALox code is now compiling under <b>Mac OSX</b>. Development of platform specific
    code sections has been made using CMake and [JetBrains CLion](https://www.jetbrains.com/clion/).
    No XCode project has been set up, yet. Help for future Mac OS support is welcome!
  - Code is now compiling and tested on 32-bit GNU/Linux OS.
  - Added [Pretty Printers for GNU Debugger](tools.html#tools_debug_helpers_gdb). However, this is not completely
    satisfying with all IDEs. The best support for pretty printing of ALox/ALib classes is still
    with IDE QTCreator.
  - Renamed CMake files \e ALib_Base.cmake and \e ALox_Base.cmake to \b ALib.cmake and \b ALox.cmake.
  - Various ALib/ALox CMake variables which had been "hardcoded" have been turned into CMake cache variables.
  - Renamed macros \b ALIB_DLL_EXPORTS and \b ALOX_DLL_EXPORTS to \b ALIB_API_IS_DLL and \b ALOX_API_IS_DLL.
    On the same token, added macros \b ALIB_API_NO_DLL and \b ALOX_API_NO_DLL.


\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..



\~Comment ####################################################################################### \~
\~Comment #############################       V. 1607        #################################### \~
\~Comment ####################################################################################### \~
## Version 1607, Revision 0, released July 23rd, 2016 ##

<b>Changes in Preconfigured Projects:</b><br>
- Eclipse Neon (4.6) support for ALox for Java. The project folder
  was renamed from

        ./build/ide.java.eclipse.luna

  to

        ./build/ide.java.eclipse

  (The Eclipse versions Luna, Mars and Neon should be compatible with the same
  project files.)

  When doing this, all compiler warnings have been switched to be even more strict
  than before. As a consequence several \c \@SuppressWarnings tags had to be added
  to the code. Make sure to have your IDE setup to not warn on unnecessary
  \c \@SuppressWarnings tags in the case your preference on warnings are less
  strict.

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1604  Revision 2 #################################### \~
\~Comment ####################################################################################### \~
## Version 1604, Revision 2, released June 20th, 2016 ##

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..



\~Comment ####################################################################################### \~
\~Comment #############################  V. 1604  Revision 1 #################################### \~
\~Comment ####################################################################################### \~
## Version 1604, Revision 1, released May 26th, 2016 ##

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1604  Revision 0 #################################### \~
\~Comment ####################################################################################### \~
## Version 1604, Revision 0, released April 19th, 2016 ##

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1602  Revision 1 #################################### \~
\~Comment ####################################################################################### \~
## Version 1602, Revision 1, released February 15th, 2016 ##
This is a revision of version 1602, with minimal impact on standard ALox user code.

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1602  ############################################### \~
\~Comment ####################################################################################### \~

\~Comment ############### ALib ################ \~

## Version 1602, Revision 0, released February 2nd, 2016 ##
<b> General changes </b><p>
This is a major update. A lot, if not all was touched. The good news is that the logging interface
itself did only change slightly for Java and C# versions. In C++ the macros were renamed because
we started using 'variadic macros' instead of 'suffixed overloads'. This makes ALox C++ even
more code-compatible to C#/Java versions.
Therefore, very simple code changes (mostly renaming) should be needed to adopt this release.

More important general changes are:

\note Details removed due to too many broken documentation links. For details checkout
      the corresponding Git release or the release's attachment on GitHub..



\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.2.0  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.2.0, released June 2nd, 2015 ##

- ALox for C++ has arrived! Key features of this first version are:
    - Feature complete in respect to current C# and Java versions of ALox
    - GNU/Linux (gcc) and Windows (Microsoft Compiler) support
    - C++ 11 code standards. (Does not compile with C++ compilers prior to C++ 11)
    - CMake build system support
    - QTCreator build system
    - Visual Studio project files

- Changes in C# and JAVA versions:
    - Due to the alignment with the new C++ code base many changes occurred. Only the most important
      ones are listed here.
    - Reorganization of directory structure of source code and project/build files.
    - A huge list of changes occurred ALIB classes of both languages,
        - Many corrections/improvements in class MString, which was in addition renamed to AString
        - Interface changes in Ticker and TickTime utility classes.
          Ticker was moved to Ticks, TickTime is now named TickWatch and both classes changed
          tremendously. Class TickSpan introduced in JAVA (while C# relies to built-in class).
    - Consumable source path prefix feature moved from class Lox to class TextLogger

- Changes in ALox for C#:
    - Mono support and MonoDevelop project files
    - Support for Windows Phone 8.1 was added
    - Support for Windows Phone 7.1 was "officially" dropped. However, it should still work
    - Unit tests were removed from the Windows Phone projects configurations. We did not find
      a maintainer for this.

- Changes in ALox for Java:
    - Transitioned Eclipse support from Kepler to Luna
    - Proguard 5.2 (January 2015) release tested

- Various fixes in the documentation.


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.1.2  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.1.2, released March 4th, 2015 ##
- Various fixes in the documentation.
- Android fix fo LogCat output.
- C# Version: Support for Mono and MonoDevelop. This means, corresponding ide files (MonoDevelop)
  have been set up and Unit Testing now supports VStudio and NUnit Test
- Outlook: A C++ Version is currently in development and to be released in Q2 2015


## Version 1.1.1, released November 26th, 2013 ##
- Added a first, simplistic file \e Logger. This is really just a first shot, not optimized in any
  respect. This is due to be extended in next versions.
- Created an own source folder for tools and moved class [LogTools](@ref #cs::aworx::lox::tools::LogTools)
  there.
- C# Version: Improvement of [LogTools.Instance](@ref #cs::aworx::lox::tools::LogTools::Instance) to be
  able to handle members of type KeyValuePair<,>, which are considered a value type in C#.
- C# Version: In the tool section, added a simple generic JSON file reader which in combination with
  [LogTools.Instance](@ref #cs::aworx::lox::tools::LogTools::Instance) provides very easy simplistic
  JSON handling (good for quick and dirty exploration of JSON data).


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.1.0  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.1.0, released July 31st, 2013 ##
- First ALox for Java Release!
  100% Feature complete (as compared to actual C# Version).

- ALox for Java includes an LogCat \e Logger for Android. This enables LogCat filtering and double-click
  support (jump to code line)

- Doxygen documentation now builds three different sites: Main, C# and Java. With a little doxygen
  manipulation, these three sites nicely integrate into each other, without much of a "media break".

- Added tutorials and sample projects on how to configure pruning for C# (incl. Windows Phone) and
  Java (incl. Android).<br>
  Attn: The project folders and project names changed. So after doing a
  checkout, you have to fix your VStudio solution.<br>
  For C#, see [Setting Up Visual Studio](cs_ref/setup_projects_vs_cs.html) <br>
  For Java, see [Setup your IDE for Java Projects](java_ref/setup_projects_java.html)

- Slightly different namespace (C#), respectively package (Java) structure:
  - class [Lox](@ref cs::aworx::lox::Lox) moved one package "up" from *com.aworx.lox.core* to *com.aworx.lox*
  - classes
    [MemoryLogger](@ref cs::aworx::lox::loggers::MemoryLogger) and
    [ConsoleLogger](@ref cs::aworx::lox::loggers::ConsoleLogger)
    moved to a new package from *com.aworx.lox.loggers*
    This new packages is to be filled over time with new \e Logger types. Class
    \b TextLogger however, was kept in package *com.aworx.lox.core*
    as this class is an abstract foundation class for current and future text based \e Loggers.

- Class \b TextLogger was completely redesigned to be more configurable
  and extensible. For a complete description, see new manual chapter \ref alox_man_ext_loggers.

- Added a AString singleton to classes
  [Log](@ref #cs::aworx::lox::Log) and
  [Lox](@ref #cs::aworx::lox::Lox) that can be acquired using
  \b Log.Buf respectively \b Lox.Buf and is automatically released when contents gets logged. See
  new tutorial section.

- C# class [ThreadLock](@ref cs::aworx::lib::threads::ThreadLock) corrected method names to follow "upper camel case".

- A very lot of small changes and improvements. Reviewed and extended tutorials and user manual with new chapters.

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.4  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.4, released June 24th, 2013 ##
- Java Version (including Android LogCat support) is **on its way**. It is almost "feature complete", but not in a
  state of being released, yet. Stay tuned!
- Two manual chapters written.
- Various internal improvements of speed and code consistency.
- Changed the type of parameter "msg" in all logging methods of classes Log, Lox and Logger from String (or AString)
  to Object. Only TextLogger will then identify different string-types (e.g. String, StringBuilder, StringBuffer,
  AString, CharSequence, etc.) and handle them efficiently. Unknown types are converted using their ToString() function.
  Other Loggers might treat them differently. This should not affect your code base in respect to using the standard logging
  interface.
- Introduced the new enumeration [Scope](@ref #cs::aworx::lox::Scope). The scope is used by different
  methods as a parameter to define the applicable scope of a command. Scopes differ in different platform/languages
  supported by ALox. In C# the scope can be "Method" or "SourceFile" while in the upcoming Java version of ALox
  the scope "Package", "Class" and "Method" are defined.
  The difference is due to different mechanisms to automatically collect scope information.

  Attn C# users: If within one source file two or more classes with equal same method names exist, then such
  method names share the same scope and hence are ambiguous. This is due to technical restrictions
  of how scope information is collected in C#/.Net.

  The methods affected in this release are:
  - \b Log.GetMarker,
  - \b Log.SetMarker, and
  - \b Log.RegDomain.

  For the latter, the optional parameter "setAsDefault" was replaced by the scope and is not optional, but explicit now.
  For registering a Domain without setting it as the Scope Domain, the Scope value
  [Scope.None](@ref #cs::aworx::lox::Scope) has to be given.

- Parameter list of abstract function \b TextLogger::logText got extended.
  Needs adaption if you derived your own TextLogger class.
- Removed one and renamed two of the output control flags in \b Logger. If you
  used them, you will have to make small code changes.
- Small changes in \b TextLogger format strings for date and time of day.
- Renamed com.aworx.MutableString to MString. Several new methods
  added. (No impact on API)


\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.3  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.3, released May 27th, 2013 ##
- added Windows Phone 7.1 compatibility (Windows Phone 8, was already supported)
- minor bug fixes in code and documentation
- renamed methods *Log.LOG()*, *Lox.log()* and *Logger.Log()* to *Logger.Line()*.
  The reasons why they had been named as they were before, is maybe not too obvious.
  Some name conflicts where  confusing. Now, all confusion should be gone!

  Note: If you had used these methods, you have to rename them in your code accordingly.

- Enums *Level* and *DomainLevel* stop existing several times in different namespaces. Their place
  is now in class Log, hence \b Level and \b Verbosity.

  *Note for those who are interested:*  This was OK before and supported separation and avoided cyclic
  package references. However, with implementing the Java version, having multiple versions caused problems
  (Java does not support casting enum to int or enum A to enum B). While we are aware that *class Log* is not the
  right place in terms of code design (Logger and Lox should not *know* Log but now they use its enums heavily), but the
  alternatives to that would have led to either ugly calls in the *user code* or expensive enum conversion operations in
  the Java version of ALox. And both is what we wanted less than as it is now.

  For all standard use of ALox (through static Log interface *Log*) this change has no impact on your code.

- Added further AWorx util classes, to support code compatibility between Java and C# (Java version of ALox development is
  ongoing but not part of this release

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.2  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.2, released May 21st, 2013 ##

- Fixed list of minor bugs

- Some improvements in formatted output of class [LogTools](@ref #cs::aworx::lox::tools::LogTools)

- Improvements in formatted output of method \b Log.LogConfig.

- Added more options to manipulate multi line message logging with \b TextLogger

- Added more unit tests

- Completed the tutorial section of the user manual (if such thing can ever be complete)

- Started first "in depth" sections of the user manual


 **The following are changes that need modifications in your code:**

- Renamed conditional compiler symbol **AWORX_LOG** to **ALOX_DEBUG**

- Renamed the namespaces from having prefix "com.aworx.log" to "com.aworx.lox"

- Renamed all symbols in enum \b Verbosity and enum \b Level from *"upper case with underscores"*
  to *"upper camel case"*, for consistency with C# standards.

- Renamed
  - **Log.CreateDomain()** to \b Log.RegDomain and
    on the same token renamed:
  - **Log.SetDomainLogLevel()** to \b Log.SetDomain()

  This was done to emphasize the fact that both functions create a domain if it does not exist
  yet and it is not important in which order they are called.

- Removed method **Log.SetDomain()**. Use \b Log.RegDomain

- Added new Parameter \p internalDomainLevel added to method \b Log.AddLogger().

  *Note: You do not need to change your source code, because the new parameter has a default value. However, you might
  want to look at the documentation to understand the concept and use this parameter rightfully.*

\~Comment ####################################################################################### \~
\~Comment #############################  V. 1.0.1  ############################################## \~
\~Comment ####################################################################################### \~

## Version 1.0.1, released May 17th, 2013 ##

First stable release deployed to brave volunteers.


*/
