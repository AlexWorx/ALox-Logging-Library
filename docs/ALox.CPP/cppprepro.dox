// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2019 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

####################################################################################################
### Page alox_cpp_prepro
####################################################################################################

/**
\page alox_cpp_prepro    ALox and the C++ Preprocessor


This \alib module adheres to the same \ref alib_ref_prepro "voluntary separation of preprocessor macros"
as all other modules of the library do.

A general overview on \alib's use of the preprocessor is given  \ref alib_ref_prepro "here".


## ALox Macros ##

\alox for C++ makes extensive use of preprocessor macros.

The code selection mainly achieves:

- **Pruning of log code**<br>
Using the logging macros provided, allows to selectively remove all \e <em>debug logging</em> or
<em>release logging</em> invocations from the code. (For an explanation of the concept of
'\e pruning', see [What is Pruning?](../faq.html#faq_pruning).)<br>
To configure logging (e.g. create certain loggers, configure the log output, etc.) the macro
#Log_Prune and #Lox_Prune are provided (which are empty, hence remove all enclosed code on request).

<p>

- **Adding scope information**<br>
\alox uses built-in standard preprocessor symbols like  "__FILE__" and "__LINE__" to provide
information about the position of logging statement within the source. Especially for release
logging, one problematic fact is that such logging source information could disclose internals
if the release software unit was reverse engineered. Therefore, the use of source information
is configurable and disabled by default.<br>
Also, hiding the use of the built-in symbols by using dedicated \alox macros, reliefs the
source code from a lot of clutter and overhead.

<p>
\note
Other language implementations of \alox (<em>%ALox for C#</em> and <em>%ALox for Java</em>) implement
pruning with different, language specific mechanisms. In C++, by providing not only a set
of macros to implement debug logging, but also one for release logging, one of the differences
to such other \alox implementations is, that this allows to prune <em>release logging</em> from the code
the same as to prune <em>debug logging</em>. This extra flexibility is not provided with the other
implementations by default, but might be achieved by adding language specific extensions by
the user of the libraries.<br>
It might be important to understand the difference: When release
logging is just \e disabled, the code for release logging still remains in the binaries,
which has an impact on their size and an (probably marginal) impact on their speed.
In addition it is possibility to reverse engineer such binaries and learn about internals of the
software (should someone do so).<br>
In this respect, \alox for C++ is the most flexible implementation of \alox as two different release
builds are possible: such with release logging incorporated and such with release logging pruned.<p>

The macros and their documentation are divided into two different groups:<br>

- ALox Macros For Debug Logging
- ALox Macros For Release Logging

Documentation for those are found in the corresponding subsections of the
\ref GrpALibMacros "macro reference pages" of the \alib project website.

While all macros for debug logging start with the prefix <b>Log_</b>, those for release
logging are using the prefix <b>Lox_</b>. Otherwise, their naming and parameters are the
same.<br>
The rest of the macro names in most cases corresponds to methods found in class
\ref aworx::lib::lox::Lox "Lox".<p>

\note
This naming convention provides maximum source compatibility to \alox for C# and \alox for Java,
in which debug logging and its pruning is performed using a "mirror" class of class
\b Lox which is called \e Log.

Both macro sets include macro #Log_Prune, respectively #Lox_Prune.
All that these two macros do is pruning the code that is passed to them in the moment that
debug logging (respectively release logging) is supposed to be pruned.<p>

For an introduction of how to use these macros, see \ref alox_cpp_tutorial.

*/

