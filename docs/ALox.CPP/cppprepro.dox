// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2017 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

####################################################################################################
### Page cppprepro
####################################################################################################

/**
\page cppprepro    ALox and the C++ Preprocessor

\tableofcontents

# 1. Reference Guide #
This is a reference list to the preprocessor symbols discussed in the following sections:

\ref cppprepro_compsymbols            "1. Compilation Symbols"
- \ref GrpALibCompilerSymbols
- \ref GrpALoxCompilerSymbols

\ref cppprepro_code_selection_symbols "2. Code Selection Symbols"
- \ref GrpALibCodeSelectorSymbols
- \ref GrpALoxCodeSelectorSymbols

\ref cppprepro_macros                 "3. C++ Macros"
- \ref GrpALibMacros
- \ref GrpALoxMacrosLowLevel
- \ref GrpMacrosDebugLog
- \ref GrpMacrosReleaseLog


# 2. Introduction  # {#cppprepro_intro}
## 2.1. Structure of ALox Preprocessor Usage ## {#cppprepro_intro1}
Generally, the (mis-)use of the C/C++ preprocessor can lead to confusion and hard to understand
compile time errors. For all softwares, it is advisable to restrict the use of the preprocessor
facilities of C++ to achieve the following:
- Provide project specific configuration information to the compiler using the compilers' options
to pass symbol definitions to the compile process from 'outside' (from the make process).
- Select different versions of the code dependent on the platform
- Select different versions of the code dependent on the type of \e 'build' that is to be achieved
(e.g. debug or release builds, builds that enable/disable certain features, builds designed
for maximizing performance or minimizing code size, etc.)

ALox (as well as its underlying utility library \e ALib) volunteers to adhere to a strict
separation of what we call
<em>Compilation Symbols</em>, <em>Code Selection Symbols</em> and <em>Macros</em>
in respect to naming and documentation:<br>
1. <b>Compilation Symbols:</b>
These are variables that can be passed to the compiler (usually using the -D option)

2. <b>Code Selection Symbols:</b>
These are preprocessor variables that are used for conditional compilation. Mostly their
existence is derived from compilation symbols.

3. <b>Macros:</b>
Finally, we are calling those preprocessor symbols, that stand for (and get replaced by) a
piece of C++ code a \e Macro.

All \e macros introduced by ALib/ALox perform a conditional compilation by having different
definitions depending on some code selection symbol. They are introduced for the sake of avoiding
the use of <em>\#if / \#endif </em> statements around code lines.

Consequently, for all important methods of ALox classes to implement logging a preprocessor macro
exists, because
- debug logging is deemed to be \e pruned in release builds
- release logging can be configured using <em>compilation symbols</em> (e.g. to incorporate
scope information in the release build or not.

\note In other words: While ALox logging is incorporated into the users' code mostly using
preprocessor macros, this is still <b> conforming to modern C++ programming style</b>,
because all macros are introduced for one reason: to select different C++ code depending on
the type of build that compiled (which can not be achieved differently).


## 1.2. Preprocessor symbols introduced by ALib## {#cppprepro_intro2}
ALox for C++ builds on
\ref aworx::lib "A-Worx Library" (aka \e ALib) which provides classes that are not related to logging
but are general purpose utility classes. To keep things simple, ALib is not compiled into a
separated library but included in source into ALox.  ALib sources neither refer to any ALox sources
nor do they depend on ALox compilation symbols. The other way round, is different: The same
as ALox makes use of ALib sources, ALox makes use of ALib preprocessor symbols (and so may any
other code that uses Alox).

Consequently, some of the preprocessor symbols documented here are originating from ALib.

# 3. Compilation Symbols #  {#cppprepro_compsymbols}
As stated above, ALox volunteers to separate everything that is related to the C++ preprocessor
into three different categories. This section is about symbols that can be passed to the compiler.<p>

<b>Naming</b><br>
Many of the symbols are named using suffixex <em>_ON</em> or <em>_OFF</em> what indicates
that they can be used to switch a code selection symbol (see next sections) which is named
the same but excluding the suffix. As a sample, the <em>compilation symbols</em>
\ref ALOX_DBG_LOG_ON and \ref ALOX_DBG_LOG_OFF are controlling the definition of
the <em>code selection symbol</em> \ref ALOX_DBG_LOG.<p>

<b>Default values</b><br>
If no compilation symbols are given, appropriate default values are chosen by ALox headers.
Some of these default values refer to the somehow standard symbols <em>NDEBUG</em>, <em>DEBUG</em>
and <em>_DEBUG</em> used by other libraries. These default settings include:

- extra debug code is switched off.
- multi threading support is switched on.
- debug logging is switched on in debug builts and switched off in release builts.
- debug logging scope information is switched on.
- release logging is switched on.
- release logging scope information is switched off.

<b>Avoiding library compilation problems</b><br>
As with other C++ libraries, some of the compilation symbols change the interface and
footprint ('sizeof()') of some of the classes. Linking a code unit that was compiled
with different settings for one of these symbols, can fail. Even worse: in some cases, linking
still works, but a process running these code units crashes unexpectedly. Such crashes are
never easy to understand and to debug. So it is advised to be careful modifying compiler symbols and
make sure that those symbols whose documentation hints to the fact that they change the footprint of
the code, share the same value across all compilation units and the ALox library itself.<br>
A mechanism to detect compilation setup problems exists with method
\ref aworx::lib::ALIB::VerifyCompilationFlags "ALIB::VerifyCompilationFlags" which is called
automatically when invoking
\ref aworx::lox::ALox::Init "ALox::Init", which should be done explicitly on bootstrap, but which
is also be done implicitly, when ALox is used (and no explicit invocation was made before).

<b>Reference guide:</b><br>
The compilation symbols for ALox and ALib are listed here:
- \ref GrpALibCompilerSymbols
- \ref GrpALoxCompilerSymbols

<br>
# 4. Code Selection Symbols # {#cppprepro_code_selection_symbols}

These symbols are mostly derived (by the ALib/ALox header files) from the
<b>Compilation Symbols </b>(\ref GrpALibCompilerSymbols "ALib", \ref GrpALoxCompilerSymbols "ALox")
discussed in the previous section and, their naming often corresponds to these, excluding
suffixes <em>_ON</em> and <em>_OFF</em>.<p>
These symbols must not be passed to the compiler and must not be set manually from within code
entities that use ALox libraries. They can be used in code entities that use ALox to select code
depending on the same settings of the ALox library compilation.
(Besides ALox specific symbols of that type, of-course, also platform specific symbols are
used to select code, e.g. \e \_\_GNUC\_\_, \e \_\_GLIBCXX\_\_, \e \_MSC\_VER, \e \_WIN32, etc.).

Code selection symbols could be used to implement ALox logging using pairs of
\verbatim
#if defined(ALOX_XYZ_SYMBOL)
#endif
\endverbatim

While they are useful to implement rather large extra code blocks which are only used if
certain logging is enabled, in general it is not recommended to use this mechanism for each
and every <em>Log Statement</em>. Instead, it is recommended to use the ALox macros discussed in the next
section.<p>

ALox itself uses these symbols to enable the compilation of specific versions of the library
and to conditionally select the definition of the ALox macros.

For a complete reference, please refer to:
- \ref GrpALibCodeSelectorSymbols
- \ref GrpALoxCodeSelectorSymbols.


# 5. C++ Macros# {#cppprepro_macros}

As stated in the introduction, ALox for C++ makes extensive use of preprocessor macros
which still is adhering to modern C++ programming style, because the purpose of the macros are
exclusively to select code variations depending on the library build configuration.

The code selection mainly achieves:

- **Pruning of log code**<br>
Using the logging macros provided, allows to selectively remove all \e <em>debug logging</em> or
<em>release logging</em> invocations from the code. (For an explanation of the concept of
'\e pruning', see [What is Pruning?](../faq.html#faq_pruning).)<br>
To configure logging (e.g. create certain loggers, configure the log output, etc.) the macro
#Log_Prune and #Lox_Prune are provided (which are empty, hence remove all enclosed code on request).

<p>

- **Adding scope information**<br>
ALox uses built-in standard preprocessor symbols like  "__FILE__" and "__LINE__" to provide
information about the position of logging statement within the source. Especially for release
logging, one problematic fact is that such logging source information could disclose internals
if the release software unit was reverse engineered. Therefore, the use of source information
is configurable and disabled by default.<br>
Also, hiding the use of the built-in symbols by using dedicated ALox macros, reliefs the
source code from a lot of clutter and overhead.

\note
We think, from the fact that source code editors which color C++ macros specifically, a next
small benefit is seen when looking at the source code: Similar to colored comment lines,
all log lines shine in their own preprocessor color.

<p>
\note
Other language implementations of ALox (<em>ALox for C#</em> and <em>ALox for Java</em>) implement
pruning with different, language specific mechanisms. In C++, by providing not only a set
of macros to implement debug logging, but also one for release logging, one of the differences
to such other ALox implementations is, that this allows to prune <em>release logging</em> from the code
the same as to prune <em>debug logging</em>. This extra flexibility is not provided with the other
implementations by default, but might be achieved by adding language specific extensions by
the user of the libraries.<br>
It might be important to understand the difference: When release
logging is just \e disabled, the code for release logging still remains in the binaries,
which has an impact on their size and an (probably marginal) impact on their speed.
In addition it is possibility to reverse engineer such binaries and learn about internals of the
software (should someone do so).<br>
In this respect, ALox for C++ is the most flexible implementation of ALox as two different release
builds are possible: such with release logging incorporated and such with release logging pruned.<p>


## 5.2. ALox Logging Macros ## {#cppprepro_42}

The macros and their documentation are divided into two different groups:<br>
- \ref GrpMacrosDebugLog
- \ref GrpMacrosReleaseLog

While all macros for debug logging start with the prefix <b>Log_</b>, those for release
logging are using the prefix <b>Lox_</b>. Otherwise, their naming and parameters are the
same.<br>
The rest of the macro names in most cases corresponds to methods found in class
\ref aworx::lox::Lox "Lox".<p>

\note
This naming convention provides maximum source compatibility to ALox for C# and ALox for Java,
in which debug logging and its pruning is performed using a "mirror" class of class
\b Lox which is called \e Log.

Both macro sets include macro #Log_Prune, respectively #Lox_Prune.
All that these two macros do is pruning the code that is passed to them in the moment that
debug logging (respectively release logging) is supposed to be pruned.<p>

For an introduction of how to use these macros, see \ref cpptutorial.


## 5.3. ALox Low Level Macros ## {#cppprepro_43}

The two sets of ALox macros for debug and release logging that where introduced in the previous
chapter, rely on a small set of low level macros.
While these macros are not deemed to be used directly, using or even manipulating them might
be another way for expert users to tweak ALox.<p>

The macros are listed and documented here:  \ref GrpALoxMacrosLowLevel.<p>

For developers who are interested in manipulating them, please refer to the source code of
ALox to get an understanding on how such manipulation would influence the existing
\ref GrpMacrosDebugLog and \ref GrpMacrosReleaseLog, and also how to build your own macros
upon them.

## 5.4. ALib Macros ## {#cppprepro_44}
As mentioned already, the ALox class library includes some utility classes, packaged into ALib.
There are also a few macros available that are provided by ALib. These are not related to
logging but might be useful in general.<p>
For people who are interested in and may want to use these macros within projects that use
ALib/ALox anyhow, the documentation is found here: \ref GrpALibMacros.

*/

