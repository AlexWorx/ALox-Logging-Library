// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page cpptutorial       ALox for C++ Tutorial

\tableofcontents

# 1. Hello ALox # {#tutcpp_hello_alox}

Welcome to the ALox for C++ tutorial! This tutorial aims to introduce you to ALox as quickly as
possible and put you into a position to decide whether ALox is the right logging library for you.

Let us start with the very quick "hello world" sample:

\snippet ut_alox_tutorial_minimum.cpp        Tut_Minimum_Hello

When this method gets invoked, the output should look similar to this

        myproject/mysourcefile.cpp/(5):HelloALox() [00:00.000 +152 Âµs] [MAIN] [NULL] (001): Hello ALox

So, with one line of code we get a log statement that incorporates:
- The source file, line number and method, which - depending on the IDE you use - is 'clickable' which
  means a click in the output window opens the source file and highlights the line where the
  log statement sits.
- The time that was passed since the process started (here 00:00.000 which means below a millisecond)
- The time that passed since the last log line: 152 microseconds. This information is handy for
  a first impression on the execution speed of your methods.
- The name of the thread executing the log (automatically identified as the main thread in this case)
- NULL: to be explained later...
- The log counter (001), which e.g. is useful to quickly find the right output lines in your next debug-run.
- Finally the log message itself.

And: In the release build of your software, this line of code is completely pruned away. Also,
in debug versions you can disable them selectively, not only by their level, but also ... well, this
is where above "NULL" comes in..., let's forget this again. What we want to say here: you can
keep your debug log statements in your code forever!

Well, if you think this is nice, continue reading. There is a lot more to come. But we
have to go into some details first. That's why we quickly start a new chapter of this tutorial
where we then take a slower walk...


# 2. Adding ALox to a Project # {#tutcpp_adding_ALox}

The previous chapter was a teaser. We showed the shortest possible sample program which does not
'bootstrap' ALox (aka initialize and configure). This is detected and hence ALox tries to setup
itself with reasonable default options.

ALox has some concepts that need a little more time to understand.
Before we see more code, we have to take some prerequisites.

ALox is designed to support <b>debug logging</b> (log output that should appear only in the debug version of your software) as well
as <b>release logging</b>. In C++ such pruning is done using preprocessor macros. Therefore, you will see a lot of macros
in the code samples given here. We want you to understand a little of the class design of ALox, while you
are reading yourself through this tutorial. This is why a very brief explanation of the macros is given here:

- The most important interface into ALox is class
[Lox](@ref #aworx::lox::Lox) which is is a container to hold one or more instances of abstract class
[Logger](@ref #aworx::lox::core::Logger). Through the interface of class \b Lox, the log
statements are invoked. Log statements are forwarded to the loggers attached.

- The most simple case is that you have just one \b Lox instance, holding exactly one \b Logger which logs its output to the
standard output stream of your process (e.g. [AnsiConsoleLogger](@ref #aworx::lox::loggers::AnsiConsoleLogger)).
ALox supports much more complex scenarios and the preprocessor macros must support this as well.<br>
In this tutorial we stick to the simple case, maybe adding a second logger here and there.

- Most of the macros that we are using here have the form "Log_Xyz()". What these macros are doing is basically two things:
- Invoke the method Xyz() on a predefined singleton of class *Lox*. This predefined singleton is the default (configurable)
container for all debug logging output. Macros of this type will be pruned in release compilations of your software.
- Pass caller information to the ALox, so that the file name, line number and method name of the occurrence of a log
statement can be included in the log output
So, when you see the line

Log_Info( "Hello ALox" )

This means that method
[Info](@ref #aworx::lox::Lox::Info) is invoked on the predefined singleton of class \b Lox which
is by default used for debug logging.

- In addition to the macros that actually perform a log statement or otherwise interface with class \b Lox,
macro \ref Log_Prune exists, which in the release version of your software, removes any code it gets passed.
This macro is needed for things that do not represent single invocation of methods of class *Lox*, e.g.:
- creation and manipulation of loggers
- changing log output format
- code to assemble more complex log messages prior to logging them

In the tutorial language we do not further explain these macros. So do not be surprised when the presented sample code
shows a macro, while the explaining text refers to the method invocations that are represented by these macros.
For a full introduction into the macro language of ALox, please refer to
\ref cppprepro_macros "C++ Macros".

## 2.1 Create a tutorial project or equip your current project with ALox ##   {#tutcpp_createproject}

If you want to follow the tutorial samples and play around with it a little, you should
either create a tutorial project or right away equip your current project with ALox.
For information about how you do that see: \ref cppsetup.

\note
  Of-course, you can easily skip this step and just continue \e reading the tutorial
  without setting up ALox now. For some IDEs, there might be a
  \ref cppsetup "ready to use solution" available that minimizes efforts when you want
  to follow the samples and play around a little.

To include all headers necessary for this tutorial, add the following statements to your source file:

\snippet ut_alox_tutorial.cpp        Tut_include_statement

And below that, let's add a bunch of using statements to your source file:

\snippet ut_alox_tutorial.cpp        Tut_using_statement


## 2.2. Create an instance of class "Logger" ##  {#tutcpp_ha1}

For initializing ALox, e.g. the creation your loggers, you need to identify the right place in your
application.
This could be the "main()" method or any other place where some "bootstrapping" of your application
takes place.
Add the following line:

\snippet ut_alox_tutorial.cpp        Tut_Understanding_ALox_Line1

This tries to identify the best logger type that fits to your console type.
E.g. If the process runs on an ANSI enabled console
or a console window on Windows OS, colorful log output is enabled. Sometimes, this method even
creates two loggers: one for the console and one for your IDE output, when ALox is able to
detect and support such IDE.<br>
For information about what is currently supported and how (with environment variables,
configuration files or command line parameters) this behavior can be changed, see methods
[Log::AddDebugLogger](@ref #aworx::lox::Log::AddDebugLogger) and
[Lox::CreateConsoleLogger](@ref #aworx::lox::Lox::CreateConsoleLogger) which this macro invokes.

We never interface with a \c Logger directly. After it is
created and added to the \c Lox, we can mostly forget about it.
For almost all the rest of this introductory tutorial, all you
need to know is that loggers created with this method, write
log messages in textual format e.g. to standard output stream (and/or to the application console).
As you might  guess, other Loggers could be added in parallel that use other "drains" to write the
output to, e.g. files, the Internet, etc.

## 2.3. Add code to create and set a "Log Domain" ##     {#tutcpp_ha_3}

Now, we add a second line of code:

\snippet ut_alox_tutorial.cpp        Tut_Understanding_ALox_Line2


This tells ALox about a *log domain* called "APP" and assigns the *log domain level* INFO_WARNINGS_AND_ERRORS to it.
If you did not understand too much of the last sentence, don't worry, the concepts of *log domains* and *log levels* will get
very obvious to you in 5 minutes.

## 2.4. Add log code ##                             {#tutcpp_ha_4}

Next, we add a third line of code:

\snippet ut_alox_tutorial.cpp Tut_Understanding_ALox_Line3

This is now your first log output! The four lines of code you inserted into your application (besides the "#include" and "using namespace" statements)
should look like this:

\snippet ut_alox_tutorial.cpp        Tut_Understanding_ALox_All


## 2.5. Run your application within your IDE ##        {#tutcpp_ha_5}
Run your application. In the output window of your IDE (or at the console) you should see
a line similar to this:

\verbinclude generated/Tut_Understanding_ALox.txt

Now, if your using an IDE supported by ALox (e.g. Visual Studio in Windows), you can double click the log line in the output
window. The IDE  opens the source and selects the line of code where the log call was invoked.
This means, each log statement is "clickable" in your IDE and links to its source code line in the
editor. This is a tremendous help for developers when debugging their code.

Besides the fact that you can click it, users of ALox are saving even more time. Developers, when
using standard "debug print lines", often phrase textual info like:

        "attn: dbman.savedata(): oops could not store data....ERROR!"

hence, putting some info about the place in the code, where they have put the debug statements. As you see from the
ALox output above, information about the *caller* of the log statement is all included automatically.
Advantages are:

- lines are clickable and link to the editor (as mentioned above)
- less to type when adding debug print lines
- no need to change the log statement when you copy/paste a debug print line to a different class/method
or when you rename your class/method

Furthermore, as we will see later, the log message type (which seems to be "ERROR!" in the phrase above) is standardized
in ALox and does not need to be phrased in your message text.

Besides caller information and message type, you automatically get:

- the relative time of the log execution (time since application started)
- the time elapsed since the last log
- the ID of the thread that executed the method
- the *log domain* of your log statement

The output format and detail of the log line is configurable in ALox. The line above just shows
the default. Details you see can be removed or other details can be added (e.g. the absolute
date / time instead of only the relative).

\note Should your IDE not be supported by ALox in respect to generate "clickable log output lines" (aka lines that
link automatically to the right point in your source code) it might be the case that only by adjusting
the log output format a little, your IDE learns how to read and interpret ALox logging!
<p>

\note
You should adjust your IDE in a way that the output window spans over the complete
width of the main window. Also, depending on your screen size, you might decrease the font size of
the output window a little. The output gets wide, because a lot of valuable information is logged
besides the log message. In addition, the output is organized in columns that auto adjust their size.
This takes a wider output into account for the  benefit of largely improved readability.


## 2.6. Build a release version ##                              {#tutcpp_ha_6}

Switch your project configuration to "Release" and run the application. The output should not appear!

Even better: The three lines of code are not even compiled into the release target. So, whatever you
are logging out during developing and debugging your software, it is all automatically gone in the
release version.

This is achieved by providing the right set of
\ref cppprepro_compsymbols "Compilation Symbols" when
\ref cppsetup "setting up the project". Only project configurations that have the symbol
\b ALOX_DBG_LOG_ON set will contain ALox debug logging statements.

This has a lot of benefits:
- your release code executes faster,
- your release executable gets a smaller footprint and
- you are not delivering your debug language to the end user (not even if your executable is reverse engineered).


# 3. Log levels and log domains #                                          {#tutcpp_llld}
## 3.1. Log code with different log levels ##   {#tutcpp_llld_1}

The code above uses the method [Lox::Info()](@ref #aworx::lox::Lox::Info) (embedded in a preprocessor macro) to create the
log output. There are three other Versions of that method, together constituting the four "log levels":

-  [Lox::Error()]    (@ref #aworx::lox::Lox::Error)
-  [Lox::Warning()]  (@ref #aworx::lox::Lox::Warning)
-  [Lox::Info()]     (@ref #aworx::lox::Lox::Info)
-  [Lox::Verbose()]  (@ref #aworx::lox::Lox::Verbose)

Each of the methods accepts the *log domain* ( in our sample "App") and the log message as input parameters.
Internally all four methods differ only by using a different *log level*. The tricky thing that needs to be understood is that
such *log level* is compared with the *log domain level* that the domain currently holds.

In our sample codes' third line:

\snippet ut_alox_tutorial.cpp        Tut_LogLevels_SetDomain

we have assigned [Log::DomainLevel::INFO_WARNINGS_AND_ERRORS](@ref #aworx::lox::Log::DomainLevel ) to the domain "APP".
The possible domain log levels are:

-  [Log::DomainLevel::OFF                     ](@ref #aworx::lox::Log::DomainLevel)
-  [Log::DomainLevel::ERRORS                  ](@ref #aworx::lox::Log::DomainLevel)
-  [Log::DomainLevel::WARNINGS_AND_ERRORS     ](@ref #aworx::lox::Log::DomainLevel)
-  [Log::DomainLevel::INFO_WARNINGS_AND_ERRORS](@ref #aworx::lox::Log::DomainLevel)
-  [Log::DomainLevel::ALL                     ](@ref #aworx::lox::Log::DomainLevel)

Let us extend our sample code and see what happens. Replace the last line (the log call) by four
different log calls and let your code look like this:

\snippet ut_alox_tutorial.cpp        Tut_LogLevels

If you run your application now (in "Debug" mode), the following output should appear:

\verbinclude generated/Tut_LogLevels.txt

As you see, the last line of our code, containing the [Verbose()](@ref #aworx::lox::Lox::Verbose ) log statement was not logged!
This is because in line two of the code we set the *log domain level* to [INFO_WARNINGS_AND_ERRORS](@ref #aworx::lox::Log::DomainLevel ).
This tells the logging system that logs implemented with the method [Verbose()](@ref #aworx::lox::Lox::Verbose) are not to be logged.

The following table lists the domain log levels in the columns and the *log level* in the rows and shows which log levels are
activated when a certain *log domain level* is set:


<table border="1" >
<tr> <td> <center>Domain Level / Log Level</center></td>
<th width="100">Verbose</th> <th width="100">Info</th> <th width="100">Warning</th> <th width="100">Error</th>   </tr>
<tr><td><b><center>OFF</center></b></td>
<td><center>No</center></td> <td><center>No</center></td> <td><center>No</center></td> <td><center>No</center></td></tr>
<tr><td><b><center>ERRORS</center></b></td>
<td><center>No</center></td> <td><center>No</center></td> <td><center>No</center></td> <td><center>Yes</center></td> </tr>
<tr><td><b><center>WARNINGS_AND_ERRORS</center></b></td>
<td><center>No</center></td> <td><center>No</center></td> <td><center>Yes</center></td> <td><center>Yes</center></td> </tr>
<tr><td><b><center>INFO_WARNINGS_AND_ERRORS</center></b></td>
<td><center>No</center></td> <td><center>Yes</center></td> <td><center>Yes</center></td> <td><center>Yes</center></td> </tr>
<tr><td><b><center>ALL</center></b></td>
<td><center>Yes</center></td> <td><center>Yes</center></td> <td><center>Yes</center></td> <td><center>Yes</center></td></tr>
</table>


Fairly easy, right? With each line in the table, one further (more verbose) log type is added.<p>
To summarize, the above paragraph introduced you to the concepts of:
1. *Log domains* as a parameter of the four log methods
[Lox::Error()]       (@ref #aworx::lox::Lox::Error),
[Lox::Warning()]     (@ref #aworx::lox::Lox::Warning),
[Lox::Info()]        (@ref #aworx::lox::Lox::Info) and
[Lox::Verbose()]     (@ref #aworx::lox::Lox::Verbose)
2. *Log domain levels* that are assigned to *log domains* at runtime using the method [Lox::SetDomain()](@ref #aworx::lox::Lox::SetDomain )
3. *Log levels* that are assigned to each log statement in your code by choosing the right log method.

Now, you should understand how the comparison of the *log domain level* and the *log level* decides about whether a log is executed or not.


## 3.2. Default domains ##          {#tutcpp_llld_2}

If you already liked the tiny code that is necessary to implement ALox Logging, then you
will appreciate this section, because we want to make it even smaller. Replace the
code you added to your project so far by this one:

\snippet ut_alox_tutorial.cpp        Tut_DefaultDomains

The output remains the same:

\verbinclude generated/Tut_DefaultDomains.txt


OK, you might argue, the code became longer: We added line 3, which invokes a different versio of
[Lox::SetDomain](@ref #aworx::lox::Lox::SetDomain(const TString&, Log::Scope).
This method registers the domain with ALox and offers the possibility to set the given domain name as the default domain for the actual
[Scope]    (@ref #aworx::lox::Log::Scope) (source file or method).

What becomes less code however are the log statements
[Error()]       (@ref #aworx::lox::Lox::Error),
[Warning()]     (@ref #aworx::lox::Lox::Warning),
[Info()]        (@ref #aworx::lox::Lox::Info) and
[Verbose()]     (@ref #aworx::lox::Lox::Verbose). They do not need to have the domain as a parameter any more! This provides the
following advantages:
- Less typing
- Easier reading
- You can just copy/paste your log lines to different sources, without \e adjusting the log domains.
  They automatically use what defaulted for target this scope.
- You can change the name of the domain by changing it in a single place.

\note
    - You can still use the log methods including the domain parameter to overwrite the default domain
    - You can address "sub domains" relatively to your default domain within a scope that got a default domain
\par
\note
For further reading on domains and *sub domains*, see [corresponding chapter](../man_levelsanddomains.html)
in the ALox user Manual.

What happens if \b SetDomain is not invoked and ALox does not know about the domains?
As we have seen in the entry chapter, ALox still works:

\snippet ut_alox_tutorial.cpp        Tut_DefaultDomains_part2

Which works fine. But let's look behind the scenes:

\snippet ut_alox_tutorial.cpp        Tut_DefaultDomains_part3

We have enabled internal ALox warnings by setting the domain that ALox uses for such purposes (found
in field \ref aworx::lox::Lox::InternalDomain "Lox::InternalDomain".

 The output now is:

\verbinclude generated/Tut_DefaultDomains_part3.txt

From this example we learn that *log domains* which are neither registered for a scope nor set with
a log level do not cause any problem. ALox just creates them on the fly and continues its job.

The *domain level* that such *unknown* domains receive is inherited through the domain chain up to the root domain. The root domain
is a field existing in each *logger*. By default the root domain of a [ConsoleLogger](@ref #aworx::lox::loggers::ConsoleLogger) has
its *domain level* set to *All*. This is extremely useful, because whenever you are using 3rd party code that defines its custom
domain names, you can easily identify those domains in your log stream. In contrast, other loggers that you create for specific purposes
(e.g. log only messages of certain domains into a file), do not enable *unknown* domains as a default.
Therefore, these special purpose loggers stay clean and log only what you explicitly ask them to log.

\note On the same token, in this sample also a debug logger is created on the fly. ALox tries to
      auto-configure itself as good as possible and reasonable, even with creating logger types that
      fit your console output or an IDE you are running the software in.
      For release logging, ALox does not consider it 'reasonable' to create a release logger on
      the fly. When no logger was created, release log statements just do nothing. Also, no error
      is raised (would be bad in a release environment.)


## 3.3. Where to place ALox log code ##               {#tutcpp_llld_3}

As we now know a bit about *log domains*, we can briefly talk about where to
add ALox statements in your code. In the standard application setup, there are two
places, plus an optional third one.

### 3.3.1 Create Loggers and define domain levels in **the bootstrap section** of your application ###
When your application loads, as early in the lifecycle as possible,  you usually want
to create your loggers and set some *log domain level* values for a selected *log domain*.

A good place is the **main()** method or whatever the earliest entry point to your code is.

Code for this section would look like this:

\snippet ut_alox_tutorial.cpp        Tut_Placing_Part1

Of course, you can add and remove loggers anywhere in your code. Also, you can
modify *domain log levels* later at runtime as you please.

\note
This is also a good place to configure your log output the way you prefer it.
Some hints how to do that are [given here](../man_loggers.html#man_loggers_textlogger).

### 3.3.2 Add log messages anywhere in your code  ###
The second part is obvious: you add log statements in your code as you please.
Looking at the above sample class, we register two domains "MYDOM" and its
*sub domain* "PERF". Consider the *sub domain* "PERF" is used for
performance log statements Somewhere in the class a method **heavyCalculation()**
is invoked. A typical use of ALox would look like this:

\snippet ut_alox_tutorial.cpp        Tut_Placing_Part3

\note
  As a side note, in this sample, with the log output of the second line, we get the elapsed
  time displayed. There is no need to do your own math with the timestamps. In fact, the value
  is displayed in a human readable way, depending on the size of the time span.  (Other date and
  time outputs, like current date or absolute time can be configured to be logged as well, see
  class [TextLogger](@ref #aworx::lox::core::textlogger::TextLogger) for more information).

As "PERF" is a *sub domain* of "MYDOM" and "MYDOM" got set as the *default domain*
for the source file, the domain "MYDOM/PERF" could be also referenced using "~PERF".
The code then looks like this:

\snippet ut_alox_tutorial.cpp        Tut_Placing_Part3b

Advantages of this approach are:
- less typing
- you can copy/paste the code into a different class (with a different parent domain) without changing it.


### 3.3.3 Name your threads  ###
The third and really optional one is about multi threaded applications. ALox optionally
logs information about the thread id or name that executed the code containing your log
statements.

Often threads do not have a name, but just an ID. It would be much nicer to see a
nice name instead of that id. ALox provides a simple mechanism to map thread IDs to variable
thread names using the [Lox::MapThreadName](@ref #aworx::lox::Lox::MapThreadName) interface.<p>

Let us go back to the Hello ALox sample and add one line to rename the currently executed thread:

\snippet ut_alox_tutorial.cpp        Tut_PlacingCodeMapThreadName

The generated output is:

\verbinclude generated/Tut_PlacingCodeMapThreadName.txt

As you see, the currently executed thread is now named *BKGRND*. All log statements that will
be executed by this thread after the mapping takes place, will log this name.

\note Renaming threads in ALox will *not* rename the thread in your operating system. It is a
      purely ALox defined mapping of threads to ALox thread names.


The mechanism is simple, but it might not be simple to identify the right place in
the code to put it! Some code can be executed from different threads, and sometimes
(for example when using an UI framework) you might not even know exactly which thread will invoke
your code. However, the good news is that each thread ID has to be mapped only once during
the lifecycle of the program, but may be mapped multiple times. Therefore, the guideline is:

- For threads that your own code starts, the name mapping should occur in the start code of-course.
- Otherwise: Identify a piece of code from which you are sure that only one certain thread invokes that code.
- Make sure that this code is not executed frequently (to avoid the overhead caused by the duplicated mapping ).
- Make sure that this code is executed early in the lifecycle of your application, so that all log lines are
equipped with the right thread name mapping.

For the sample of UI Frameworks, a good place to invoke [Lox::MapThreadName](@ref #aworx::lox::Lox::MapThreadName)
is the initial creation callback of your main application UI component. Normally, it is
enough to put this statement only in one component (the main one), because all other components
will be initialized by the same Framework thread.

But as this is a convenience concept anyhow, it is good practice to not care too much
about it at first. Later, when your application grows, you can check your log files periodically for new, unmapped
thread IDs. When you see one, scroll up in the log file and try to identify the very first appearance
of a this new ID. A double click on the log line will open the code that invoked the log.
If you have populated your code with a reasonable amount of log entries, you will end up at the
right place automatically! It also might be a good idea to restart your app with all domains set
to verbose level and then look for the first appearances of unknown threads.

### 3.3.4 Upon termination  ###
Before termination of a software, optionally
\ref aworx::lox::Log::TerminationCleanUp "Log::TerminationCleanUp" may be invoked.
This is not really necessary, because all it does is freeing memory (and this will be done anyhow
by the operating system as soon as a process is terminated).
Memory profiling tools (like Valgrind) will not report leaks when this method is invoked.


# 4. Some more Details {#tutcpp_more}
## 4.1 Stop reading here? ##        {#tutcpp_more_1}

Developers are often in a hurry and reading tutorials is time consuming.
If you are only using the part of ALox the tutorial has covered up to this point you should
already benefit a lot from the ALox library and your programmer's life should have become easier and more
fun.

A-Worx (the maker of ALox) is a consultant to the software industry and one area of
competence is code style and code cleanness (sorry, we don't want to be advertising here).
Therefore, we emphasize our clients to stop using *temporary debug print lines* in
their sources. Instead, use ALox (or a similar tool) and all your debug output lines should
be implemented tidy and clean using a nice language for the messages. With ALox, such debug output should
never be temporary again and as such never be removed from the code! Programmers often remove
debug output after they think a piece of code works. But if problems arise or if the code
is further extended at a later stage, similar lines are inserted and re-written.
This is obviously a waste of time. With ALox, you just disable certain log domains for
which you think the code is fine and be able to reactivate them (with different verbose levels)
in the moment your interest moves back to it!

If you want and have the time to continue reading, you are invited to learn more
pretty neat features. Here we go!


## 4.2 Using StringNN to create your log messages ##        {#tutcpp_more_astring}

In many occasions, a log message consists of a string that is assembled from strings and
values. Creating such strings is time consuming and slows down the execution speed of your program.
Usually, when strings are concatenated, memory allocations are performed.
We want to avoid such allocations and therefore, ALox exports the ALib
class [AString](@ref aworx::lib::strings::ASAlloc). AString manages an internal, heap allocated
buffer and provides various methods and overloaded operators to append values.<p>

As we want to avoid just *all* allocations on the memory heap, AString is extended by template class
[ASPreAlloc<size_t>](@ref aworx::lib::strings::ASPreAlloc), which allocates the amount of string buffer
space provided in the template parameter 'internally'.

\note Internally here means: If class *ASPreAlloc<size_t>* is allocated on the stack, also its buffer resides
on the stack. If allocated in the heap using the new() operator, then the buffer memory is a part of the
heap allocation of the class itself. In other words: in the latter case, only one heap allocation is
performed while in the stack allocation case, no heap allocation is performed.

ALib provides type definitions for the most common sizes:
*String16*, *String32*, *String64*, ... *String1K*, *String2K*, *String4K*.

OK, if you are new to C++ and not too accustomed, yet with memory allocation details, then the good
news is: The use of StringNN is very simple! Here is a sample code:

\snippet ut_alox_tutorial.cpp        Tut_ALibStringNN

A more complex sample for debug logging using a stack allocated AString object is provided here:

\snippet ut_alox_tutorial.cpp        Tut_ALibStringNN-2

In our sample, we place code that is only inserted for the sake of generation debug log output
into the macro \b Log_Prune. This just removes this code in the release version of the software
the same as the logging statements are pruned.

\note
    Yes, also the macro Log_Prune does not follow the capital case convention for C++ macros.
    We decided to \e not adhere to this convention for all logging macros that will appear everywhere
    in your code later, which, as noted before, increases readability and especially source compatibility with
    ALox libraries for other programming languages, where pruning is not implemented by macros.

The log output could look as follows:


\verbinclude generated/Tut_ALibStringNN.txt

As you see in the sample, we chose two different sizes for the string class, 64 and 256.
The rules for choosing those are as follows:
- first of all: if a size is too small for the string to be written, this is *not* serious.
[ASPreAlloc<size_t>](@ref aworx::lib::strings::ASPreAlloc)
will just allocate heap memory to perform all operations.
So, all we are talking here is performance optimization.
- second of all: If a preallocated is chosen too big, this also does not hurt, because all it
does is reserving stack memory, which is \e 'released' as soon as the current scope is left.
- You should avoid to allocate too much stack memory if many recursive calls are invoked.
What helps here, is to place logging and the use of the AStringNN in its own code block (curly braces).
When the code block is left, the stack allocation will be freed instantly.

This is of-course all common knowledge to C++ programmers and not specific to ALox.
\note
- The sample above appends a \e std::string to an <em>ALib string</em>. To support this,
header file <em>"alib/compatibility/std_string.hpp"</em> has to be included.
- For more information about string classes provided by \e ALib, refer to
\ref aworx::lib::strings.


## 4.3 Conditional logging ##        {#tutcpp_more_conditional}

Often log lines should only be displayed if a certain condition is met. Here is a
sample:

\snippet ut_alox_tutorial.cpp        Tut_ConditionalLogging

The last two lines can be replaced by one as follows:

\snippet ut_alox_tutorial.cpp        Tut_ConditionalLogging2

Advantages are again less typing and better readability of the code. Furthermore, the C++ compiler
would probably not prune the *if statement* if it was a more complex evaluation.
As with using *Assert()* the evaluation of the expression is definitely pruned from your code. (Be
sure you do not put side effects into expressions of *Assert()* invocations.

\note
- In accordance with the concept of assertions, the condition has to be 'false' to have ALox perform the log.
- The *log level* of *Assert()* is *Log::Level::ERROR*

The method
[Lox::Assert()] (@ref #aworx::lox::Lox::Assert) is, similar to the other log methods of class
[Lox]           (@ref #aworx::lox::Lox),  (namely
[Error()]       (@ref #aworx::lox::Lox::Error),
[Warning()]     (@ref #aworx::lox::Lox::Warning),
[Info()]        (@ref #aworx::lox::Lox::Info) and
[Verbose()]     (@ref #aworx::lox::Lox::Verbose) ), just a shortcut into the full featured log method
[Lox::Line()]   (@ref #aworx::lox::Lox::Line), setting some default parameters. In rare cases, it might be useful to know and use
[Lox::Line()]   (@ref #aworx::lox::Lox::Line) directly.
By understanding the "shortcut methods" discussed in this tutorial, it will be easy to understand the use cases
and syntax for this general method by reading the class reference. For example, if you want to do condition logging similar
to the *Assert()* method but with a log level different to *Log::Level::ERROR*, then you might want to use
[Lox::Line()]  (@ref #aworx::lox::Lox::Line) and set all parameters as you wish.


## 4.4 LogTools: Log complex things easily ##       {#tutcpp_more_logtools}

Ooopps, unfortunately, we have to skip this chapter in the C++ Version of ALox. While C# and Java provide
runtime type information and class reflection (introspection), pure C++ does not.
Therefore, we are missing the extremely handy LogTools class in C++, which in the other ALox incarnations recursively
log complex objects automatically.<p>
Therefore, if you want to *dump* more complex objects you have to extend your classes (and probably their subclasses) with
corresponding helper functions that assemble a log string.<p>
What helps to have a clear presentation of objects dumps within your log files are the concepts of *indentation* and *multi-line message*
logging that ALox provides.<p>

Here is a sample output from the Java LogTools class that give you and idea how nicely a dumped object might look, if recursive logging
is done rightly:<p>
*ATTENTION: This is Java code, taken from the ALox for Java tutorial!*
\snippet "../../src.java/alox.unittests/ut_com_aworx_lox/UT_alox_tutorial.java"        Tut_Instance

As you can see, we are just passing a quite complex object, the current thread, to the method. The parameter
that follows the object which is to be logged determines the level of recursively logging composite objects.
Here are the first lines of output of the above sample:

\verbinclude  "../../docs/ALox.Java/generated/Tut_Instance.txt"

When implementing an object dump, you should not place a log statement for every attribute. In contrast, you should collect the whole
dump within an AString and then log this String as a whole.

For future versions of ALox for C++, it is planned to provide:
- Working with debug information to implement log tools for user defined classes
- Preprocessor macros that standardize the customized logging of complex objects
- Tools to log certain standard classes from STL, BOOST, QT or what have you.
You are invited to send us your proposals of log tool code for common libraries to be included in our codebase.


## 4.5 Directing log output to distinct loggers ##        {#tutcpp_more_seplog}
Because ALox stores the *log domain level* not only per *domain* but also 'per *logger*', we just
need to fill in a default parameter in [Lox::SetDomain()](@ref #aworx::lox::Lox::SetDomain ) to
assign different domain levels to different \e loggers.

In the following sample code we are creating two different *loggers*, one
[ConsoleLogger](@ref #aworx::lox::loggers::ConsoleLogger) and one of type
[MemoryLogger](@ref #aworx::lox::loggers::MemoryLogger). The latter just logs into an internal
buffer.
Then we add three different *log domains*:
- "DOM" that should log to both loggers
- "DOM/CON" that should log only to the ConsoleLogger
- "DOM/MEM" that should log only to the MemoryLogger

Let's have a look at the code first:

\snippet ut_alox_tutorial.cpp        Tut_SeparatedLogLevels

Running the sample, we get the following log on the console:

\verbinclude generated/Tut_SeparatedLogLevels.txt

The way we achieved the goal is that we use the method [Lox::SetDomain()](@ref #aworx::lox::Lox::SetDomain ) twice
on each of the *sub domains*. And in contrast to previous samples, we are passing two more parameters to it (and overwrite
their default values):
- \ref aworx::lib::enums::Propagation "Propagation" \p propagation<br>
This parameter defaults to
\ref aworx::lib::enums::Propagation "Propagation::ToDecendants" and tells ALox to not only
set the given *log domain* but all its *sub domains*  to the \c Log::DomainLevel provided.
We set this to
\ref aworx::lib::enums::Propagation "Propagation::None", because we do not have further *sub domains*
either way.
- \b String \p loggerFilter<br>
This parameter now is what helps us: It defaults to null and in this case does not filter any
\e logger. So, when omitted, all \e loggers are affected. If given however, only those
\e loggers whose field [Logger.Name](@ref #aworx::lox::core::Logger.Name)
match the given filter string are affected.

Looking back at the code, you will understand what is going on: For each *logger* we enable,
respectively, disable the output of messages for the corresponding domains using
[Lox::SetDomain()](@ref #aworx::lox::Lox::SetDomain ) by passing the appropriate filter.

\note
- String comparison between [Logger.Name](@ref #aworx::lox::core::Logger.Name) and parameter *loggerFilter* is case insensitive.
- ALox provides a minimum 'globbing' feature here: *loggerFilter* can start or end with an '*' character to fetch
more than one logger at once.

Some further quick remarks on the code:

- [MemoryLogger.MemoryLog](@ref #aworx::lox::loggers::MemoryLogger::MemoryLog) provides public access to its data.
See class
[AString](@ref #aworx::lib::strings::ASAlloc) for more information.

- As you can see from the output, the two log lines contained in the
[MemoryLogger](@ref #aworx::lox::loggers::MemoryLogger) are logged into two separated lines by the
[ConsoleLogger(@ref #aworx::lox::loggers::ConsoleLogger). This is a feature of
[TextLogger](@ref #aworx::lox::core::textlogger::TextLogger), the
super class of both. *ConsoleLogger* and MemoryLogger inherit this feature to log out multi-line data in a readable format.
Hence, logging all kinds of multi-line text documents (e.g. XML) results in a nicely readable output.
The multiple line output can be modified in some ways and also can be turned off.

- At the beginning of the sample, we are tweaking the output in the
[MemoryLogger](@ref #aworx::lox::loggers::MemoryLogger) a bit. Again, we are using features here available to all
[TextLogger](@ref #aworx::lox::core::textlogger::TextLogger) descendants
What we are achieving in this sample, is that the log output does not get too wide.

For further reading on *TextLoggers*, see
[corresponding chapter](../man_loggers.html#man_loggers_textlogger) in the ALox user Manual.



## 4.6 ALox configuration and internal log messages ##               {#tutcpp_more_config}

In complex projects it might get a little confusing to keep track about the
loggers and their domains. More importantly, when other software compontents of your project
are using ALox as well (defining their own domains) then you might not know exactly which
*log domains* get registered and used by those.

While the sample of the previous section is not too complex, for this tutorial it is
sufficient to demonstrate two different ways to have ALox log about *itself*.

From the previous sample we take the setup section, remove the log output, add some thread
mapping to ALox and invoke
\ref aworx::lox::Lox::LogConfig "LogConfig" in the end:

\snippet ut_alox_tutorial.cpp        Tut_LogConfig

We are invoking [Lox::LogConfig()](@ref #aworx::lox::Lox::LogConfig) which logs the current
configuration of the lox. The output is quite self explanatory:

\verbinclude generated/Tut_LogConfig.txt

Besides this, there is a <b>second option</b> to inspect what happens internally in class *Lox*.
ALox is equipped with an *internal log domain* named "ALOX". This domain is used by ALox to
log messages about itself! All we have to do, is setting the domain level of the internal
domain to verbose for our debug logger:

\snippet ut_alox_tutorial.cpp        Tut_LogConfig2

The output will be:

\verbinclude generated/Tut_LogConfig2.txt

This way, you can exactly observe what is going on inside ALox.

To summarize: We have to ways to look into ALox:

1. Method [Lox::LogConfig()](@ref #aworx::lox::Lox::LogConfig) logs a "snapshot" of the current states. The advantage of this is,
   that it is all logged sequentially in one place and does not clutter your log output.
2. By setting the *log domain level* of the internal log domain "ALOX" to a more verbose level. While this clutters your log output and you
   might have to search the pieces in your overall log stream, the advantage here is that you see the caller information and therefore
   you see "where" a certain manipulation of the settings took place...and you can click on it!

\note Instead of 'hard-coding' the internal domain name \e "ALOX", it is advisable to refer to field
      [Lox::InternalDomain](@ref #aworx::lox::Lox::InternalDomain). This field can also be
      changed for a \b Lox to have it log internal stuff under a custom domain.

## 4.7 Indentation ##                    {#tutcpp_more_indentation}

The outputs of the previous chapter look nicely formatted because it uses indentation when
recursively walking through the internal ALox configuration.

Indentation is a core feature of every single log method. We just did not use it yet, because
it is hidden as a default parameter.

See the documentation of the log methods
[Error()]       (@ref #aworx::lox::Lox::Error),
[Warning()]     (@ref #aworx::lox::Lox::Warning),
[Info()]        (@ref #aworx::lox::Lox::Info) and
[Verbose()]     (@ref #aworx::lox::Lox::Verbose) to identify where to add the indentation parameter.

The default indentation is 0. The result of increasing it depends on the Logger you are using.
Class [TextLogger](@ref #aworx::lox::core::textlogger::TextLogger)
for example (the base class of all console loggers of ALox) adds two spaces per indent
(which is configurable with field
\ref aworx::lox::core::textlogger::TextLogger::FmtIndentString "TextLogger::FmtIndentString").

Furthermore, when building the output using class
[AString]          (@ref #aworx::lib::strings::ASAlloc),
simple mechanism to use tabulators and aligned fields are provided.
See classes
[Format::Tab]      (@ref #aworx::lib::strings::Format::Tab) and
[Format::Field]    (@ref #aworx::lib::strings::Format::Field) for more information on this topic.


# Further reading #     {#tutcpp_end}

This is the end of the tutorial of ALox for C++. You should be able to use the basic features of the ALox logging ecosystem and
have nice, formatted, configurable log output in your software projects. ALox puts you in the comfortable position to
keep your debug log statements in your code, because you can easily configure not only the verbosity as a global
parameter, but for different portions and "domains" of your code separated. When you start editing code that you have not touched
for a while, you just can enable the corresponding log domain and restrict others to warnings and errors for a while.
Because of the efficient ALox implementation, disabled log domains do not have a relevant impact on the execution of your
debug code. As soon as you release your code, debug logging is pruned completly from your binaries.

Probably the most important thing that this tutorial does **not** cover is release logging. To understand release logging
and how debug and release log statements can even be mixed in your projects, some background information on the
[ALox architecture ](../man_alox_architecture.html) and \ref cppprepro are essential to know.

If however, you just want to start using ALox and get to know more details over time, you should read \ref cppsetup and probably \ref GrpMacrosDebugLog.

Finally if you now just want to know all about ALox (e.g. how you can implement your own Logger classes that log to your favorite network logging backend),
you can continue reading at the beginning of the [ALox User Manual](../manual.html) and of-course also browse the [AWorx class reference](annotated.html) pages.

*/
