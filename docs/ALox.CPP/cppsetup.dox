// #################################################################################################
//  Documentation - ALox Logging Library
//
//  Copyright 2013-2018 A-Worx GmbH, Germany
//  Published under 'Boost Software License' (a free software license, see LICENSE.txt)
// #################################################################################################

/**
\page alox_cpp_setup     IDE Setup for ALox for C++

\tableofcontents


\~Comment ####################################################################################### \~
# 1. Introduction # {#alox_cpp_setupcppsetup_1}

The C++ version of \alox is distributed in a separated repository. This repository solely
contains the C# and Java language versions.

The repository of \alib for C++ is found at: [github.com/AlexWorx/ALib](https://github.com/AlexWorx/ALib-Class-Library)

Documentation for compiling the library is given with \ref alib_man_setup.



\~Comment ####################################################################################### \~
# 2. Using ALox with Different IDEs#    {#alox_cpp_setupcppsetup_ides}
In the following sections, the use of ALox with different IDEs are discussed. Besides specifics
in respect to project setup, an overview about how \alox clickable log output is supported - and
achieved! "Achieving" here means most of all to configure the output format in a way that the
IDE "understands" the source file and line number information and links them to the editor and source.

To change the format of the log output, field
\ref #aworx::lib::lox::core::textlogger::MetaInfo::Format "Format" of object
\ref #aworx::lib::lox::core::textlogger::TextLogger::MetaInfo "TextLogger::MetaInfo" has to be
modified. This can be done either programatically, or, if available in the external configuration
of an application. If you are new to \alox, the easiest way to play around with different log
output formats, is to compile and run the sample project. This will generate an INI-file
(in your personal OS-specific configuration folder) and within this file you will find an entry for
configuration variable
[ALOX_LOGGERNAME_FORMAT](../group__GrpALoxConfigVars.html). You can edit this, and re-run the
sample. The log output will change. From here, you can start your own investigations about how
to convince your IDE to accept the log statements.

In the configuration file, there are also other configuration variables which can get useful to
adjust the log output to a certain IDE. If your IDE is not listed in the following paragraphs,
then still reading these might help you in understanding how such support is possible.


\~Comment ####################################################################################### \~
## 2.1. QT Creator##    {#alox_cpp_setupcppsetup_qtcreator}

[QT Creator](http://doc.qt.io/qtcreator/index.html) can be used in two different "modes", with
CMake files and with QMake files. Unfortunately, in respect to clickable log-output there is a
tremendous difference in the behavior of QT Creator.

\note When using %ALib classes in your project or you want to debug into or extend \alox,
      please note the special support of \alox for QT Creator
      [pretty printers](../tools.html#tools_debug_helpers_qtcreator).


\~Comment ####################################################################################### \~
### 2.1.1 Using QT Creator with QMake ### {#alox_cpp_setupcppsetup_qtcreator_qm}

In respect to log output file name recognition, we have made the following observations:

- When using QTCreator with QMake (!), the IDE recognizes source code information if the line starts
  with three spaces and the string \c "Loc:".
- The source information is then to be provided with square brackets.
- no other square brackets must occur in the output line
- Any color information (ANSI color codes) which otherwise are recognized by QT Creator
  are removed. You can see colors flashing up shortly sometimes and then they disappear. The
  reason is obviously that QT Creator parses the output window and colorizes all source links it
  detects in blue - and removing all other color code!
- The rules how source paths are recognized by QTCreator is not known to us. Often,
  trimmed source file paths are sufficient (see
  [Trimming Source File Paths and Clickable IDE Output](..\alox_man_trim_source_path.html))
  but sometimes the full path has to be given. Especially if libraries that use ALox are involved,
  the trimmed path is sometimes not enough. In this case, a source path trim rule might be created
  that turns relative source file paths (provided by QMake to the C++ compiler) into absolute ones.

From these observations, the following advice can be given:
- A plain (non-colorful!) logger of type [ConsoleLogger] (@ref aworx::lib::lox::loggers::ConsoleLogger)
  is to be used created.<br>
- The string [MetaInfo::Format] (@ref aworx::lib::lox::core::textlogger::MetaInfo::Format) needs to start with
  \c "   Loc: [..." .
- No square brackets must be used in the meta information (and the log output itself).
- In addition, all square brackets are removed from Fields
  [MetaInfo::VerbosityVerbose] (@ref aworx::lib::lox::core::textlogger::MetaInfo::VerbosityVerbose),
  [MetaInfo::VerbosityInfo]    (@ref aworx::lib::lox::core::textlogger::MetaInfo::VerbosityInfo),
  [MetaInfo::VerbosityWarning] (@ref aworx::lib::lox::core::textlogger::MetaInfo::VerbosityWarning) and
  [MetaInfo::VerbosityError]   (@ref aworx::lib::lox::core::textlogger::MetaInfo::VerbosityError).
- Finally, using method
  [TextLogger::SetReplacement] (@ref aworx::lib::lox::core::textlogger::TextLogger::SetReplacement),
  replacement rules may be added which will replace all square brackets within the contents
  of <em>Log Statements</em> by curly braces.

Using external configuration this means to set three variables. For example, an INI-file might
contain the following entries:

    CONSOLE_TYPE=                      plain
    DEBUG_LOGGER_FORMAT=              "   Loc: [%SP/%SF(%SL)]:%A3%SM %A3{%TC +%TL}{%tN}{%D}%A1#%#: ",    \
                                       {ERR},                                              \
                                       {WRN},                                              \
                                      "     ",                                             \
                                       {***}
    DEBUG_LOGGER_REPLACEMENTS=        "[", "{", "]", "}"




\~Comment ####################################################################################### \~
### 2.1.2 Using QT Creator with CMake ###   {#alox_cpp_setupcppsetup_qtcreator_cm}

<em>QT Creator</em> has a built in CMake support which works really well with the CMake files
provided with the project (as of the time of this writing).

To use the pre-build CMake files of ALox with <em>QT Creator</em>, open menu \e File of
<em>QT Creator</em> and choose <em>Open File or Project...</em> and
select the file:

        ALIB_LIB_PATH/build/cmake/samples/ALox/CMakeLists.txt

Follow the project setup as <em>QT Creator</em> documentation suggests.
When the CMake run dialog appears, for debug builds, no arguments need to be passed. For release
builds, provide

        -DCMAKE_BUILD_TYPE=Release

as the CMake Arguments

The ALox sample project is now ready to be build in <em>QT Creator</em>

In respect to log output file name recognition, there is some bad news now: When used with CMake
projects, QT Creator does not support clickable log lines. At least, we have not found out how!
Therefore, we have no recommendation about how to change the log output in respect to make
such output clickable.

The output panes of QT Creator support colorful (ANSI) logging and have a light background.
Therefore, we recommend to set the following two configuration variables:

    CONSOLE_TYPE=            ansi
    CONSOLE_LIGHT_COLORS=    background


\~Comment ####################################################################################### \~
## 2.2. Using ALox with Visual Studio##    {#alox_cpp_setupcppsetup_vstudio}

When you are new to ALox and you just want to play around with it a bit, the easiest thing
is to open the Visual studio solution found in

        ALIB_LIB_PATH/build/ide.vstudio/Solution/ALox-CPP.sln

You are set! For example you could walk through the \ref alox_cpp_tutorial by adding the tutorial
code to the \c main() function of the project *ALox-CPP-Samples*.

ALox provides a Visual Studio project that compiles ALox into a DLL.
The projects is located in:

        ALIB_LIB_PATH/build/ide.vstudio/ALox-CPP-DLL/

Add this project to your solution and set a build dependency from your project to the just added
*ALox-CPP-DLL* project. Furthermore, the *ALox-CP-DLL project* has to be added as a reference to
your project.
Finally, the ALox include directory has to be added to your project.

\note
  When using ALox in a Microsoft Windows software, it may be important to
  include <em>windows.h</em> prior to any ALox header file. The reason is, that ALib
  (used by ALox) includes <em>windows.h</em> unless it was included already. When ALib
  library includes <em>windows.h</em>, it uses some defines like <em>WIN32_LEAN_AND_MEAN</em>
  or <em>NOGDI</em> to minimize the impact of that huge header file. If <em>windows.h</em>
  is included prior to including ALox (AWorx library), it is up to the embedding application
  which level of windows functionality is needed.


<b>Clickable Log Output with Visual Studio:</b><br>
As far as we know, clickable log output is only possible to have when launching a project
in debug mode. In this case, ALox automatically adds a second logger of type
\ref aworx::lib::lox::loggers::VStudioLogger "VStudioLogger". (This is the default behavior by default,
implemented with method \ref aworx::lib::lox::Log::AddDebugLogger "Log::AddDebugLogger".)

This logger does everything right to have clickable log lines in Visual Studio. No
adjustments need to be done.


\~Comment ####################################################################################### \~
## 2.3 Using ALox with JetBrains CLion ## {#alox_cpp_setupcppsetup_clion}

[CLion](https://www.jetbrains.com/clion/)s' build system relies on \e CMake.
Pre-configured project folders are provides with


    ALIB_LIB_PATH/build/ide.clion/samples/ALox
    ALIB_LIB_PATH/build/ide.clion/unittests

The \e CMake files within these directories are just including the the corresponding \e CMake files
found in

    ALIB_LIB_PATH/build/cmake/samples/ALox
    ALIB_LIB_PATH/build/cmake/unittests

The advantage of this approach is that the "generic" folders found in folder \e cmake are
kept free from \e CLion project files.

Therefore, \e CLion users should be ready to compile by just opening these project folders.

For debugging \alib and \alox code, you might want to install the
[Pretty Printers for GNU Debugger](../tools.html#tools_debug_helpers_gdb).


<b>Clickable Log Output with CLion:</b><br>

\e CLion has an intelligent output console that supports ANSI colors and detects links to files
automatically. The file name without path is sufficient and this way, the default format string
should do fine.

There is one specialty about the ANSI color support: CLion does not support light colors.
Therefore, the use of light colors has to be switched off.
If this is not done, colors are in most cases not effective.

As a summary, these or similar configuration variable settings are recommended:

    [ALOX]
    CONSOLE_TYPE=           ansi
    CONSOLE_LIGHT_COLORS=   never
    DEBUG_LOGGER_FORMAT=    %SF:%SL:%A3%SM %A3[%TC +%TL][%tN][%D]%A1#%#: %V,    \
                            \e[31m,                                             \
                            \e[34m,                                             \
                            ,                                                   \
                            \e[33m
*/
