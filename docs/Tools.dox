// #################################################################################################
//  Documentation - ALox Logging Library
//
//  (c) 2013-2016 A-Worx GmbH, Germany
//  Published under MIT License (Open Source License, see LICENSE.txt)
// #################################################################################################

/**
\page tools      Tools for ALox

\tableofcontents

In this section, tools that support the development process are described.
Currently, ALox offers helpers for the convenient display of ALib and ALox classes in
debuggers of different IDEs.

\note IDE plug-ins for displaying log messages are under development.


# 1. Display of ALib/ALox Types in Debuggers # {#tools_debug_helpers}


## 1.1 ALox for C++: Debug Helper Python Script for QT Creator ## {#tools_debug_helpers_qtcreator}

IDE
[QT Creator](http://www.qt.io/developers) supports what is called
[Debug Helpers](http://doc.qt.io/qtcreator/creator-debugging-helpers.html).
Those are 3rd party scripts written in
[Python](https://www.python.org) language which enable to modify the display
of structured C++ types in <em>QT Creators'</em> the debug panels.

ALox provides such script for its common classes and for classes of the underlying library ALib.

The script is found in the ALox source folder under

    tools/ideplugins/QTCreator/DebugHelpers


Please refer to the
[documentation](http://doc.qt.io/qtcreator/creator-debugging-helpers.html) of
<em>QT Creator</em> on how to make the script available for QT Creator.

## 1.2 ALox for Java: Eclipse Debug View Detail Formatters ## {#tools_debug_helpers_eclipse}

The good news is, that wherever reasonable, classes of ALib and ALox are equipped with otherwise
unnecessary overwrites of method \c toString() and the \e Eclipse IDE is able to display its
result in the debugger.

To enable this, open the preferences dialog in \e Eclipse:

    Window -> Preferences -> Java -> Debug -> Detail Formatters

Here, select radio button "As the label for all Variables".

For classes \c AString and \c Substring however, these methods are needed to work properly
returning the string contents, instead of a human readable format with extra information.
Therefore, for your convenience, in the same dialog as noted above, two debug detail helpers
should be added:

- for type <b> "com.aworx.lib.strings.AString"</b> add snippet

  \verbatim
"[" + length() + '/' + capacity() + "] \"" + toString() + "\""
  \endverbatim

- for type <b> "com.aworx.lib.strings.Substring"</b> add snippet

  \verbatim
"[" + length() + "] \"" + toString() + "\""
  \endverbatim

## 1.3 ALox for C#: Monodevelop Debug Helpers## {#tools_debug_helpers_monodevelop}

Wherever reasonable, classes of ALib and ALox are equipped with otherwise
unnecessary overwrites of method \c ToString() and the \e Monodevelop IDE is able to display its
result in the debugger.

To enable this, open the preferences dialog in \e Monodevelop:

    Edit -> Preferences -> Projects -> Debugger

Here, make a tick to checkbox

    [X] "Call string-conversion function on objects in variables windows"


Unfortunately, unlike for example \e Eclipse IDE for Java, currently Monodevelop does not support
specific debug helpers otherwise. Therefore, the \c ToString method of classes
\c AString and \c Substring, which need to work properly returning the string contents, instead
of a human readable format with extra information, have to be left as they are. But still,
seeing the string contents directly is oftenly enough.

# 2. Valgrind Error Suppression # {#tools_valgrind}
The C++ Version of ALox provides a ".supp" file for the analyzer tool
[Valgrind](http://valgrind.org/). The file is found in the ALox source folder under

    tools/Valgrind/alib_alox.supp

and is provided to \e Valgrind using option

    --suppressions= .../tools/Valgrind/alib_alox.supp

For more information refer to the
[Valgrind Documentation](http://valgrind.org/docs/manual/manual-core.html#manual-core.suppress).


# 3. Doxygen Dot-File Fixer # {#tools_DoxygenGraphTemplateInstanceRemover}
The C++ Version of ALox provides a small tool for patching the diagrams of the
[Doxygen](http://www.stack.nl/~dimitri/doxygen) documentation of ALib/ALox.
The cmake project is found in the ALox source folder under:

    tools/DoxygenGraphTemplateInstanceRemover

It consists only of a single \e main.cpp file and the CMake target is configured to write
the release version into the

    docs/

folder. There, when available, the tool is used by doxygen as a replacement to the
[Graphviz dot tool](http://graphviz.org). The tool patches the dot file that is to be processed
and then invokes the original software.<br>
This tool is only needed, if the HTML documentation (which you are currently reading) is to
be 'compiled' from scratch.



*/
